PROC ax.asm
!---------------------------------------------
          csegment  
;Starting PCL->MCL:
          zsegment  
          align     8
ax.outputfile:
          resb      8
          align     8
ax.inputfile:
          resb      8
          isegment  
          align     8
ax.axlevel:
          dq        5
          align     8
ax.optionnames:
          dq        L2981
          dq        L2982
          dq        L2983
          dq        L2984
          dq        L2985
          dq        L2986
          dq        L2987
          dq        L2988
          dq        L2989
          dq        L2990
          dq        L2991
          dq        L2992
          dq        L2993
          dq        L2994
          dq        L2995
          dq        L2996
          dq        L2997
          zsegment  
ax.fshowtiming:
          resb      1
ax.fshowsx:
          resb      1
ax.fshowss:
          resb      1
ax.fshowmcl:
          resb      1
          isegment  
          align     8
ax.logdest::
          dq        0
          zsegment  
          align     16
ax_writeobj.sectiontoaux.r:
          resb      18
          align     16
ax_writeobj.strtoaux.r:
          resb      18
          align     16
ax_writeobj.makesymbol.r:
          resb      18
          align     16
ax_writeobj.writerelocs.s:
          resb      10
          isegment  
          align     8
ax_writeobj.nstrings:
          dq        0
          align     8
ax_writeobj.nextstringoffset:
          dq        0
          zsegment  
          align     8
ax_writeobj.stringlengths:
          resb      40000
          align     8
ax_writeobj.stringtable:
          resb      40000
          isegment  
          align     8
ax_writeobj.stoffset:
          dq        0
          zsegment  
          align     8
ax_writeobj.nsymbols:
          resb      8
          align     16
ax_writeobj.symboltable:
          resb      180018
          align     8
ax_writeobj.dataptr:
          resb      8
          align     8
ax_writeobj.datastart:
          resb      8
          align     8
ax_writeobj.symtaboffset:
          resb      8
ax_disasm.strmmx.str:
          resb      32
ax_disasm.strxmm.str:
          resb      32
ax_disasm.printaddrmode.str:
          resb      100
          isegment  
          align     8
ax_disasm.strfreg.fregnames:
          dq        L2998
          dq        L2999
          dq        L3000
          dq        L3001
          dq        L3002
          dq        L3003
          dq        L3004
          dq        L3005
          align     8
ax_disasm.strreg.mregnames64:
          dq        L3006
          dq        L3007
          dq        L3008
          dq        L3009
          dq        L3010
          dq        L3011
          dq        L3012
          dq        L3013
          dq        L3014
          dq        L3015
          dq        L3016
          dq        L3017
          dq        L3018
          dq        L3019
          dq        L3020
          dq        L3021
          align     8
ax_disasm.strreg.mregnames32:
          dq        L3022
          dq        L3023
          dq        L3024
          dq        L3025
          dq        L3026
          dq        L3027
          dq        L3028
          dq        L3029
          dq        L3030
          dq        L3031
          dq        L3032
          dq        L3033
          dq        L3034
          dq        L3035
          dq        L3036
          dq        L3037
          align     8
ax_disasm.strreg.mregnames16:
          dq        L3038
          dq        L3039
          dq        L3040
          dq        L3041
          dq        L3042
          dq        L3043
          dq        L3044
          dq        L3045
          dq        L3046
          dq        L3047
          dq        L3048
          dq        L3049
          dq        L3050
          dq        L3051
          dq        L3052
          dq        L3053
          align     8
ax_disasm.strreg.mregnames8:
          dq        L3054
          dq        L3055
          dq        L3056
          dq        L3057
          dq        L3058
          dq        L3059
          dq        L3060
          dq        L3061
          dq        L3062
          dq        L3063
          dq        L3064
          dq        L3065
          dq        L3066
          dq        L3067
          dq        L3068
          dq        L3069
          dq        L3070
          dq        L3071
          dq        L3072
          dq        L3073
          align     8
ax_disasm.strreg.regnames64:
          dq        L3074
          dq        L3075
          dq        L3076
          dq        L3077
          dq        L3078
          dq        L3079
          dq        L3080
          dq        L3081
          dq        L3082
          dq        L3083
          dq        L3084
          dq        L3085
          dq        L3086
          dq        L3087
          dq        L3088
          dq        L3089
          align     8
ax_disasm.strreg.regnames32:
          dq        L3090
          dq        L3091
          dq        L3092
          dq        L3093
          dq        L3094
          dq        L3095
          dq        L3096
          dq        L3097
          dq        L3098
          dq        L3099
          dq        L3100
          dq        L3101
          dq        L3102
          dq        L3103
          dq        L3104
          dq        L3105
          align     8
ax_disasm.strreg.regnames16:
          dq        L3106
          dq        L3107
          dq        L3108
          dq        L3109
          dq        L3110
          dq        L3111
          dq        L3112
          dq        L3113
          dq        L3114
          dq        L3115
          dq        L3116
          dq        L3117
          dq        L3118
          dq        L3119
          dq        L3120
          dq        L3121
          align     8
ax_disasm.strreg.regnames8:
          dq        L3122
          dq        L3123
          dq        L3124
          dq        L3125
          dq        L3126
          dq        L3127
          dq        L3128
          dq        L3129
          dq        L3130
          dq        L3131
          dq        L3132
          dq        L3133
          dq        L3134
          dq        L3135
          dq        L3136
          dq        L3137
          dq        L3138
          dq        L3139
          dq        L3140
          dq        L3141
          zsegment  
ax_disasm.decodeinstr.str:
          resb      256
          align     8
ax_disasm.codeptr:
          resb      8
          align     8
ax_disasm.destptr:
          resb      8
ax_disasm.deststr:
          resb      256
          align     8
ax_disasm.f3override:
          resb      8
          align     8
ax_disasm.f2override:
          resb      8
          align     8
ax_disasm.addroverride:
          resb      8
          align     8
ax_disasm.sizeoverride:
          resb      8
          align     8
ax_disasm.offsetsize:
          resb      8
          align     8
ax_disasm.offset:
          resb      8
          align     8
ax_disasm.opsize:
          resb      8
          align     8
ax_disasm.scale:
          resb      8
          align     8
ax_disasm.indexreg:
          resb      8
          align     8
ax_disasm.basereg:
          resb      8
          align     8
ax_disasm.rmopc:
          resb      8
          align     8
ax_disasm.rmreg:
          resb      8
          align     8
ax_disasm.addrmode:
          resb      8
          align     8
ax_disasm.rex:
          resb      8
          isegment  
          align     8
ax_disasm.addrmodenames:
          dq        L3142
          dq        L3143
          dq        L3144
          align     8
ax_disasm.condnames:
          dq        L3145
          dq        L3146
          dq        L3147
          dq        L3148
          dq        L3149
          dq        L3150
          dq        L3151
          dq        L3152
          dq        L3153
          dq        L3154
          dq        L3155
          dq        L3156
          dq        L3157
          dq        L3158
          dq        L3159
          dq        L3160
          align     8
ax_disasm.opnames:
          dq        L3161
          dq        L3162
          dq        L3163
          dq        L3164
          dq        L3165
          dq        L3166
          dq        L3167
          dq        L3168
          zsegment  
          align     8
ax_disasm.xfchsmask_pd:
          resb      8
          align     8
ax_disasm.nmodules:
          resb      8
          align     8
ax_disasm.lx:
          resb      8
          align     8
ax_disasm.res2:
          resb      8
          align     8
ax_disasm.xyz:
          resb      8
          align     8
ax_disasm.abc:
          resb      8
          isegment  
ax_writeexe.writedosstub.stubdata:
          db        77
          db        90
          db        144
          db        0
          db        3
          db        0
          db        0
          db        0
          db        4
          db        0
          db        0
          db        0
          db        255
          db        255
          db        0
          db        0
          db        184
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        64
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        128
          db        0
          db        0
          db        0
          db        14
          db        31
          db        186
          db        14
          db        0
          db        180
          db        9
          db        205
          db        33
          db        184
          db        1
          db        76
          db        205
          db        33
          db        84
          db        104
          db        105
          db        115
          db        32
          db        112
          db        114
          db        111
          db        103
          db        114
          db        97
          db        109
          db        32
          db        99
          db        97
          db        110
          db        110
          db        111
          db        116
          db        32
          db        98
          db        101
          db        32
          db        114
          db        117
          db        110
          db        32
          db        105
          db        110
          db        32
          db        68
          db        79
          db        83
          db        32
          db        109
          db        111
          db        100
          db        101
          db        46
          db        13
          db        13
          db        10
          db        36
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          zsegment  
          align     8
ax_writeexe.userentrypoint:
          resb      8
          align     8
ax_writeexe.dataptr:
          resb      8
          align     8
ax_writeexe.datastart:
          resb      8
          align     8
ax_writeexe.ndlls:
          resb      8
          align     16
ax_writeexe.dlltable:
          resb      2400
          align     8
ax_writeexe.nimports:
          resb      8
          align     16
ax_writeexe.importtable:
          resb      144000
          align     8
ax_writeexe.importdir:
          resb      8
          align     8
ax_writeexe.nsections:
          resb      8
          align     16
ax_writeexe.sectiontable:
          resb      720
          align     8
ax_writeexe.stentrypoint3:
          resb      8
          align     8
ax_writeexe.stentrypoint2:
          resb      8
          align     8
ax_writeexe.stentrypoint:
          resb      8
          align     8
ax_writeexe.fileiatsize:
          resb      8
          align     8
ax_writeexe.fileiatoffset:
          resb      8
          align     8
ax_writeexe.thunktable:
          resb      8
          align     8
ax_writeexe.filesize:
          resb      8
          align     8
ax_writeexe.imagesize:
          resb      8
          align     8
ax_writeexe.libnotable:
          resb      240
          align     8
ax_writeexe.libinstnames:
          resb      240
          align     8
ax_writeexe.libinsttable:
          resb      240
          isegment  
          align     8
ax_objdecls.coffscopenames::
          dq        L3169
          dq        L3170
          dq        L3171
          align     8
ax_objdecls.relocnames::
          dq        L3172
          dq        L3173
          dq        L3174
          dq        L3175
          dq        L3176
          dq        L3177
          dq        L3178
          align     8
ax_genss.genrm.scaletable:
          dq        0
          dq        1
          dq        0
          dq        2
          dq        0
          dq        0
          dq        0
          dq        3
          zsegment  
          align     8
ax_genss.currmcl:
          resb      8
          align     8
ax_genss.nrelocs:
          resb      8
          align     8
ax_genss.currrelocs:
          resb      8
          align     8
ax_genss.currdata:
          resb      8
          isegment  
          align     8
ax_genss.currseg:
          dq        0
          zsegment  
          align     8
ax_genss.extraparam:
          resb      8
          align     8
ax_genss.f3override:
          resb      8
          align     8
ax_genss.f2override:
          resb      8
          align     8
ax_genss.addroverride:
          resb      8
          align     8
ax_genss.sizeoverride:
          resb      8
          align     8
ax_genss.rex:
          resb      8
ax_lib.realtostr.str:
          resb      64
ax_lib.inttostr.str:
          resb      64
ax_lib.xgetregname.str:
          resb      16
ax_lib.getregname.str:
          resb      32
ax_lib.getfullname.str:
          resb      256
ax_lib.stropnd.str:
          resb      256
ax_lib.strmcl.str:
          resb      512
          align     8
ax_lib.regtable::
          resb      1280
          isegment  
          align     8
ax_lib.dest::
          dq        ax_lib.destv
          zsegment  
          align     16
ax_lib.destv:
          resb      16
          align     8
ax_lib.mccodex::
          resb      8
          align     8
ax_lib.mccode::
          resb      8
          isegment  
          align     8
ax_lib.zero_opnd::
          dq        0
          align     8
ax_lib.labelno::
          dq        0
          zsegment  
          align     16
ax_lib.dframeopnd::
          resb      24
          align     16
ax_lib.dstackopnd::
          resb      24
          isegment  
          align     8
ax_lib.currsegment::
          dq        0
          align     8
ax_lib.opndnames::
          dq        L3179
          dq        L3180
          dq        L3181
          dq        L3182
          dq        L3183
          dq        L3184
          dq        L3185
          zsegment  
          align     16
ax_lib.dummy1:
          resb      16
          align     8
ax_parse.exprtype:
          resb      8
          align     8
ax_parse.exprvalue:
          resb      8
          align     8
ax_parse.exprlabeldef:
          resb      8
ax_lex.commentmap:
          resb      256
ax_lex.digitmap:
          resb      256
ax_lex.alphamap:
          resb      256
          align     8
ax_lex.lxsymptr::
          resb      8
          align     8
ax_lex.lxstart:
          resb      8
          align     8
ax_lex.lxsptr::
          resb      8
          align     8
ax_lex.lxhashvalue:
          resb      8
          align     8
ax_lex.lxlength::
          resb      8
          align     8
ax_lex.lxsvalue::
          resb      8
          align     8
ax_lex.lxxvalue::
          resb      8
          align     8
ax_lex.lxvalue::
          resb      8
          align     8
ax_lex.lxsubcode::
          resb      8
          align     8
ax_lex.lxsymbol::
          resb      8
          align     8
ax_decls.nmclopndsasm::
          resb      8
          align     8
ax_decls.nmclasm::
          resb      8
          align     8
ax_decls.currmoduleno::
          resb      8
          align     8
ax_decls.modulenamelist::
          resb      8
          align     8
ax_decls.globalimportlist::
          resb      8
          align     8
ax_decls.ss_symboltablesize::
          resb      8
          align     8
ax_decls.ss_nsymbols::
          resb      8
          align     8
ax_decls.ss_symboltable::
          resb      8
          align     8
ax_decls.ss_ncoderelocs::
          resb      8
          align     8
ax_decls.ss_nidatarelocs::
          resb      8
          align     8
ax_decls.ss_coderelocs::
          resb      8
          align     8
ax_decls.ss_idatarelocs::
          resb      8
          align     8
ax_decls.ss_code::
          resb      8
          align     8
ax_decls.ss_idata::
          resb      8
          align     8
ax_decls.ss_zdata::
          resb      8
          align     8
ax_decls.ss_zdatalen::
          resb      8
          isegment  
          align     8
ax_decls.alineno::
          dq        0
          align     8
ax_decls.nundefined::
          dq        0
          align     8
ax_decls.linecount::
          dq        0
          align     8
ax_decls.fquiet::
          dq        0
          align     8
ax_decls.fverbose::
          dq        0
          zsegment  
          align     8
ax_decls.logdev::
          resb      8
          align     8
ax_decls.dupltable::
          resb      524288
          align     8
ax_decls.lexhashtable::
          resb      524288
          align     8
ax_decls.nsearchlibs::
          resb      8
          align     8
ax_decls.nmodules::
          resb      8
          align     8
ax_decls.searchlibs::
          resb      240
          align     16
ax_decls.moduletable::
          resb      4800
          isegment  
          align     8
ax_decls.nsourcefiles::
          dq        0
          align     8
ax_decls.lxlineno::
          dq        0
          align     8
ax_decls.lxfileno::
          dq        0
          align     8
ax_tables.segmentnames::
          dq        L3186
          dq        L3187
          dq        L3188
          dq        L3189
          dq        L3190
          align     8
ax_tables.reftypenames::
          dq        L3191
          dq        L3192
          dq        L3193
ax_tables.prefixsizes::
          db        1
          db        2
          db        2
          db        4
          db        4
          db        8
          db        8
          db        16
          align     8
ax_tables.prefixnames::
          dq        L3194
          dq        L3195
          dq        L3196
          dq        L3197
          dq        L3198
          dq        L3199
          dq        L3200
          dq        L3201
ax_tables.cmovcccodes::
          db        0
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        2
          db        3
          align     8
ax_tables.cmovccnames::
          dq        L3202
          dq        L3203
          dq        L3204
          dq        L3205
          dq        L3206
          dq        L3207
          dq        L3208
          dq        L3209
          dq        L3210
          dq        L3211
          dq        L3212
          dq        L3213
          dq        L3214
          dq        L3215
          dq        L3216
          dq        L3217
          dq        L3218
          dq        L3219
ax_tables.setcccodes::
          db        0
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        2
          db        3
          align     8
ax_tables.setccnames::
          dq        L3220
          dq        L3221
          dq        L3222
          dq        L3223
          dq        L3224
          dq        L3225
          dq        L3226
          dq        L3227
          dq        L3228
          dq        L3229
          dq        L3230
          dq        L3231
          dq        L3232
          dq        L3233
          dq        L3234
          dq        L3235
          dq        L3236
          dq        L3237
ax_tables.jmpcccodes::
          db        0
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        2
          db        3
          align     8
ax_tables.jmpccnames::
          dq        L3238
          dq        L3239
          dq        L3240
          dq        L3241
          dq        L3242
          dq        L3243
          dq        L3244
          dq        L3245
          dq        L3246
          dq        L3247
          dq        L3248
          dq        L3249
          dq        L3250
          dq        L3251
          dq        L3252
          dq        L3253
          dq        L3254
          dq        L3255
          align     8
ax_tables.condnames::
          dq        L3256
          dq        L3257
          dq        L3258
          dq        L3259
          dq        L3260
          dq        L3261
          dq        L3262
          dq        L3263
          dq        L3264
          dq        L3265
          dq        L3266
          dq        L3267
          dq        L3268
          dq        L3269
          dq        L3270
          dq        L3271
          align     8
ax_tables.mregnames::
          dq        L3272
          dq        L3273
          dq        L3274
          dq        L3275
          dq        L3276
          dq        L3277
          dq        L3278
          dq        L3279
          align     8
ax_tables.fregnames::
          dq        L3280
          dq        L3281
          dq        L3282
          dq        L3283
          dq        L3284
          dq        L3285
          dq        L3286
          dq        L3287
          align     8
ax_tables.xregnames::
          dq        L3288
          dq        L3289
          dq        L3290
          dq        L3291
          dq        L3292
          dq        L3293
          dq        L3294
          dq        L3295
          dq        L3296
          dq        L3297
          dq        L3298
          dq        L3299
          dq        L3300
          dq        L3301
          dq        L3302
          dq        L3303
ax_tables.regindices::
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        16
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        16
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        16
          db        1
          db        2
          db        3
          db        4
          db        5
          db        6
          db        7
          db        8
          db        9
          db        10
          db        11
          db        12
          db        13
          db        14
          db        15
          db        16
          db        17
          db        18
          db        19
          db        20
          db        1
          db        5
          db        11
          db        12
          db        6
          db        4
          db        15
          db        16
          db        13
          db        14
          db        2
          db        3
          db        7
          db        8
          db        9
          db        10
          db        1
          db        5
          db        11
          db        12
          db        6
          db        4
          db        15
          db        16
          db        13
          db        14
          db        2
          db        3
          db        7
          db        8
          db        9
          db        10
          db        1
          db        5
          db        11
          db        12
          db        6
          db        4
          db        15
          db        16
          db        13
          db        14
          db        2
          db        3
          db        7
          db        8
          db        9
          db        10
          db        1
          db        5
          db        11
          db        12
          db        17
          db        18
          db        19
          db        20
          db        6
          db        4
          db        15
          db        16
          db        13
          db        14
          db        2
          db        3
          db        7
          db        8
          db        9
          db        10
ax_tables.regsizes::
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        8
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        4
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          align     8
ax_tables.dregnames::
          dq        L3304
          dq        L3305
          dq        L3306
          dq        L3307
          dq        L3308
          dq        L3309
          dq        L3310
          dq        L3311
          dq        L3312
          dq        L3313
          dq        L3314
          dq        L3315
          dq        L3316
          dq        L3317
          dq        L3318
          dq        L3319
          dq        L3320
          dq        L3321
          dq        L3322
          dq        L3323
          dq        L3324
          dq        L3325
          dq        L3326
          dq        L3327
          dq        L3328
          dq        L3329
          dq        L3330
          dq        L3331
          dq        L3332
          dq        L3333
          dq        L3334
          dq        L3335
          dq        L3336
          dq        L3337
          dq        L3338
          dq        L3339
          dq        L3340
          dq        L3341
          dq        L3342
          dq        L3343
          dq        L3344
          dq        L3345
          dq        L3346
          dq        L3347
          dq        L3348
          dq        L3349
          dq        L3350
          dq        L3351
          dq        L3352
          dq        L3353
          dq        L3354
          dq        L3355
          dq        L3356
          dq        L3357
          dq        L3358
          dq        L3359
          dq        L3360
          dq        L3361
          dq        L3362
          dq        L3363
          dq        L3364
          dq        L3365
          dq        L3366
          dq        L3367
          dq        L3368
          dq        L3369
          dq        L3370
          dq        L3371
          dq        L3372
          dq        L3373
          dq        L3374
          dq        L3375
          dq        L3376
          dq        L3377
          dq        L3378
          dq        L3379
          dq        L3380
          dq        L3381
          dq        L3382
          dq        L3383
          dq        L3384
          dq        L3385
          dq        L3386
          dq        L3387
          dq        L3388
          dq        L3389
          dq        L3390
          dq        L3391
          dq        L3392
          dq        L3393
          dq        L3394
          dq        L3395
          dq        L3396
          dq        L3397
          dq        L3398
          dq        L3399
          dq        L3400
          dq        L3401
          dq        L3402
          dq        L3403
          dq        L3404
          dq        L3405
          dq        L3406
          dq        L3407
          dq        L3408
          dq        L3409
          dq        L3410
          dq        L3411
          dq        L3412
          dq        L3413
          dq        L3414
          dq        L3415
          dq        L3416
          dq        L3417
          dq        L3418
          dq        L3419
          dq        L3420
          dq        L3421
          dq        L3422
          dq        L3423
          dq        L3424
          dq        L3425
          dq        L3426
          dq        L3427
          dq        L3428
          dq        L3429
          dq        L3430
          dq        L3431
          dq        L3432
          dq        L3433
          dq        L3434
          dq        L3435
          dq        L3436
          dq        L3437
          dq        L3438
          dq        L3439
ax_tables.regcodes::
          db        0
          db        0
          db        10
          db        11
          db        7
          db        3
          db        6
          db        12
          db        13
          db        14
          db        15
          db        1
          db        2
          db        8
          db        9
          db        5
          db        4
          db        4
          db        7
          db        5
          db        6
          align     8
ax_tables.regnames::
          dq        L3440
          dq        L3441
          dq        L3442
          dq        L3443
          dq        L3444
          dq        L3445
          dq        L3446
          dq        L3447
          dq        L3448
          dq        L3449
          dq        L3450
          dq        L3451
          dq        L3452
          dq        L3453
          dq        L3454
          dq        L3455
          dq        L3456
          dq        L3457
          dq        L3458
          dq        L3459
          dq        L3460
ax_tables.mclcodes::
          db        0
          db        0
          db        0
          db        0
          db        144
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        232
          db        195
          db        0
          db        233
          db        0
          db        0
          db        0
          db        5
          db        2
          db        3
          db        5
          db        4
          db        0
          db        0
          db        7
          db        6
          db        4
          db        1
          db        6
          db        0
          db        7
          db        4
          db        7
          db        5
          db        0
          db        1
          db        2
          db        3
          db        3
          db        2
          db        0
          db        1
          db        0
          db        0
          db        0
          db        0
          db        0
          db        188
          db        189
          db        81
          db        81
          db        88
          db        92
          db        89
          db        94
          db        88
          db        92
          db        89
          db        94
          db        0
          db        0
          db        87
          db        87
          db        84
          db        84
          db        239
          db        219
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        102
          db        243
          db        99
          db        98
          db        0
          db        2
          db        3
          db        0
          db        2
          db        3
          db        193
          db        233
          db        201
          db        249
          db        250
          db        254
          db        255
          db        251
          db        242
          db        243
          db        225
          db        224
          db        93
          db        95
          db        93
          db        95
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        1
          db        2
          db        4
          db        8
          db        215
          db        224
          db        225
          db        226
          db        227
          db        227
          db        0
          db        0
          db        0
          db        0
          db        49
          db        0
          db        0
          db        238
          db        232
          db        235
          db        233
          db        234
          db        236
          db        237
          db        244
ax_tables.mclnopnds::
          db        0
          db        0
          db        0
          db        1
          db        0
          db        1
          db        1
          db        1
          db        2
          db        1
          db        1
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        1
          db        0
          db        1
          db        1
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        1
          db        1
          db        2
          db        3
          db        1
          db        1
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        1
          db        1
          db        1
          db        1
          db        0
          db        0
          db        0
          db        0
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        2
          db        3
          db        3
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        2
          db        2
          db        2
          db        2
          db        1
          db        1
          db        1
          db        1
          db        1
          db        1
          db        0
          db        0
          db        0
          db        1
          db        1
          db        1
          db        1
          db        1
          db        0
          db        1
          db        1
          db        1
          db        1
          db        1
          db        0
          db        0
          db        0
          db        0
          db        0
          db        2
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
          align     8
ax_tables.mclnames::
          dq        L3461
          dq        L3462
          dq        L3463
          dq        L3464
          dq        L3465
          dq        L3466
          dq        L3467
          dq        L3468
          dq        L3469
          dq        L3470
          dq        L3471
          dq        L3472
          dq        L3473
          dq        L3474
          dq        L3475
          dq        L3476
          dq        L3477
          dq        L3478
          dq        L3479
          dq        L3480
          dq        L3481
          dq        L3482
          dq        L3483
          dq        L3484
          dq        L3485
          dq        L3486
          dq        L3487
          dq        L3488
          dq        L3489
          dq        L3490
          dq        L3491
          dq        L3492
          dq        L3493
          dq        L3494
          dq        L3495
          dq        L3496
          dq        L3497
          dq        L3498
          dq        L3499
          dq        L3500
          dq        L3501
          dq        L3502
          dq        L3503
          dq        L3504
          dq        L3505
          dq        L3506
          dq        L3507
          dq        L3508
          dq        L3509
          dq        L3510
          dq        L3511
          dq        L3512
          dq        L3513
          dq        L3514
          dq        L3515
          dq        L3516
          dq        L3517
          dq        L3518
          dq        L3519
          dq        L3520
          dq        L3521
          dq        L3522
          dq        L3523
          dq        L3524
          dq        L3525
          dq        L3526
          dq        L3527
          dq        L3528
          dq        L3529
          dq        L3530
          dq        L3531
          dq        L3532
          dq        L3533
          dq        L3534
          dq        L3535
          dq        L3536
          dq        L3537
          dq        L3538
          dq        L3539
          dq        L3540
          dq        L3541
          dq        L3542
          dq        L3543
          dq        L3544
          dq        L3545
          dq        L3546
          dq        L3547
          dq        L3548
          dq        L3549
          dq        L3550
          dq        L3551
          dq        L3552
          dq        L3553
          dq        L3554
          dq        L3555
          dq        L3556
          dq        L3557
          dq        L3558
          dq        L3559
          dq        L3560
          dq        L3561
          dq        L3562
          dq        L3563
          dq        L3564
          dq        L3565
          dq        L3566
          dq        L3567
          dq        L3568
          dq        L3569
          dq        L3570
          dq        L3571
          dq        L3572
          dq        L3573
          dq        L3574
          dq        L3575
          dq        L3576
          dq        L3577
          dq        L3578
          dq        L3579
          dq        L3580
          dq        L3581
          dq        L3582
          dq        L3583
          dq        L3584
          dq        L3585
          dq        L3586
          dq        L3587
          dq        L3588
          dq        L3589
          dq        L3590
          dq        L3591
          dq        L3592
          dq        L3593
          dq        L3594
          dq        L3595
          dq        L3596
          dq        L3597
          dq        L3598
          dq        L3599
          dq        L3600
          dq        L3601
          dq        L3602
          dq        L3603
          dq        L3604
          align     8
ax_tables.symbolnames::
          dq        L3605
          dq        L3606
          dq        L3607
          dq        L3608
          dq        L3609
          dq        L3610
          dq        L3611
          dq        L3612
          dq        L3613
          dq        L3614
          dq        L3615
          dq        L3616
          dq        L3617
          dq        L3618
          dq        L3619
          dq        L3620
          dq        L3621
          dq        L3622
          dq        L3623
          dq        L3624
          dq        L3625
          dq        L3626
          dq        L3627
          dq        L3628
          dq        L3629
          dq        L3630
          dq        L3631
          dq        L3632
          dq        L3633
          dq        L3634
          dq        L3635
          dq        L3636
          dq        L3637
          zsegment  
          align     8
oswindows.os_peek.lastticks:
          resb      8
          align     8
oswindows.os_gethostname.n:
          resb      8
oswindows.os_gethostname.name:
          resb      300
          isegment  
          align     8
oswindows.mainwndproc.count:
          dq        0
          zsegment  
oswindows.os_gxregisterclass.registered:
          resb      1
          isegment  
          align     8
oswindows.init_flag:
          dq        0
          align     8
oswindows.wndproc_callbackfn:
          dq        0
          zsegment  
          align     8
oswindows.keypending:
          resb      8
          align     16
oswindows.pendkey:
          resb      20
          align     16
oswindows.lastkey:
          resb      20
          align     8
oswindows.hconsolein:
          resb      8
          align     8
oswindows.hconsole:
          resb      8
mlib.chr.str:
          resb      8
mlib.padstr.str:
          resb      256
mlib.readnextfileitem.str:
          resb      256
mlib.nextcmdparam.str:
          resb      300
          isegment  
mlib.nextcmdparam.colonseen:
          db        0
          align     8
mlib.nextcmdparam.fileptr:
          dq        0
          align     8
mlib.nextcmdparam.filestart:
          dq        0
          align     8
mlib.nextcmdparam.infile:
          dq        0
          zsegment  
mlib.extractbasefile.str:
          resb      100
mlib.extractpath.str:
          resb      260
mlib.changeext.newfile:
          resb      260
          isegment  
          align     4
mlib.pcm_round.allocbytes:
          dd        0
          dd        16
          dd        32
          dd        64
          dd        128
          dd        256
          dd        512
          dd        1024
          dd        2048
          zsegment  
          align     8
mlib.pcm_newblock.totalheapsize:
          resb      8
          isegment  
          align     8
mlib.seed:
          dq        2993073034246558322
          dq        1617678968452121188
          align     8
mlib.pmnames::
          dq        L3638
          dq        L3639
          dq        L3640
          dq        L3641
          dq        L3642
          dq        L3643
          zsegment  
          align     8
mlib.freelist::
          resb      72
mlib.sizeindextable:
          resb      2049
          align     8
mlib.pcheapptr:
          resb      8
          align     8
mlib.pcheapend:
          resb      8
          align     8
mlib.pcheapstart:
          resb      8
          align     4
mlib.memallocsize:
          resb      2000004
          align     8
mlib.memalloctable:
          resb      4000008
          isegment  
          align     8
mlib.maxmemtotal::
          dq        0
          align     8
mlib.smallmemobjs::
          dq        0
          align     8
mlib.smallmemtotal::
          dq        0
          align     8
mlib.memtotal::
          dq        0
          align     8
mlib.show:
          dq        0
mlib.pcm_setup:
          db        0
          zsegment  
          align     8
mlib.maxalloccode:
          resb      8
          align     8
mlib.maxmemory:
          resb      8
          align     8
mlib.rfsize::
          resb      8
          isegment  
          align     8
mlib.fdebug::
          dq        0
          zsegment  
          align     8
mlib.allocbytes::
          resb      8
          align     8
mlib.alloccode::
          resb      8
          align     8
mlib.allocupper::
          resb      2408
          align     8
mlib.mdebug::
          resb      8
msysnew.strreal.str:
          resb      320
msysnew.strword.str:
          resb      100
msysnew.strint.str:
          resb      100
          align     16
msysnew.getfmt.fmt:
          resb      16
          isegment  
          align     8
msysnew.i64tostrfmt.mindint:
          dq        -9223372036854775808
          zsegment  
          align     8
msysnew.m$callff_14.p14:
          resb      8
          align     8
msysnew.m$callff_14.p13:
          resb      8
msysnew.m$init.startupinfo:
          resb      128
          isegment  
          align     8
msysnew.offset32:
          dq        9223372036854775800.000000
          align     8
msysnew.offset64:
          dq        9223372036854775800.000000
          align     8
msysnew.mask63:
          dq        9223372036854775807
          align     8
msysnew.ncallbacks:
          dq        0
          zsegment  
          align     8
msysnew.callbackstack:
          resb      576
          align     8
msysnew.sysparams::
          resb      1024
          align     8
msysnew.nsysparams::
          resb      8
          align     8
msysnew.itemerror:
          resb      8
          align     8
msysnew.termchar:
          resb      8
          align     8
msysnew.rd_lastpos:
          resb      8
          align     8
msysnew.rd_pos:
          resb      8
          align     8
msysnew.rd_length:
          resb      8
          align     8
msysnew.rd_buffer:
          resb      8
          isegment  
          align     16
msysnew.defaultfmt:
          db        0
          db        0
          db        10
          db        0
          db        32
          db        102
          db        0
          db        0
          db        0
          db        82
          db        0
          db        0
          db        0
          db        0
          db        0
          db        0
msysnew.digits:
          db        48
          db        49
          db        50
          db        51
          db        52
          db        53
          db        54
          db        55
          db        56
          db        57
          db        65
          db        66
          db        67
          db        68
          db        69
          db        70
          align     8
msysnew.niostack:
          dq        0
          zsegment  
          align     8
msysnew.ptr_stack:
          resb      80
msysnew.needgap_stack:
          resb      10
          align     8
msysnew.fmtstr_stack:
          resb      80
          align     8
msysnew.outdev_stack:
          resb      80
          align     8
msysnew.outchan_stack:
          resb      80
          isegment  
          align     8
msysnew.fmtstr:
          dq        0
          align     8
msysnew.outchan:
          dq        0
          align     8
msysnew.outdev:
          dq        1
          align     8
msysnew.needgap::
          dq        0
          zsegment  
          align     8
msysnew.fmtparam:
          resb      8
          csegment  
;proc ---------------- m$initstatics
L1:
;INIT CODE GOES HERE
;-------------------------------------------------
          ret       
;PROC RESETHASHTABLE ============================================================
ax.resethashtable:
L3644:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[ax_decls.modulenamelist]
          mov       [Dframe+-8],	D0
          jmp       L4
L3:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax.getemptyst
          lea       D1,	[ax_decls.lexhashtable]
          mov       D2,	[Dframe+-8]
          movzx     D2,	word32 [D2+72]
          mov       [D1+D2*8],	D0
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+52]
          mov       [Dframe+-8],	D0
L4:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L3
L5:
          mov       D0,	0
          mov       [ax_decls.modulenamelist],	D0
L2:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC SCANGLOBALS ============================================================
ax.scanglobals:
L3645:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[ax_decls.modulenamelist]
          mov       [Dframe+-8],	D0
          jmp       L8
L7:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+36]
          mov       D1,	21
          cmp       D0,	D1
          jz        L11
          mov       D1,	22
          cmp       D0,	D1
          jz        L12
          jmp       L13
L11:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax.findduplname
          mov       [Dframe+-16],	D0
          cmp       D0,	0
          jz        L14
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0+36]
          mov       D1,	21
          cmp       D0,	D1
          jz        L16
          mov       D1,	22
          cmp       D0,	D1
          jz        L17
          jmp       L18
L16:
          jmp       L15
L17:
          mov       D0,	22
          mov       D1,	[Dframe+-8]
          mov       [D1+36],	B0
          mov       D0,	1
          mov       D1,	[Dframe+-16]
          mov       [D1+41],	B0
          movzx     D0,	B0
          mov       D1,	[Dframe+-8]
          mov       [D1+41],	B0
          jmp       L15
L18:
L15:
          jmp       L19
L14:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_lib.addimport
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax.adddupl
L19:
          jmp       L10
L12:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax.findduplname
          mov       [Dframe+-16],	D0
          cmp       D0,	0
          jz        L20
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0+36]
          mov       D1,	21
          cmp       D0,	D1
          jz        L22
          mov       D1,	22
          cmp       D0,	D1
          jz        L23
          jmp       L24
L22:
          mov       D0,	22
          mov       D1,	[Dframe+-16]
          mov       [D1+36],	B0
          mov       D0,	1
          mov       D1,	[Dframe+-16]
          mov       [D1+41],	B0
          movzx     D0,	B0
          mov       D1,	[Dframe+-8]
          mov       [D1+41],	B0
          jmp       L21
L23:
          call      [L3646]	!print_startcon
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[Dframe+-8]
          movsx     D2,	word32 [D2+68]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          movzx     D1,	word32 [D1+72]
          movzx     D1,	A1
          push      D0
          push      D1
          call      [L3648]	!print_u64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[Dframe+-16]
          movsx     D2,	word32 [D2+68]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          movzx     D1,	word32 [D1+72]
          movzx     D1,	A1
          push      D0
          push      D1
          call      [L3648]	!print_u64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       D1,	L3651
          push      D0
          push      D1
          call      ax_lib.serror_s
          jmp       L21
L24:
L21:
          jmp       L25
L20:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_lib.addimport
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax.adddupl
L25:
          jmp       L10
L13:
L10:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+52]
          mov       [Dframe+-8],	D0
L8:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L7
L9:
L6:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC ADDDUPL ============================================================
ax.adddupl:
L3652:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	word32 [D0+76]
          mov       D0,	[D0*8+ax_decls.dupltable]
          mov       D1,	[Dframe+16]
          mov       [D1+60],	D0
          mov       D0,	[Dframe+16]
          lea       D1,	[ax_decls.dupltable]
          mov       D2,	[Dframe+16]
          movzx     D2,	word32 [D2+76]
          mov       [D1+D2*8],	D0
L26:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC FINDDUPLNAME ============================================================
ax.findduplname:
L3653:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+44]
          cmp       D0,	0
          jz        L28
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+44]
          add       Dstack,	8
          pop       Dframe
          retn      8
L28:
          mov       D0,	[Dframe+16]
          movzx     D0,	word32 [D0+76]
          mov       D0,	[D0*8+ax_decls.dupltable]
          mov       [Dframe+-8],	D0
          jmp       L30
L29:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+43]
          mov       D1,	[Dframe+-8]
          movzx     D1,	byte [D1+43]
          cmp       D0,	D1
          jnz       L32
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+43]
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1]
          mov       D2,	[Dframe+16]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcmp*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L32
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          mov       [D1+44],	D0
          mov       D0,	[Dframe+-8]
          add       Dstack,	8
          pop       Dframe
          retn      8
L32:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+60]
          mov       [Dframe+-8],	D0
L30:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L29
L31:
          mov       D0,	0
L27:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GETEMPTYST ============================================================
ax.getemptyst:
L3655:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+37]
          cmp       D0,	0
          jz        L34
          mov       D0,	128
          push      D0
          call      mlib.pcm_allocz
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+43]
          mov       D1,	[Dframe+-8]
          mov       [D1+43],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+37]
          mov       D1,	[Dframe+-8]
          mov       [D1+37],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+38]
          mov       D1,	[Dframe+-8]
          mov       [D1+38],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+39]
          mov       D1,	[Dframe+-8]
          mov       [D1+39],	B0
          mov       D0,	[Dframe+-8]
          add       Dstack,	8
          pop       Dframe
          retn      8
L34:
          mov       D0,	0
L33:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC SHOWMODULES ============================================================
ax.showmodules:
L3656:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3657
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.nmodules]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L36:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.nmodules]
          cmp       D0,	1
          jl        L39
L37:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3659
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L3661
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3662
          mov       D2,	13
          lea       D3,	[ax_decls.moduletable]
          mov       D4,	[Dframe+-8]
          imul2     D4,	24
          lea       D3,	[D3+D4-24]
          mov       D3,	[D3+8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3662
          mov       D2,	25
          lea       D3,	[ax_decls.moduletable]
          mov       D4,	[Dframe+-8]
          imul2     D4,	24
          lea       D3,	[D3+D4-24]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[Dframe+-8]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+16]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          push      D0
          call      [L3648]	!print_u64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L38:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.nmodules]
          cmp       D0,	D1
          jle       L37
L39:
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3663
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.nsearchlibs]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L40:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.nsearchlibs]
          cmp       D0,	1
          jl        L43
L41:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3664
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L3665
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1*8+ax_decls.searchlibs-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L42:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.nsearchlibs]
          cmp       D0,	D1
          jle       L41
L43:
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L35:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC ADDSEARCHLIB ============================================================
ax.addsearchlib:
L3666:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	304
;-------------------------------------------------
          mov       D0,	[ax_decls.nsearchlibs]
          mov       D1,	30
          cmp       D0,	D1
          jl        L45
          mov       D0,	L3667
          push      D0
          call      ax.loaderror
L45:
          inc       word64 [ax_decls.nsearchlibs]
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-304]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[Dframe+-304]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	3
          sub       D0,	D1
          pop       D1
          pop       D2
          mov       [D1+D0-1],	B2
          lea       D0,	[Dframe+-304]
          push      D0
          call      mlib.pcm_copyheapstring
          lea       D1,	[ax_decls.searchlibs]
          mov       D2,	[ax_decls.nsearchlibs]
          mov       [D1+D2*8-8],	D0
L44:
;-------------------------------------------------
          add       Dstack,	304
          pop       Dframe
          retn      8
;PROC ADDMODULE ============================================================
ax.addmodule:
L3668:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_decls.nmodules]
          mov       D1,	200
          cmp       D0,	D1
          jl        L47
          mov       D0,	L3669
          push      D0
          call      ax.loaderror
L47:
          inc       word64 [ax_decls.nmodules]
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.pcm_copyheapstring
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[ax_decls.nmodules]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       [D1],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.extractfile
          push      D0
          call      mlib.pcm_copyheapstring
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[ax_decls.nmodules]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       [D1+8],	D0
          mov       D0,	L3670
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[ax_decls.nmodules]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       [D1+16],	D0
L46:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC LOADERROR_S ============================================================
ax.loaderror_s:
L3671:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	256
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          lea       D2,	[Dframe+-256]
          push      D0
          push      D1
          push      D2
          mov       D0,	`sprintf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-256]
          push      D0
          call      ax.loaderror
L48:
;-------------------------------------------------
          add       Dstack,	256
          pop       Dframe
          retn      16
;PROC LOADERROR ============================================================
ax.loaderror:
L3672:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3673
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L49:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC SHOWCAPTION ============================================================
ax.showcaption:
L3675:
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3676
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3677
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
L50:
;-------------------------------------------------
          ret       
;PROC SHOWHELP ============================================================
ax.showhelp:
L3678:
;-------------------------------------------------
          call      ax.showcaption
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3679
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L51:
;-------------------------------------------------
          ret       
;PROC DO_OPTION ============================================================
ax.do_option:
L3680:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L54
          mov       D1,	2
          cmp       D0,	D1
          jz        L54
          mov       D1,	3
          cmp       D0,	D1
          jz        L54
          mov       D1,	4
          cmp       D0,	D1
          jz        L54
          mov       D1,	5
          cmp       D0,	D1
          jz        L54
          mov       D1,	6
          cmp       D0,	D1
          jz        L55
          mov       D1,	7
          cmp       D0,	D1
          jz        L56
          mov       D1,	8
          cmp       D0,	D1
          jz        L57
          mov       D1,	9
          cmp       D0,	D1
          jz        L58
          mov       D1,	10
          cmp       D0,	D1
          jz        L59
          mov       D1,	11
          cmp       D0,	D1
          jz        L60
          mov       D1,	12
          cmp       D0,	D1
          jz        L61
          mov       D1,	13
          cmp       D0,	D1
          jz        L62
          mov       D1,	14
          cmp       D0,	D1
          jz        L63
          mov       D1,	15
          cmp       D0,	D1
          jz        L64
          mov       D1,	16
          cmp       D0,	D1
          jz        L65
          mov       D1,	17
          cmp       D0,	D1
          jz        L66
          jmp       L67
L54:
          mov       D0,	[Dframe+16]
          mov       [ax.axlevel],	D0
          jmp       L53
L55:
          mov       D0,	1
          mov       [ax.fshowmcl],	B0
          jmp       L53
L56:
          mov       D0,	1
          mov       [ax.fshowss],	B0
          jmp       L53
L57:
          mov       D0,	1
          mov       [ax.fshowsx],	B0
          jmp       L53
L58:
          mov       D0,	1
          mov       [ax.fshowtiming],	B0
          jmp       L53
L59:
          mov       D0,	1
          mov       [ax.logdest],	D0
          jmp       L53
L60:
          mov       D0,	2
          mov       [ax.logdest],	D0
          jmp       L53
L61:
          mov       D0,	1
          mov       [ax_decls.fverbose],	D0
          jmp       L53
L62:
          mov       D0,	1
          mov       [ax_decls.fquiet],	D0
          jmp       L53
L63:
          call      ax.showhelp
          jmp       L53
L64:
          mov       D0,	[Dframe+24]
          push      D0
          call      mlib.pcm_copyheapstring
          mov       [ax.outputfile],	D0
          jmp       L53
L65:
          jmp       L53
L66:
          jmp       L53
L67:
L53:
L52:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GETINPUTOPTIONS ============================================================
ax.getinputoptions:
L3681:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	80
;-------------------------------------------------
          mov       D0,	2
          mov       [Dframe+-32],	D0
          jmp       L70
L69:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          cmp       D0,	D1
          jz        L73
          mov       D1,	2
          cmp       D0,	D1
          jz        L74
          mov       D1,	3
          cmp       D0,	D1
          jz        L75
          jmp       L76
L73:
          mov       D0,	[Dframe+-56]
          push      D0
          call      mlib.convlcstring
L77:
          mov       D0,	1
          mov       [Dframe+-48],	D0
          mov       D0,	17
          mov       [Dframe+-80],	D0
L78:
          mov       D0,	[Dframe+-48]
          mov       D0,	[D0*8+ax.optionnames-8]
          mov       D1,	[Dframe+-56]
          push      D0
          push      D1
          call      mlib.eqstring
          cmp       D0,	0
          jz        L82
          mov       D0,	[Dframe+-64]
          push      D0
          push      word64 [Dframe+-48]
          call      ax.do_option
          jmp       L80
L82:
L79:
          mov       D0,	[Dframe+-48]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-48],	D0
          mov       D1,	[Dframe+-80]
          cmp       D0,	D1
          jle       L78
L81:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3682
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-56]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L80:
          jmp       L72
L74:
          mov       D0,	[Dframe+-56]
          push      D0
          call      ax.addmodule
          jmp       L72
L75:
          mov       D0,	[Dframe+-56]
          push      D0
          call      ax.addsearchlib
          jmp       L72
L76:
L72:
L70:
          mov       D0,	L3683
          lea       D1,	[Dframe+-64]
          lea       D2,	[Dframe+-56]
          lea       D3,	[Dframe+-32]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.nextcmdparam
          mov       [Dframe+-40],	D0
          cmp       D0,	0
          jnz       L69
L71:
          mov       D0,	[ax_decls.nmodules]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L83
          mov       D0,	[ax_decls.nsearchlibs]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L83
          call      ax.showcaption
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3684
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3685
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	1
          mov       D1,	[D1*8+msysnew.sysparams-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3686
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3687
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	1
          mov       D1,	[D1*8+msysnew.sysparams-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3688
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L83:
          mov       B0,	[ax.fshowss]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L85
          mov       B0,	[ax.fshowsx]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L85
          mov       B0,	[ax.fshowmcl]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L84
L85:
          mov       D0,	[ax.logdest]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L86
          mov       D0,	2
          mov       [ax.logdest],	D0
L86:
L84:
          mov       D0,	[ax_decls.nsearchlibs]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L87
          mov       D0,	L3689
          lea       D1,	[ax_decls.searchlibs]
          mov       D2,	1
          mov       [D1+D2*8-8],	D0
          mov       D0,	L3690
          lea       D1,	[ax_decls.searchlibs]
          mov       D2,	2
          mov       [D1+D2*8-8],	D0
          mov       D0,	L3691
          lea       D1,	[ax_decls.searchlibs]
          mov       D2,	3
          mov       [D1+D2*8-8],	D0
          mov       D0,	L3692
          lea       D1,	[ax_decls.searchlibs]
          mov       D2,	4
          mov       [D1+D2*8-8],	D0
          mov       D0,	4
          mov       [ax_decls.nsearchlibs],	D0
L87:
          mov       D0,	[ax_decls.nmodules]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L88
          mov       D0,	L3693
          push      D0
          call      ax.loaderror
L88:
L68:
;-------------------------------------------------
          add       Dstack,	80
          pop       Dframe
          ret       
;PROC LEXTEST ============================================================
ax.lextest:
L3694:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      ax.loadsourcefiles
          lea       D0,	[ax_decls.moduletable]
          mov       D1,	1
          imul2     D1,	24
          lea       D0,	[D0+D1-24]
          mov       D0,	[D0+16]
          push      D0
          call      ax_lex.initsourcefile
          mov       D0,	11
          mov       [ax_lex.lxsymbol],	D0
          jmp       L91
L90:
          call      ax_lex.lex
L91:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	12
          cmp       D0,	D1
          jnz       L90
L92:
L89:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC INITALL ============================================================
ax.initall:
L3695:
;-------------------------------------------------
          call      mlib.pcm_init
          call      ax_lex.initlex
          call      ax_lib.initlib
L93:
;-------------------------------------------------
          ret       
;PROC CLOSELOGFILE ============================================================
ax.closelogfile:
L3696:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	512
;-------------------------------------------------
          mov       D0,	[ax.logdest]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L95
          mov       D0,	[ax_decls.logdev]
          push      D0
          mov       D0,	`fclose*
          pop       D10
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-512]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	0
          mov       D1,	L3698
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3699
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          mov       D0,	0
          mov       D1,	1
          lea       D2,	[Dframe+-512]
          push      D0
          push      D1
          push      D2
          call      oswindows.os_execwait
L95:
L94:
;-------------------------------------------------
          add       Dstack,	512
          pop       Dframe
          ret       
;PROC INITLOGFILE ============================================================
ax.initlogfile:
L3700:
;-------------------------------------------------
          mov       D0,	[ax.logdest]
          mov       D1,	2
          cmp       D0,	D1
          jz        L98
          mov       D1,	0
          cmp       D0,	D1
          jz        L99
          mov       D1,	1
          cmp       D0,	D1
          jz        L99
          jmp       L100
L98:
          mov       D0,	L3699
          push      D0
          mov       D0,	`remove*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	L3701
          mov       D1,	L3702
          push      D0
          push      D1
          mov       D0,	`fopen*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [ax_decls.logdev],	D0
          jmp       L97
L99:
          mov       D0,	0
          mov       [ax_decls.logdev],	D0
          jmp       L97
L100:
L97:
L96:
;-------------------------------------------------
          ret       
;PROC FIXOPND ============================================================
ax.fixopnd:
L3703:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L102
          add       Dstack,	8
          pop       Dframe
          retn      8
L102:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L103
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          mov       D0,	[D0+44]
          cmp       D0,	0
          jz        L104
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+44]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
L104:
L103:
L101:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC PARSEMODULES ============================================================
ax.parsemodules:
L3704:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
L106:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.nmodules]
          cmp       D0,	1
          jl        L109
L107:
          mov       D0,	[Dframe+-8]
          mov       [ax_decls.currmoduleno],	D0
          mov       D0,	0
          mov       [ax_decls.modulenamelist],	D0
          push      word64 [Dframe+-8]
          call      ax_parse.readmodule
          call      ax_parse.checkundefined
          mov       D0,	[ax_decls.nundefined]
          cmp       D0,	0
          jz        L110
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3705
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      oswindows.os_getch
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L110:
          call      ax.scanglobals
          mov       B0,	[ax.fshowsx]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L111
L111:
          mov       D0,	[Dframe+-8]
          mov       D1,	[ax_decls.nmodules]
          cmp       D0,	D1
          jz        L112
          call      ax.resethashtable
L112:
L108:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.nmodules]
          cmp       D0,	D1
          jle       L107
L109:
          mov       B0,	[ax.fshowsx]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L113
L113:
          mov       D0,	[ax_lib.mccode]
          mov       [Dframe+-24],	D0
          jmp       L115
L114:
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0+8]
          push      D0
          call      ax.fixopnd
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0+16]
          push      D0
          call      ax.fixopnd
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0]
          mov       [Dframe+-24],	D0
L115:
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jnz       L114
L116:
L105:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          ret       
;PROC LOADSOURCEFILES ============================================================
ax.loadsourcefiles:
L3706:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
L118:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.nmodules]
          cmp       D0,	1
          jl        L121
L119:
          lea       D0,	[ax_decls.moduletable]
          mov       D1,	[Dframe+-8]
          imul2     D1,	24
          lea       D0,	[D0+D1-24]
          mov       D0,	[D0]
          push      D0
          call      mlib.readfile
          mov       [Dframe+-16],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L122
          lea       D0,	[ax_decls.moduletable]
          mov       D1,	[Dframe+-8]
          imul2     D1,	24
          lea       D0,	[D0+D1-24]
          mov       D0,	[D0]
          mov       D1,	L3707
          push      D0
          push      D1
          call      ax.loaderror_s
L122:
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[Dframe+-8]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       [D1+16],	D0
L120:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.nmodules]
          cmp       D0,	D1
          jle       L119
L121:
L117:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC START ============================================================
start::
ax.start::
L3708::
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
          call      [L3709]	!init
          call      L1
;-------------------------------------------------
          mov       D0,	`clock*
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-24],	D0
          call      ax.initall
          call      ax.getinputoptions
          lea       D0,	[ax_decls.moduletable]
          mov       D1,	1
          imul2     D1,	24
          lea       D0,	[D0+D1-24]
          mov       D0,	[D0]
          mov       [ax.inputfile],	D0
          call      ax.initlogfile
          mov       D0,	[ax.axlevel]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L124
          mov       D0,	[ax_decls.nmodules]
          mov       D1,	1
          cmp       D0,	D1
          jle       L125
          mov       D0,	L3710
          push      D0
          call      ax.loaderror
L125:
          mov       D0,	[ax.inputfile]
          push      D0
          call      ax.lextest
          jmp       L126
L124:
          mov       D0,	[ax.outputfile]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L127
          mov       D0,	[ax.axlevel]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L128
          mov       D0,	L3711
          jmp       L129
L128:
          mov       D0,	L3712
L129:
          mov       D1,	[ax.inputfile]
          push      D0
          push      D1
          call      mlib.changeext
          push      D0
          call      mlib.pcm_copyheapstring
          mov       [ax.outputfile],	D0
L127:
          mov       D0,	[ax_decls.fquiet]
          cmp       D0,	0
          jnz       L130
          mov       D0,	[ax.axlevel]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L131
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3713
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax.inputfile]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L3714
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax.outputfile]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          jmp       L132
L131:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3715
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax.outputfile]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L132:
L130:
          mov       D0,	[ax_decls.fverbose]
          cmp       D0,	0
          jz        L133
          call      ax.showcaption
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L133:
          call      ax.loadsourcefiles
          call      ax.parsemodules
          mov       D0,	[ax.axlevel]
          mov       D1,	4
          cmp       D0,	D1
          jz        L135
          mov       D1,	5
          cmp       D0,	D1
          jz        L136
          jmp       L137
L135:
          call      ax_genss.genss
          mov       B0,	[ax.fshowss]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L139
          mov       B0,	[ax.fshowsx]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L138
L139:
          call      ax_writeexe.initsectiontable
          mov       D0,	0
          push      D0
          call      ax_writeexe.writessdata
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.logdev]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.gs_println
L138:
          mov       D0,	[ax.outputfile]
          push      D0
          call      ax_writeobj.writess
          jmp       L134
L136:
          call      ax_genss.genss
          call      ax_writeexe.initsectiontable
          mov       B0,	[ax.fshowss]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L140
          mov       D0,	0
          push      D0
          call      ax_writeexe.writessdata
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.logdev]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.gs_println
L140:
          mov       D0,	0
          push      D0
          call      ax_writeexe.genexe
          mov       B0,	[ax.fshowsx]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L141
          mov       D0,	1
          push      D0
          call      ax_writeexe.writessdata
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.logdev]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.gs_println
L141:
          mov       D0,	[ax.outputfile]
          push      D0
          call      ax_writeexe.writeexe
          jmp       L134
L137:
L134:
          mov       B0,	[ax.fshowmcl]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L142
          call      ax_lib.writemclblock
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.logdev]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.gs_println
L142:
L126:
          mov       B0,	[ax.fshowtiming]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L143
          mov       D0,	`clock*
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+-24]
          sub       D0,	D1
          mov       [Dframe+-24],	D0
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3716
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L143:
          call      ax.closelogfile
          mov       D0,	0
          push      D0
          call      [L3674]	!stop
L123:
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      [L3674]	!stop
;PROC WRITECOFF ============================================================
ax_writeobj.writecoff:
L3717:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	160
;-------------------------------------------------
          mov       D0,	20
          mov       D1,	0
          lea       D2,	[Dframe+-24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	40
          mov       D1,	0
          lea       D2,	[Dframe+-64]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	40
          mov       D1,	0
          lea       D2,	[Dframe+-104]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	40
          mov       D1,	0
          lea       D2,	[Dframe+-144]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	34404
          lea       D1,	[Dframe+-24]
          mov       [D1],	W0
          mov       D0,	3
          lea       D1,	[Dframe+-24]
          mov       [D1+2],	W0
          mov       D0,	L3718
          lea       D1,	[Dframe+-64]
          lea       D1,	[D1]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[ax_decls.ss_zdatalen]
          lea       D1,	[Dframe+-64]
          mov       [D1+16],	A0
          mov       D0,	3225419904
          lea       D1,	[Dframe+-64]
          mov       [D1+36],	A0
          mov       D0,	[ax_decls.ss_nidatarelocs]
          mov       D1,	65536
          cmp       D0,	D1
          jge       L146
          mov       D0,	[ax_decls.ss_ncoderelocs]
          mov       D1,	65536
          cmp       D0,	D1
          jl        L145
L146:
          mov       D0,	L3719
          push      D0
          call      ax_lib.gerror
L145:
          mov       D0,	L3720
          lea       D1,	[Dframe+-104]
          lea       D1,	[D1]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[ax_decls.ss_idata]
          push      D0
          call      ax_lib.bufferlength
          lea       D1,	[Dframe+-104]
          mov       [D1+16],	A0
          mov       D0,	[ax_decls.ss_nidatarelocs]
          lea       D1,	[Dframe+-104]
          mov       [D1+32],	W0
          mov       D0,	3226468416
          lea       D1,	[Dframe+-104]
          mov       [D1+36],	A0
          mov       D0,	L3721
          lea       D1,	[Dframe+-144]
          lea       D1,	[D1]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[ax_decls.ss_code]
          push      D0
          call      ax_lib.bufferlength
          lea       D1,	[Dframe+-144]
          mov       [D1+16],	A0
          mov       D0,	[ax_decls.ss_ncoderelocs]
          lea       D1,	[Dframe+-144]
          mov       [D1+32],	W0
          mov       D0,	1615855648
          lea       D1,	[Dframe+-144]
          mov       [D1+36],	A0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_writeobj.initsymboltable
          call      ax_writeobj.convertsymboltable
          mov       D0,	20
          mov       [Dframe+-152],	D0
          mov       D0,	120
          add       [Dframe+-152],	D0
          lea       D0,	[Dframe+-104]
          movzx     D0,	word16 [D0+32]
          cmp       D0,	0
          jz        L147
          mov       D0,	[Dframe+-152]
          lea       D1,	[Dframe+-104]
          mov       [D1+24],	A0
          lea       D0,	[Dframe+-104]
          movzx     D0,	word16 [D0+32]
          mov       D1,	10
          imul2     D0,	D1
          add       [Dframe+-152],	D0
L147:
          lea       D0,	[Dframe+-144]
          movzx     D0,	word16 [D0+32]
          cmp       D0,	0
          jz        L148
          mov       D0,	[Dframe+-152]
          lea       D1,	[Dframe+-144]
          mov       [D1+24],	A0
          lea       D0,	[Dframe+-144]
          movzx     D0,	word16 [D0+32]
          mov       D1,	10
          imul2     D0,	D1
          add       [Dframe+-152],	D0
L148:
          mov       D0,	[Dframe+-152]
          lea       D1,	[Dframe+-104]
          mov       [D1+20],	A0
          lea       D0,	[Dframe+-104]
          movzx     D0,	word32 [D0+16]
          add       [Dframe+-152],	D0
          mov       D0,	[Dframe+-152]
          lea       D1,	[Dframe+-144]
          mov       [D1+20],	A0
          lea       D0,	[Dframe+-144]
          movzx     D0,	word32 [D0+16]
          add       [Dframe+-152],	D0
          mov       D0,	[Dframe+-152]
          lea       D1,	[Dframe+-24]
          mov       [D1+8],	A0
          mov       D0,	[ax_writeobj.nsymbols]
          mov       D1,	18
          imul2     D0,	D1
          add       [Dframe+-152],	D0
          mov       D0,	[ax_writeobj.nsymbols]
          lea       D1,	[Dframe+-24]
          mov       [D1+12],	A0
          mov       D0,	[ax_writeobj.nextstringoffset]
          add       [Dframe+-152],	D0
          mov       D0,	[Dframe+-152]
          push      D0
          mov       D0,	`malloc*
          pop       D10
          call      [L3654]	!callff_4
          mov       [ax_writeobj.dataptr],	D0
          mov       [ax_writeobj.datastart],	D0
          mov       D0,	20
          lea       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      ax_writeobj.writerecord
          mov       D0,	40
          lea       D1,	[Dframe+-64]
          push      D0
          push      D1
          call      ax_writeobj.writerecord
          mov       D0,	40
          lea       D1,	[Dframe+-104]
          push      D0
          push      D1
          call      ax_writeobj.writerecord
          mov       D0,	40
          lea       D1,	[Dframe+-144]
          push      D0
          push      D1
          call      ax_writeobj.writerecord
          push      word64 [ax_decls.ss_nidatarelocs]
          mov       D0,	[ax_decls.ss_idatarelocs]
          push      D0
          call      ax_writeobj.writerelocs
          push      word64 [ax_decls.ss_ncoderelocs]
          mov       D0,	[ax_decls.ss_coderelocs]
          push      D0
          call      ax_writeobj.writerelocs
          mov       D0,	[ax_decls.ss_idata]
          push      D0
          call      ax_writeobj.writedata
          mov       D0,	[ax_decls.ss_code]
          push      D0
          call      ax_writeobj.writedata
          call      ax_writeobj.writesymboltable
          call      ax_writeobj.writestringtable
          mov       D0,	[ax_decls.fverbose]
          cmp       D0,	0
          jz        L149
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3722
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L149:
          mov       D0,	[ax_writeobj.dataptr]
          mov       D1,	[ax_writeobj.datastart]
          sub       D0,	D1
          mov       D1,	[ax_writeobj.datastart]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.writefile
L144:
;-------------------------------------------------
          add       Dstack,	160
          pop       Dframe
          retn      8
;PROC CONVERTSYMBOLTABLE ============================================================
ax_writeobj.convertsymboltable:
L3723:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	[ax_writeobj.nsymbols]
          mov       D1,	1
          sub       D0,	D1
          mov       [ax_writeobj.stoffset],	D0
          mov       D0,	0
          mov       [ax_writeobj.nstrings],	D0
          mov       D0,	4
          mov       [ax_writeobj.nextstringoffset],	D0
L151:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_decls.ss_nsymbols]
          cmp       D0,	1
          jl        L154
L152:
          mov       D0,	[ax_decls.ss_symboltable]
          mov       D1,	[Dframe+-24]
          mov       D0,	[D0+D1*8-8]
          mov       [Dframe+-8],	D0
          mov       D0,	[D0]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+42]
          mov       D1,	3
          cmp       D0,	D1
          jz        L156
          mov       D1,	2
          cmp       D0,	D1
          jz        L157
          mov       D1,	1
          cmp       D0,	D1
          jz        L158
          jmp       L159
L156:
          mov       D0,	1
          mov       [Dframe+-32],	D0
          jmp       L155
L157:
          mov       D0,	2
          mov       [Dframe+-32],	D0
          jmp       L155
L158:
          mov       D0,	3
          mov       [Dframe+-32],	D0
          jmp       L155
L159:
          mov       D0,	0
          mov       [Dframe+-32],	D0
L155:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+36]
          mov       D1,	19
          cmp       D0,	D1
          jz        L161
          mov       D1,	20
          cmp       D0,	D1
          jz        L161
          mov       D1,	21
          cmp       D0,	D1
          jz        L162
          mov       D1,	22
          cmp       D0,	D1
          jz        L162
          jmp       L163
L161:
          mov       D0,	3
          mov       [Dframe+-40],	D0
          jmp       L160
L162:
          mov       D0,	2
          mov       [Dframe+-40],	D0
          jmp       L160
L163:
          mov       D0,	0
          mov       [Dframe+-40],	D0
L160:
          mov       D0,	0
          push      D0
          push      word64 [Dframe+-40]
          mov       D0,	0
          push      D0
          push      word64 [Dframe+-32]
          mov       D0,	[Dframe+-8]
          movsx     D0,	word32 [D0+24]
          mov       D1,	[Dframe+-8]
          movzx     D1,	byte [D1+43]
          mov       D2,	[Dframe+-8]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          call      ax_writeobj.makesymbol
          push      D0
          call      ax_writeobj.addsymbol
L153:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_decls.ss_nsymbols]
          cmp       D0,	D1
          jle       L152
L154:
L150:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          ret       
;PROC ADDSTRINGENTRY ============================================================
ax_writeobj.addstringentry:
L3724:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[ax_writeobj.nextstringoffset]
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_writeobj.nstrings]
          mov       D1,	5000
          cmp       D0,	D1
          jle       L165
          mov       D0,	L3725
          push      D0
          call      ax_lib.gerror
L165:
          mov       D0,	[Dframe+16]
          lea       D1,	[ax_writeobj.stringtable]
          lea       D2,	[ax_writeobj.nstrings]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3*8-8],	D0
          mov       D0,	[Dframe+24]
          lea       D1,	[ax_writeobj.stringlengths]
          mov       D2,	[ax_writeobj.nstrings]
          mov       [D1+D2*8-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	1
          add       D0,	D1
          add       [ax_writeobj.nextstringoffset],	D0
          mov       D0,	[Dframe+-8]
L164:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC SECTIONTOAUX ============================================================
ax_writeobj.sectiontoaux:
L3726:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	18
          mov       D1,	0
          lea       D2,	[ax_writeobj.sectiontoaux.r]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L167
          mov       D0,	[ax_decls.ss_zdatalen]
          lea       D1,	[ax_writeobj.sectiontoaux.r]
          mov       [D1],	A0
          jmp       L168
L167:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.bufferlength
          lea       D1,	[ax_writeobj.sectiontoaux.r]
          mov       [D1],	A0
L168:
          mov       D0,	[Dframe+24]
          lea       D1,	[ax_writeobj.sectiontoaux.r]
          mov       [D1+4],	W0
          lea       D0,	[ax_writeobj.sectiontoaux.r]
L166:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC STRTOAUX ============================================================
ax_writeobj.strtoaux:
L3727:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          lea       D0,	[ax_writeobj.strtoaux.r]
          mov       [Dframe+-8],	D0
          mov       D0,	18
          mov       D1,	0
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       [Dframe+-16],	D0
          jmp       L171
L170:
          lea       D0,	[Dframe+16]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          lea       D0,	[Dframe+-8]
          mov       D2,	[D0]
          inc       word64 [D0]
          mov       [D2],	B1
          inc       word64 [Dframe+-16]
L171:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jz        L173
          mov       D0,	[Dframe+-16]
          mov       D1,	18
          cmp       D0,	D1
          jl        L170
L173:
L172:
          lea       D0,	[ax_writeobj.strtoaux.r]
L169:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC INITSYMBOLTABLE ============================================================
ax_writeobj.initsymboltable:
L3728:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          mov       [ax_writeobj.nsymbols],	D0
          mov       D0,	1
          mov       D1,	103
          mov       D2,	0
          mov       D3,	-2
          mov       D4,	0
          mov       D5,	0
          mov       D6,	L3729
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          push      D5
          push      D6
          call      ax_writeobj.makesymbol
          push      D0
          call      ax_writeobj.addsymbol
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_writeobj.strtoaux
          push      D0
          call      ax_writeobj.addsymbol
          mov       D0,	1
          mov       D1,	3
          mov       D2,	0
          mov       D3,	1
          mov       D4,	0
          mov       D5,	0
          mov       D6,	L3730
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          push      D5
          push      D6
          call      ax_writeobj.makesymbol
          push      D0
          call      ax_writeobj.addsymbol
          mov       D0,	0
          mov       D1,	0
          push      D0
          push      D1
          call      ax_writeobj.sectiontoaux
          push      D0
          call      ax_writeobj.addsymbol
          mov       D0,	1
          mov       D1,	3
          mov       D2,	0
          mov       D3,	2
          mov       D4,	0
          mov       D5,	0
          mov       D6,	L3731
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          push      D5
          push      D6
          call      ax_writeobj.makesymbol
          push      D0
          call      ax_writeobj.addsymbol
          push      word64 [ax_decls.ss_nidatarelocs]
          mov       D0,	[ax_decls.ss_idata]
          push      D0
          call      ax_writeobj.sectiontoaux
          push      D0
          call      ax_writeobj.addsymbol
          mov       D0,	1
          mov       D1,	3
          mov       D2,	0
          mov       D3,	3
          mov       D4,	0
          mov       D5,	0
          mov       D6,	L3732
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          push      D5
          push      D6
          call      ax_writeobj.makesymbol
          push      D0
          call      ax_writeobj.addsymbol
          push      word64 [ax_decls.ss_ncoderelocs]
          mov       D0,	[ax_decls.ss_code]
          push      D0
          call      ax_writeobj.sectiontoaux
          push      D0
          call      ax_writeobj.addsymbol
L174:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ADDSYMBOL ============================================================
ax_writeobj.addsymbol:
L3733:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_writeobj.nsymbols]
          mov       D1,	10001
          cmp       D0,	D1
          jl        L176
          mov       D0,	L3734
          push      D0
          call      ax_lib.gerror
L176:
          mov       D0,	18
          mov       D1,	[Dframe+16]
          lea       D2,	[ax_writeobj.symboltable]
          lea       D3,	[ax_writeobj.nsymbols]
          inc       word64 [D3]
          mov       D4,	[D3]
          imul2     D4,	18
          lea       D2,	[D2+D4]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
L175:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC MAKESYMBOL ============================================================
ax_writeobj.makesymbol:
L3735:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L178
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+24],	D0
L178:
          mov       D0,	[Dframe+24]
          mov       D1,	8
          cmp       D0,	D1
          jge       L180
          mov       D0,	[Dframe+16]
          lea       D1,	[ax_writeobj.makesymbol.r]
          lea       D1,	[D1]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L179
L180:
          mov       D0,	[Dframe+24]
          mov       D1,	8
          cmp       D0,	D1
          jnz       L181
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          lea       D2,	[ax_writeobj.makesymbol.r]
          lea       D2,	[D2]
          mov       D3,	1
          lea       D2,	[D2+D3-1]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          jmp       L179
L181:
          mov       D0,	0
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1],	A0
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_writeobj.addstringentry
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1+4],	A0
L179:
          mov       D0,	[Dframe+32]
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1+8],	A0
          mov       D0,	[Dframe+40]
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1+12],	W0
          mov       D0,	[Dframe+48]
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1+14],	W0
          mov       D0,	[Dframe+56]
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1+16],	B0
          mov       D0,	[Dframe+64]
          lea       D1,	[ax_writeobj.makesymbol.r]
          mov       [D1+17],	B0
          lea       D0,	[ax_writeobj.makesymbol.r]
L177:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      56
;PROC WRITESTRINGTABLE ============================================================
ax_writeobj.writestringtable:
L3736:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[ax_writeobj.dataptr]
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_writeobj.nextstringoffset]
          mov       D1,	[Dframe+-8]
          mov       [D1],	A0
          lea       D0,	[ax_writeobj.dataptr]
          mov       D1,	4
          add       [D0],	D1
L183:
          mov       D0,	1
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_writeobj.nstrings]
          cmp       D0,	1
          jl        L186
L184:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0*8+ax_writeobj.stringlengths-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1*8+ax_writeobj.stringtable-8]
          mov       D2,	[ax_writeobj.dataptr]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[ax_writeobj.dataptr]
          mov       D1,	[Dframe+-24]
          add       [D0],	D1
L185:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D1,	[ax_writeobj.nstrings]
          cmp       D0,	D1
          jle       L184
L186:
L182:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          ret       
;PROC WRITESYMBOLTABLE ============================================================
ax_writeobj.writesymboltable:
L3737:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L188:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_writeobj.nsymbols]
          cmp       D0,	1
          jl        L191
L189:
          mov       D0,	18
          lea       D1,	[ax_writeobj.symboltable]
          mov       D2,	[Dframe+-8]
          imul2     D2,	18
          lea       D1,	[D1+D2]
          push      D0
          push      D1
          call      ax_writeobj.writerecord
L190:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_writeobj.nsymbols]
          cmp       D0,	D1
          jle       L189
L191:
L187:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC WRITEDATA ============================================================
ax_writeobj.writedata:
L3738:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.bufferlength
          mov       D1,	0
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      ax_lib.bufferelemptr
          mov       D1,	[ax_writeobj.dataptr]
          push      D0
          push      D1
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[ax_writeobj.dataptr]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_lib.bufferlength
          pop       D1
          add       [D1],	D0
L192:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC WRITERELOCS ============================================================
ax_writeobj.writerelocs:
L3739:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L194
          add       Dstack,	8
          pop       Dframe
          retn      16
L194:
          jmp       L196
L195:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	2
          cmp       D0,	D1
          jz        L199
          mov       D1,	1
          cmp       D0,	D1
          jz        L199
          jmp       L200
L199:
          mov       D0,	[ax_decls.ss_symboltable]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+24]
          mov       D0,	[D0+D1*8-8]
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0+42]
          mov       D1,	3
          cmp       D0,	D1
          jz        L202
          mov       D1,	2
          cmp       D0,	D1
          jz        L203
          mov       D1,	1
          cmp       D0,	D1
          jz        L204
          mov       D1,	0
          cmp       D0,	D1
          jz        L205
          jmp       L206
L202:
          mov       D0,	2
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1+4],	A0
          jmp       L201
L203:
          mov       D0,	4
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1+4],	A0
          jmp       L201
L204:
          mov       D0,	6
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1+4],	A0
          jmp       L201
L205:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+24]
          mov       D1,	[ax_writeobj.stoffset]
          add       D0,	D1
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1+4],	A0
          jmp       L201
L206:
          mov       D0,	L3740
          push      D0
          call      ax_lib.gerror
L201:
          jmp       L198
L200:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+24]
          mov       D1,	[ax_writeobj.stoffset]
          add       D0,	D1
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1+4],	A0
L198:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1+8],	W0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       [D1],	A0
          mov       D0,	10
          lea       D1,	[ax_writeobj.writerelocs.s]
          mov       D2,	[ax_writeobj.dataptr]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[ax_writeobj.dataptr]
          mov       D1,	10
          add       [D0],	D1
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+16],	D0
L196:
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jnz       L195
L197:
L193:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC WRITERECORD ============================================================
ax_writeobj.writerecord:
L3741:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[ax_writeobj.dataptr]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[ax_writeobj.dataptr]
          mov       D1,	[Dframe+24]
          add       [D0],	D1
L207:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC WRITESS ============================================================
ax_writeobj.writess::
L3742:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_writeobj.writecoff
L208:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GETSILX ============================================================
ax_disasm.getsilx:
L3743:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_disasm.addrmode]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L210
          mov       D0,	[ax_disasm.opsize]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L210
          mov       D0,	[ax_disasm.rex]
          cmp       D0,	0
          jz        L210
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	5
          cmp       D0,	D1
          jl        L210
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	8
          cmp       D0,	D1
          jg        L210
          mov       D0,	[Dframe+16]
          mov       D1,	12
          add       [D0],	D1
L210:
L209:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GETSIL ============================================================
ax_disasm.getsil:
L3744:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_disasm.opsize]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L212
          mov       D0,	[ax_disasm.rex]
          cmp       D0,	0
          jz        L212
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	5
          cmp       D0,	D1
          jl        L212
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	8
          cmp       D0,	D1
          jg        L212
          mov       D0,	[Dframe+16]
          mov       D1,	12
          add       [D0],	D1
L212:
L211:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC DO87MEM ============================================================
ax_disasm.do87mem:
L3745:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	L3746
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jz        L215
          mov       D1,	1
          cmp       D0,	D1
          jz        L216
          mov       D1,	2
          cmp       D0,	D1
          jz        L217
          mov       D1,	3
          cmp       D0,	D1
          jz        L218
          mov       D1,	4
          cmp       D0,	D1
          jz        L219
          mov       D1,	5
          cmp       D0,	D1
          jz        L220
          jmp       L221
L215:
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          jmp       L214
L216:
          mov       D0,	L3747
          push      D0
          call      ax_disasm.genstr
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          jmp       L214
L217:
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          jmp       L214
L218:
          mov       D0,	L3747
          push      D0
          call      ax_disasm.genstr
          mov       D0,	2
          mov       [ax_disasm.opsize],	D0
          jmp       L214
L219:
          mov       D0,	L3747
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          jmp       L214
L220:
          mov       D0,	10
          mov       [ax_disasm.opsize],	D0
          jmp       L214
L221:
L214:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3748
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
L213:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC DO87ARITH ============================================================
ax_disasm.do87arith:
L3749:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	4
          and       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	2
          and       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jz        L223
          mov       D0,	L3750
          push      D0
          call      ax_disasm.genstr
L223:
          mov       D0,	L3751
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L224
          mov       D0,	L3752
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+32]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L225
L224:
          push      word64 [Dframe+32]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3753
          push      D0
          call      ax_disasm.genstr
L225:
L222:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC DECODE8087 ============================================================
ax_disasm.decode8087:
L3754:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-8],	B1
          mov       D0,	[Dframe+16]
          shl       D0,	8
          mov       B1,	[Dframe+-8]
          movzx     D1,	B1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	7
          and       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	1753
          cmp       D0,	D1
          jz        L228
          mov       D1,	484
          cmp       D0,	D1
          jz        L229
          mov       D1,	485
          cmp       D0,	D1
          jz        L230
          mov       D1,	494
          cmp       D0,	D1
          jz        L231
          mov       D1,	488
          cmp       D0,	D1
          jz        L232
          mov       D1,	491
          cmp       D0,	D1
          jz        L233
          mov       D1,	489
          cmp       D0,	D1
          jz        L234
          mov       D1,	490
          cmp       D0,	D1
          jz        L235
          mov       D1,	492
          cmp       D0,	D1
          jz        L236
          mov       D1,	493
          cmp       D0,	D1
          jz        L237
          mov       D1,	506
          cmp       D0,	D1
          jz        L238
          mov       D1,	510
          cmp       D0,	D1
          jz        L239
          mov       D1,	511
          cmp       D0,	D1
          jz        L240
          mov       D1,	507
          cmp       D0,	D1
          jz        L241
          mov       D1,	509
          cmp       D0,	D1
          jz        L242
          mov       D1,	504
          cmp       D0,	D1
          jz        L243
          mov       D1,	508
          cmp       D0,	D1
          jz        L244
          mov       D1,	500
          cmp       D0,	D1
          jz        L245
          mov       D1,	481
          cmp       D0,	D1
          jz        L246
          mov       D1,	480
          cmp       D0,	D1
          jz        L247
          mov       D1,	498
          cmp       D0,	D1
          jz        L248
          mov       D1,	499
          cmp       D0,	D1
          jz        L249
          mov       D1,	496
          cmp       D0,	D1
          jz        L250
          mov       D1,	497
          cmp       D0,	D1
          jz        L251
          mov       D1,	505
          cmp       D0,	D1
          jz        L252
          mov       D1,	995
          cmp       D0,	D1
          jz        L253
          mov       D1,	992
          cmp       D0,	D1
          jz        L254
          mov       D1,	993
          cmp       D0,	D1
          jz        L255
          mov       D1,	994
          cmp       D0,	D1
          jz        L256
          mov       D1,	503
          cmp       D0,	D1
          jz        L257
          mov       D1,	502
          cmp       D0,	D1
          jz        L258
          mov       D1,	464
          cmp       D0,	D1
          jz        L259
          jmp       L260
L228:
          mov       D0,	L3755
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L229:
          mov       D0,	L3756
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L230:
          mov       D0,	L3757
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L231:
          mov       D0,	L3758
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L232:
          mov       D0,	L3759
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L233:
          mov       D0,	L3760
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L234:
          mov       D0,	L3761
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L235:
          mov       D0,	L3762
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L236:
          mov       D0,	L3763
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L237:
          mov       D0,	L3764
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L238:
          mov       D0,	L3765
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L239:
          mov       D0,	L3766
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L240:
          mov       D0,	L3767
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L241:
          mov       D0,	L3768
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L242:
          mov       D0,	L3769
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L243:
          mov       D0,	L3770
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L244:
          mov       D0,	L3771
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L245:
          mov       D0,	L3772
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L246:
          mov       D0,	L3773
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L247:
          mov       D0,	L3774
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L248:
          mov       D0,	L3775
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L249:
          mov       D0,	L3776
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L250:
          mov       D0,	L3777
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L251:
          mov       D0,	L3778
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L252:
          mov       D0,	L3779
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L253:
          mov       D0,	L3780
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L254:
          mov       D0,	L3781
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L255:
          mov       D0,	L3782
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L256:
          mov       D0,	L3783
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L257:
          mov       D0,	L3784
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L258:
          mov       D0,	L3785
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L259:
          mov       D0,	L3786
          push      D0
          call      ax_disasm.genstr
          jmp       L227
L260:
          mov       D0,	[Dframe+-16]
          mov       D1,	2040
          and       D0,	D1
          mov       D1,	448
          cmp       D0,	D1
          jz        L262
          mov       D1,	1488
          cmp       D0,	D1
          jz        L263
          mov       D1,	1496
          cmp       D0,	D1
          jz        L264
          mov       D1,	456
          cmp       D0,	D1
          jz        L265
          mov       D1,	208
          cmp       D0,	D1
          jz        L266
          mov       D1,	216
          cmp       D0,	D1
          jz        L267
          mov       D1,	1472
          cmp       D0,	D1
          jz        L268
          jmp       L269
L262:
          mov       D0,	L3787
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L263:
          mov       D0,	L3788
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L264:
          mov       D0,	L3789
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L265:
          mov       D0,	L3790
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L266:
          mov       D0,	L3791
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L267:
          mov       D0,	L3792
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L268:
          mov       D0,	L3793
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.strfreg
          push      D0
          call      ax_disasm.genstr
          jmp       L261
L269:
          mov       D0,	[Dframe+-16]
          mov       D1,	504
          and       D0,	D1
          mov       D1,	192
          cmp       D0,	D1
          jz        L271
          mov       D1,	224
          cmp       D0,	D1
          jz        L272
          mov       D1,	232
          cmp       D0,	D1
          jz        L273
          mov       D1,	200
          cmp       D0,	D1
          jz        L274
          mov       D1,	240
          cmp       D0,	D1
          jz        L275
          mov       D1,	248
          cmp       D0,	D1
          jz        L276
          jmp       L277
L271:
          push      word64 [Dframe+-24]
          push      word64 [Dframe+16]
          mov       D0,	L3794
          push      D0
          call      ax_disasm.do87arith
          jmp       L270
L272:
          push      word64 [Dframe+-24]
          push      word64 [Dframe+16]
          mov       D0,	L3795
          push      D0
          call      ax_disasm.do87arith
          jmp       L270
L273:
          push      word64 [Dframe+-24]
          push      word64 [Dframe+16]
          mov       D0,	L3796
          push      D0
          call      ax_disasm.do87arith
          jmp       L270
L274:
          push      word64 [Dframe+-24]
          push      word64 [Dframe+16]
          mov       D0,	L3797
          push      D0
          call      ax_disasm.do87arith
          jmp       L270
L275:
          push      word64 [Dframe+-24]
          push      word64 [Dframe+16]
          mov       D0,	L3798
          push      D0
          call      ax_disasm.do87arith
          jmp       L270
L276:
          push      word64 [Dframe+-24]
          push      word64 [Dframe+16]
          mov       D0,	L3799
          push      D0
          call      ax_disasm.do87arith
          jmp       L270
L277:
          dec       word64 [ax_disasm.codeptr]
          mov       D0,	0
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[Dframe+16]
          shl       D0,	3
          mov       D1,	[ax_disasm.rmopc]
          add       D0,	D1
          mov       [Dframe+-32],	D0
          mov       D1,	61
          cmp       D0,	D1
          jz        L279
          mov       D1,	29
          cmp       D0,	D1
          jz        L280
          mov       D1,	60
          cmp       D0,	D1
          jz        L281
          mov       D1,	63
          cmp       D0,	D1
          jz        L282
          mov       D1,	31
          cmp       D0,	D1
          jz        L283
          mov       D1,	62
          cmp       D0,	D1
          jz        L284
          mov       D1,	13
          cmp       D0,	D1
          jz        L285
          mov       D1,	15
          cmp       D0,	D1
          jz        L286
          mov       D1,	47
          cmp       D0,	D1
          jz        L287
          mov       D1,	14
          cmp       D0,	D1
          jz        L288
          mov       D1,	12
          cmp       D0,	D1
          jz        L289
          mov       D1,	46
          cmp       D0,	D1
          jz        L290
          mov       D1,	44
          cmp       D0,	D1
          jz        L291
          jmp       L292
L279:
          mov       D0,	4
          mov       D1,	L3800
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L280:
          mov       D0,	5
          mov       D1,	L3800
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L281:
          mov       D0,	-1
          mov       D1,	L3801
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L282:
          mov       D0,	4
          mov       D1,	L3802
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L283:
          mov       D0,	5
          mov       D1,	L3802
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L284:
          mov       D0,	-1
          mov       D1,	L3803
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L285:
          mov       D0,	-1
          mov       D1,	L3804
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L286:
          mov       D0,	-1
          mov       D1,	L3805
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L287:
          mov       D0,	-1
          mov       D1,	L3806
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L288:
          mov       D0,	-1
          mov       D1,	L3807
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L289:
          mov       D0,	-1
          mov       D1,	L3808
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L290:
          mov       D0,	-1
          mov       D1,	L3809
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L291:
          mov       D0,	-1
          mov       D1,	L3810
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L278
L292:
          mov       D0,	[Dframe+-32]
          mov       D1,	15
          and       D0,	D1
          mov       D1,	8
          cmp       D0,	D1
          jz        L294
          mov       D1,	10
          cmp       D0,	D1
          jz        L295
          mov       D1,	11
          cmp       D0,	D1
          jz        L296
          mov       D1,	2
          cmp       D0,	D1
          jz        L297
          mov       D1,	3
          cmp       D0,	D1
          jz        L298
          mov       D1,	0
          cmp       D0,	D1
          jz        L299
          mov       D1,	4
          cmp       D0,	D1
          jz        L300
          mov       D1,	5
          cmp       D0,	D1
          jz        L301
          mov       D1,	1
          cmp       D0,	D1
          jz        L302
          mov       D1,	6
          cmp       D0,	D1
          jz        L303
          mov       D1,	7
          cmp       D0,	D1
          jz        L304
          jmp       L305
L294:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3811
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L295:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3812
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L296:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3813
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L297:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3814
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L298:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3815
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L299:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3816
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L300:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3817
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L301:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3818
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L302:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3819
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L303:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3820
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L304:
          mov       D0,	[Dframe+16]
          sar       D0,	1
          mov       D1,	L3821
          push      D0
          push      D1
          call      ax_disasm.do87mem
          jmp       L293
L305:
          mov       D0,	L3822
          push      D0
          call      ax_disasm.genstr
L293:
L278:
L270:
L261:
L227:
L226:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      8
;PROC STRMMX ============================================================
ax_disasm.strmmx:
L3823:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          lea       D0,	[ax_disasm.strmmx.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	0
          mov       D1,	L3824
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D2,	1
          sub       D1,	D2
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
          lea       D0,	[ax_disasm.strmmx.str]
L306:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC STRXMM ============================================================
ax_disasm.strxmm:
L3825:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          lea       D0,	[ax_disasm.strxmm.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	0
          mov       D1,	L3826
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D2,	1
          sub       D1,	D2
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
          lea       D0,	[ax_disasm.strxmm.str]
L307:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC READIMM8 ============================================================
ax_disasm.readimm8:
L3827:
;-------------------------------------------------
          mov       D0,	[ax_disasm.opsize]
          mov       D1,	8
          cmp       D0,	D1
          jge       L309
          call      ax_disasm.readimm
          ret       
L309:
          call      ax_disasm.readint64
L308:
;-------------------------------------------------
          ret       
;PROC READIMM ============================================================
ax_disasm.readimm:
L3828:
;-------------------------------------------------
          mov       D0,	[ax_disasm.opsize]
          mov       D1,	1
          cmp       D0,	D1
          jz        L312
          mov       D1,	2
          cmp       D0,	D1
          jz        L313
          mov       D1,	4
          cmp       D0,	D1
          jz        L314
          mov       D1,	8
          cmp       D0,	D1
          jz        L314
          jmp       L315
L312:
          call      ax_disasm.readsbyte
          ret       
          jmp       L311
L313:
          call      ax_disasm.readint16
          ret       
          jmp       L311
L314:
          call      ax_disasm.readint32
          ret       
          jmp       L311
L315:
L311:
          mov       D0,	0
L310:
;-------------------------------------------------
          ret       
;PROC GENHEX ============================================================
ax_disasm.genhex:
L3829:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	L3830
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.strint
          push      D0
          call      ax_disasm.genstr
L316:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENINTD ============================================================
ax_disasm.genintd:
L3831:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.strint
          push      D0
          call      ax_disasm.genstr
L317:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENSTR ============================================================
ax_disasm.genstr:
L3832:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[ax_disasm.deststr]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L318:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PRINTADDRMODE ============================================================
ax_disasm.printaddrmode:
L3833:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	L3834
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.addrmode]
          mov       D1,	1
          cmp       D0,	D1
          jz        L321
          jmp       L322
L321:
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L323
          push      word64 [ax_disasm.basereg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          jmp       L324
L323:
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.basereg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
L324:
          add       Dstack,	16
          pop       Dframe
          retn      8
          jmp       L320
L322:
L320:
          mov       D0,	[ax_disasm.opsize]
          mov       D1,	1
          cmp       D0,	D1
          jz        L326
          mov       D1,	2
          cmp       D0,	D1
          jz        L327
          mov       D1,	4
          cmp       D0,	D1
          jz        L328
          mov       D1,	8
          cmp       D0,	D1
          jz        L329
          mov       D1,	10
          cmp       D0,	D1
          jz        L330
          mov       D1,	16
          cmp       D0,	D1
          jz        L331
          jmp       L332
L326:
          mov       D0,	L3835
          push      D0
          call      ax_disasm.genstr
          jmp       L325
L327:
          mov       D0,	L3836
          push      D0
          call      ax_disasm.genstr
          jmp       L325
L328:
          mov       D0,	L3837
          push      D0
          call      ax_disasm.genstr
          jmp       L325
L329:
          mov       D0,	L3838
          push      D0
          call      ax_disasm.genstr
          jmp       L325
L330:
          mov       D0,	L3839
          push      D0
          call      ax_disasm.genstr
          jmp       L325
L331:
          mov       D0,	L3840
          push      D0
          call      ax_disasm.genstr
          jmp       L325
L332:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L3841
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_disasm.opsize]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L325:
          mov       D0,	L3842
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3843
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_disasm.addroverride]
          cmp       D0,	0
          jz        L333
          mov       D0,	4
          jmp       L334
L333:
          mov       D0,	8
L334:
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_disasm.basereg]
          cmp       D0,	0
          jz        L335
          push      word64 [Dframe+-16]
          push      word64 [ax_disasm.basereg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3844
          mov       [Dframe+-8],	D0
L335:
          mov       D0,	[ax_disasm.indexreg]
          cmp       D0,	0
          jz        L336
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-16]
          push      word64 [ax_disasm.indexreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.scale]
          mov       D1,	1
          cmp       D0,	D1
          jle       L337
          mov       D0,	L3845
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.scale]
          call      ax_disasm.genintd
L337:
          mov       D0,	L3846
          mov       [Dframe+-8],	D0
L336:
          mov       D0,	[ax_disasm.offset]
          cmp       D0,	0
          jnz       L339
          mov       D0,	[ax_disasm.basereg]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L338
          mov       D0,	[ax_disasm.indexreg]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L338
L339:
          mov       D0,	[ax_disasm.basereg]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L340
          mov       D0,	[ax_disasm.indexreg]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L340
          push      word64 [ax_disasm.offset]
          call      ax_disasm.genhex
          jmp       L341
L340:
          mov       D0,	[ax_disasm.offset]
          mov       D1,	0
          cmp       D0,	D1
          jle       L342
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_disasm.genstr
L342:
          push      word64 [ax_disasm.offset]
          call      ax_disasm.genintd
L341:
L338:
          mov       D0,	L3847
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.addrmode]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L343
          mov       D0,	L3848
          push      D0
          call      ax_disasm.genstr
L343:
L319:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC STRFREG ============================================================
ax_disasm.strfreg:
L3849:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strfreg.fregnames-8]
L344:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC STRREG ============================================================
ax_disasm.strreg:
L3850:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L346
          mov       D0,	L3851
          pop       Dframe
          retn      16
L346:
          mov       D0,	0
          cmp       D0,	0
          jz        L347
          mov       D0,	[Dframe+24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L349
          mov       D1,	2
          cmp       D0,	D1
          jz        L350
          mov       D1,	4
          cmp       D0,	D1
          jz        L351
          mov       D1,	8
          cmp       D0,	D1
          jz        L352
          jmp       L353
L349:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.mregnames8-8]
          pop       Dframe
          retn      16
          jmp       L348
L350:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.mregnames16-8]
          pop       Dframe
          retn      16
          jmp       L348
L351:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.mregnames32-8]
          pop       Dframe
          retn      16
          jmp       L348
L352:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.mregnames64-8]
          pop       Dframe
          retn      16
          jmp       L348
L353:
L348:
          jmp       L354
L347:
          mov       D0,	[Dframe+24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L356
          mov       D1,	2
          cmp       D0,	D1
          jz        L357
          mov       D1,	4
          cmp       D0,	D1
          jz        L358
          mov       D1,	8
          cmp       D0,	D1
          jz        L359
          jmp       L360
L356:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.regnames8-8]
          pop       Dframe
          retn      16
          jmp       L355
L357:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.regnames16-8]
          pop       Dframe
          retn      16
          jmp       L355
L358:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.regnames32-8]
          pop       Dframe
          retn      16
          jmp       L355
L359:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0*8+ax_disasm.strreg.regnames64-8]
          pop       Dframe
          retn      16
          jmp       L355
L360:
L355:
L354:
          mov       D0,	L3852
L345:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GETREG ============================================================
ax_disasm.getreg:
L3853:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L362
          mov       D0,	[Dframe+16]
          mov       D1,	8
          add       D0,	D1
          mov       D1,	1
          add       D0,	D1
          pop       Dframe
          retn      16
L362:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          add       D0,	D1
L361:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC READINT64 ============================================================
ax_disasm.readint64:
L3854:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[ax_disasm.codeptr]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	8
          add       [D0],	D1
          mov       D0,	[Dframe+-8]
L363:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC READINT32 ============================================================
ax_disasm.readint32:
L3855:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[ax_disasm.codeptr]
          movsx     D0,	word32 [D0]
          mov       [Dframe+-8],	D0
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	4
          add       [D0],	D1
          mov       D0,	[Dframe+-8]
L364:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC READWORD32 ============================================================
ax_disasm.readword32:
L3856:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	word32 [D0]
          mov       [Dframe+-8],	D0
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	4
          add       [D0],	D1
          mov       D0,	[Dframe+-8]
L365:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC READINT16 ============================================================
ax_disasm.readint16:
L3857:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[ax_disasm.codeptr]
          movsx     D0,	word16 [D0]
          mov       [Dframe+-8],	D0
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	2
          add       [D0],	D1
          mov       D0,	[Dframe+-8]
L366:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC READWORD16 ============================================================
ax_disasm.readword16:
L3858:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	word16 [D0]
          mov       [Dframe+-8],	D0
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	2
          add       [D0],	D1
          mov       D0,	[Dframe+-8]
L367:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC READSBYTE ============================================================
ax_disasm.readsbyte:
L3859:
;-------------------------------------------------
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movsx     D1,	byte [D1]
          mov       D0,	D1
L368:
;-------------------------------------------------
          ret       
;PROC READBYTE ============================================================
ax_disasm.readbyte:
L3860:
;-------------------------------------------------
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       D0,	D1
L369:
;-------------------------------------------------
          ret       
;PROC DECODEADDR ============================================================
ax_disasm.decodeaddr:
L3861:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	0
          mov       [ax_disasm.indexreg],	D0
          mov       [ax_disasm.basereg],	D0
          mov       D0,	1
          mov       [ax_disasm.scale],	D0
          mov       D0,	0
          mov       [ax_disasm.offset],	D0
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L371
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L372
          mov       D0,	2
          jmp       L373
L372:
          mov       D0,	4
L373:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L374
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
L374:
          jmp       L375
L371:
          mov       D0,	1
          mov       [ax_disasm.opsize],	D0
L375:
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-8],	D1
          mov       D0,	[Dframe+-8]
          sar       D0,	6
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-8]
          sar       D0,	3
          mov       D1,	7
          and       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          mov       D1,	7
          and       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L377
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [ax_disasm.basereg],	D0
          mov       D0,	1
          mov       [ax_disasm.addrmode],	D0
          jmp       L376
L377:
          mov       D0,	[Dframe+-40]
          mov       D1,	4
          cmp       D0,	D1
          jz        L378
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L379
          mov       D0,	[Dframe+-40]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L379
          call      ax_disasm.readint32
          mov       [ax_disasm.offset],	D0
          mov       D0,	2
          mov       [ax_disasm.addrmode],	D0
          jmp       L380
L379:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [ax_disasm.basereg],	D0
          mov       D0,	2
          mov       [ax_disasm.addrmode],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L382
          mov       D1,	2
          cmp       D0,	D1
          jz        L383
          jmp       L384
L382:
          call      ax_disasm.readsbyte
          mov       [ax_disasm.offset],	D0
          jmp       L381
L383:
          call      ax_disasm.readint32
          mov       [ax_disasm.offset],	D0
          jmp       L381
L384:
L381:
L380:
          jmp       L376
L378:
          mov       D0,	2
          mov       [ax_disasm.addrmode],	D0
          call      ax_disasm.readbyte
          mov       [Dframe+-32],	D0
          sar       D0,	3
          mov       D1,	7
          and       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [ax_disasm.indexreg],	D0
          mov       D0,	[Dframe+-32]
          mov       D1,	7
          and       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [ax_disasm.basereg],	D0
          mov       D0,	[Dframe+-32]
          sar       D0,	6
          mov       D1,	1
          add       D0,	D1
          sub       D0,	1
          cmp       D0,	4
          jae       L387
          jmp       [D0*8+L386]
          isegment  
L386:
          dq        L388
          dq        L389
          dq        L390
          dq        L391
          csegment  
L388:
          mov       D0,	1
          jmp       L385
L389:
          mov       D0,	2
          jmp       L385
L390:
          mov       D0,	4
          jmp       L385
L391:
          mov       D0,	8
          jmp       L385
L387:
          mov       D0,	0
L385:
          mov       [ax_disasm.scale],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L392
          mov       D0,	[ax_disasm.basereg]
          mov       D1,	6
          cmp       D0,	D1
          jnz       L392
          mov       D0,	0
          mov       [ax_disasm.basereg],	D0
          call      ax_disasm.readint32
          mov       [ax_disasm.offset],	D0
          jmp       L393
L392:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L395
          mov       D1,	2
          cmp       D0,	D1
          jz        L396
          jmp       L397
L395:
          call      ax_disasm.readsbyte
          mov       [ax_disasm.offset],	D0
          jmp       L394
L396:
          call      ax_disasm.readint32
          mov       [ax_disasm.offset],	D0
          jmp       L394
L397:
L394:
L393:
          mov       D0,	[ax_disasm.indexreg]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L398
          mov       D0,	0
          mov       [ax_disasm.indexreg],	D0
L398:
L376:
          mov       D0,	[ax_disasm.basereg]
          cmp       D0,	0
          jz        L399
          mov       D0,	[ax_disasm.rex]
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L399
          mov       D0,	8
          add       [ax_disasm.basereg],	D0
L399:
          mov       D0,	[ax_disasm.indexreg]
          cmp       D0,	0
          jz        L400
          mov       D0,	[ax_disasm.rex]
          mov       D1,	2
          and       D0,	D1
          cmp       D0,	0
          jz        L400
          mov       D0,	8
          add       [ax_disasm.indexreg],	D0
L400:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       [ax_disasm.rmreg],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	4
          and       D0,	D1
          cmp       D0,	0
          jz        L401
          mov       D0,	8
          add       [ax_disasm.rmreg],	D0
L401:
          mov       D0,	[Dframe+-16]
          mov       [ax_disasm.rmopc],	D0
L370:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      8
;PROC DECODETWOBYTEINSTR ============================================================
ax_disasm.decodetwobyteinstr:
L3862:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-8],	D1
          sub       D1,	42
          cmp       D1,	198
          jae       L405
          jmp       [D1*8+L404]
          isegment  
L404:
          dq        L406
          dq        L405
          dq        L409
          dq        L414
          dq        L405
          dq        L419
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L422
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L427
          dq        L405
          dq        L428
          dq        L405
          dq        L405
          dq        L433
          dq        L405
          dq        L405
          dq        L438
          dq        L443
          dq        L447
          dq        L448
          dq        L405
          dq        L451
          dq        L452
          dq        L453
          dq        L454
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L455
          dq        L462
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L466
          dq        L472
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L476
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L479
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L480
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L481
          dq        L481
          dq        L486
          dq        L405
          dq        L405
          dq        L405
          dq        L487
          dq        L487
          dq        L481
          dq        L481
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L490
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L491
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L405
          dq        L492
          csegment  
L406:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L407
          mov       D0,	L3863
          push      D0
          call      ax_disasm.genstr
          jmp       L408
L407:
          mov       D0,	L3864
          push      D0
          call      ax_disasm.genstr
L408:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3865
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L409:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L410
          mov       D0,	L3866
          push      D0
          call      ax_disasm.genstr
          mov       D0,	4
          mov       [Dframe+-16],	D0
          jmp       L411
L410:
          mov       D0,	L3867
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          mov       [Dframe+-16],	D0
L411:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L412
          mov       D0,	8
          push      D0
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L413
L412:
          mov       D0,	4
          push      D0
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
L413:
          mov       D0,	L3868
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-16]
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L414:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L415
          mov       D0,	L3869
          push      D0
          call      ax_disasm.genstr
          mov       D0,	4
          mov       [Dframe+-16],	D0
          jmp       L416
L415:
          mov       D0,	L3870
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          mov       [Dframe+-16],	D0
L416:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L417
          mov       D0,	8
          push      D0
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L418
L417:
          mov       D0,	4
          push      D0
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
L418:
          mov       D0,	L3871
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-16]
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L419:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L420
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3872
          push      D0
          call      ax_disasm.genstr
          jmp       L421
L420:
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3873
          push      D0
          call      ax_disasm.genstr
L421:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3874
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L422:
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-24],	D1
          mov       D0,	[Dframe+-24]
          mov       D1,	99
          cmp       D0,	D1
          jz        L424
          mov       D1,	98
          cmp       D0,	D1
          jz        L425
          jmp       L426
L424:
          mov       D0,	L3875
          push      D0
          call      ax_disasm.genstr
          jmp       L423
L425:
          mov       D0,	L3876
          push      D0
          call      ax_disasm.genstr
          jmp       L423
L426:
          mov       D0,	L3877
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-8]
          call      ax_disasm.genhex
          add       Dstack,	40
          pop       Dframe
          ret       
L423:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3878
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3878
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-32],	D1
          push      word64 [Dframe+-32]
          call      ax_disasm.genintd
          jmp       L403
L427:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3879
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-8]
          mov       D1,	15
          and       D0,	D1
          mov       D0,	[D0*8+ax_disasm.condnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3880
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3881
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L428:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L429
          mov       D0,	4
          jmp       L430
L429:
          mov       D0,	8
L430:
          mov       [ax_disasm.opsize],	D0
          mov       D1,	4
          cmp       D0,	D1
          jnz       L431
          mov       D0,	L3882
          jmp       L432
L431:
          mov       D0,	L3883
L432:
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3884
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L433:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L434
          mov       D0,	L3885
          jmp       L435
L434:
          mov       D0,	L3886
L435:
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3887
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L436
          mov       D0,	8
          jmp       L437
L436:
          mov       D0,	4
L437:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L438:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L439
          mov       D0,	L3888
          jmp       L440
L439:
          mov       D0,	L3889
L440:
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3890
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L441
          mov       D0,	8
          jmp       L442
L441:
          mov       D0,	4
L442:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L443:
          mov       D0,	L3891
          mov       [Dframe+-40],	D0
;doarith
L444:
          mov       D0,	[Dframe+-40]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f2override]
          cmp       D0,	0
          jz        L445
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3892
          push      D0
          call      ax_disasm.genstr
          jmp       L446
L445:
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3893
          push      D0
          call      ax_disasm.genstr
L446:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3894
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L447:
          mov       D0,	L3895
          mov       [Dframe+-40],	D0
          jmp       L444
          jmp       L403
L448:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L449
          mov       D0,	L3896
          push      D0
          call      ax_disasm.genstr
          mov       D0,	4
          mov       [Dframe+-16],	D0
          jmp       L450
L449:
          mov       D0,	L3897
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          mov       [Dframe+-16],	D0
L450:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3898
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-16]
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L451:
          mov       D0,	L3899
          mov       [Dframe+-40],	D0
          jmp       L444
          jmp       L403
L452:
          mov       D0,	L3900
          mov       [Dframe+-40],	D0
          jmp       L444
          jmp       L403
L453:
          mov       D0,	L3901
          mov       [Dframe+-40],	D0
          jmp       L444
          jmp       L403
L454:
          mov       D0,	L3902
          mov       [Dframe+-40],	D0
          jmp       L444
          jmp       L403
L455:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L456
          mov       D0,	8
          jmp       L457
L456:
          mov       D0,	4
L457:
          mov       [ax_disasm.opsize],	D0
          mov       D1,	4
          cmp       D0,	D1
          jnz       L458
          mov       D0,	L3903
          jmp       L459
L458:
          mov       D0,	L3904
L459:
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L460
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          jmp       L461
L460:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strmmx
          push      D0
          call      ax_disasm.genstr
L461:
          mov       D0,	L3905
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L462:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	16
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L464
          mov       D0,	L3906
          push      D0
          call      ax_disasm.genstr
          jmp       L463
L464:
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L465
          mov       D0,	L3907
          push      D0
          call      ax_disasm.genstr
          jmp       L463
L465:
          mov       D0,	L3908
          push      D0
          call      ax_disasm.genstr
L463:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3909
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L466:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L468
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3910
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3911
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L467
L468:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L469
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3912
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3913
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          jmp       L467
L469:
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3914
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3915
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L470
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          jmp       L471
L470:
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strmmx
          push      D0
          call      ax_disasm.genstr
L471:
L467:
          jmp       L403
L472:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	16
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L474
          mov       D0,	L3916
          push      D0
          call      ax_disasm.genstr
          jmp       L473
L474:
          mov       D0,	[ax_disasm.f3override]
          cmp       D0,	0
          jz        L475
          mov       D0,	L3917
          push      D0
          call      ax_disasm.genstr
          jmp       L473
L475:
          mov       D0,	L3918
          push      D0
          call      ax_disasm.genstr
L473:
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3919
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          jmp       L403
L476:
          mov       D0,	L3920
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-8]
          mov       D1,	15
          and       D0,	D1
          mov       D0,	[D0*8+ax_disasm.condnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3921
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L477
          call      ax_disasm.readint16
          push      D0
          call      ax_disasm.genintd
          jmp       L478
L477:
          call      ax_disasm.readint32
          push      D0
          call      ax_disasm.genintd
L478:
          jmp       L403
L479:
          mov       D0,	0
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3922
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-8]
          mov       D1,	15
          and       D0,	D1
          mov       D0,	[D0*8+ax_disasm.condnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3923
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L480:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3924
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3925
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L481:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[Dframe+-8]
          mov       D1,	190
          cmp       D0,	D1
          jge       L482
          mov       D0,	L3926
          jmp       L483
L482:
          mov       D0,	L3927
L483:
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3928
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L484
          mov       D0,	2
          jmp       L485
L484:
          mov       D0,	1
L485:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L486:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3929
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3930
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L487:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[Dframe+-8]
          mov       D1,	188
          cmp       D0,	D1
          jnz       L488
          mov       D0,	L3931
          jmp       L489
L488:
          mov       D0,	L3932
L489:
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3933
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L490:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3934
          push      D0
          call      ax_disasm.genstr
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3935
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          jmp       L403
L491:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3936
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3937
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L492:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3938
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strxmm
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3939
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	1
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L403
L405:
;error
L493:
          mov       D0,	L3940
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-8]
          call      ax_disasm.genhex
L403:
L402:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          ret       
;PROC DECODEINSTR ============================================================
ax_disasm.decodeinstr::
L3941:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	224
;-------------------------------------------------
          mov       D0,	0
          lea       D1,	[ax_disasm.deststr]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [ax_disasm.codeptr],	D0
          mov       [Dframe+-72],	D0
          mov       D0,	0
          mov       [ax_disasm.rex],	D0
          mov       D0,	1
          mov       [ax_disasm.opsize],	D0
          mov       D0,	0
          mov       [ax_disasm.addroverride],	D0
          mov       [ax_disasm.sizeoverride],	D0
          mov       [ax_disasm.f3override],	D0
          mov       [ax_disasm.f2override],	D0
          mov       D0,	0
          mov       [ax_disasm.offset],	D0
          mov       [ax_disasm.indexreg],	D0
          mov       [ax_disasm.basereg],	D0
;retry
L495:
          lea       D0,	[ax_disasm.codeptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-24],	D1
          cmp       D1,	256
          jae       L498
          jmp       [D1*8+L497]
          isegment  
L497:
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L505
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L499
          dq        L499
          dq        L500
          dq        L500
          dq        L501
          dq        L501
          dq        L498
          dq        L498
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L506
          dq        L507
          dq        L507
          dq        L507
          dq        L507
          dq        L507
          dq        L507
          dq        L507
          dq        L507
          dq        L508
          dq        L508
          dq        L508
          dq        L508
          dq        L508
          dq        L508
          dq        L508
          dq        L508
          dq        L498
          dq        L498
          dq        L498
          dq        L509
          dq        L498
          dq        L498
          dq        L510
          dq        L511
          dq        L512
          dq        L514
          dq        L513
          dq        L514
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L519
          dq        L520
          dq        L520
          dq        L520
          dq        L520
          dq        L523
          dq        L523
          dq        L524
          dq        L524
          dq        L525
          dq        L525
          dq        L526
          dq        L526
          dq        L498
          dq        L527
          dq        L498
          dq        L528
          dq        L529
          dq        L532
          dq        L532
          dq        L532
          dq        L532
          dq        L532
          dq        L532
          dq        L532
          dq        L537
          dq        L540
          dq        L498
          dq        L544
          dq        L545
          dq        L546
          dq        L547
          dq        L548
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L549
          dq        L549
          dq        L549
          dq        L549
          dq        L565
          dq        L565
          dq        L549
          dq        L549
          dq        L549
          dq        L549
          dq        L549
          dq        L549
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L570
          dq        L576
          dq        L576
          dq        L592
          dq        L593
          dq        L498
          dq        L498
          dq        L594
          dq        L594
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L576
          dq        L576
          dq        L576
          dq        L576
          dq        L498
          dq        L498
          dq        L498
          dq        L595
          dq        L596
          dq        L596
          dq        L596
          dq        L596
          dq        L596
          dq        L596
          dq        L596
          dq        L596
          dq        L597
          dq        L598
          dq        L599
          dq        L600
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L603
          dq        L604
          dq        L498
          dq        L605
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L606
          dq        L609
          dq        L612
          dq        L498
          dq        L613
          dq        L613
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L498
          dq        L627
          dq        L629
          csegment  
L499:
          mov       D0,	[Dframe+-24]
          sar       D0,	3
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          lea       D0,	[ax_disasm.rmreg]
          push      D0
          call      ax_disasm.getsil
          mov       D0,	[Dframe+-40]
          mov       D0,	[D0*8+ax_disasm.opnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3942
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L500:
          mov       D0,	[Dframe+-24]
          sar       D0,	3
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[Dframe+-40]
          mov       D0,	[D0*8+ax_disasm.opnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3943
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.rmreg]
          push      D0
          call      ax_disasm.getsil
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3944
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L501:
          mov       D0,	[Dframe+-24]
          sar       D0,	3
          mov       D0,	[D0*8+ax_disasm.opnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3945
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L502
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L503
          mov       D0,	2
          mov       [ax_disasm.opsize],	D0
L503:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L504
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
L504:
L502:
          push      word64 [ax_disasm.opsize]
          mov       D0,	1
          push      D0
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3946
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readimm
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L505:
          call      ax_disasm.decodetwobyteinstr
          jmp       L496
L506:
          mov       D0,	[Dframe+-24]
          mov       [ax_disasm.rex],	D0
          jmp       L495
          jmp       L496
L507:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	1
          and       D0,	D1
          mov       D1,	[Dframe+-24]
          mov       D2,	7
          and       D1,	D2
          push      D0
          push      D1
          call      ax_disasm.getreg
          mov       [Dframe+-32],	D0
          mov       D0,	L3947
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          push      D0
          push      word64 [Dframe+-32]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L508:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	1
          and       D0,	D1
          mov       D1,	[Dframe+-24]
          mov       D2,	7
          and       D1,	D2
          push      D0
          push      D1
          call      ax_disasm.getreg
          mov       [Dframe+-32],	D0
          mov       D0,	L3948
          push      D0
          call      ax_disasm.genstr
          mov       D0,	8
          push      D0
          push      word64 [Dframe+-32]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L509:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3949
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3950
          push      D0
          call      ax_disasm.genstr
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L510:
          mov       D0,	1
          mov       [ax_disasm.sizeoverride],	D0
          jmp       L495
          jmp       L496
L511:
          mov       D0,	1
          mov       [ax_disasm.addroverride],	D0
          jmp       L495
          jmp       L496
L512:
          mov       D0,	L3951
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readint32
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L513:
          mov       D0,	L3951
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L514:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.basereg]
          mov       D1,	[ax_disasm.rmreg]
          cmp       D0,	D1
          jz        L515
          mov       D0,	L3952
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3953
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3954
          push      D0
          call      ax_disasm.genstr
          jmp       L516
L515:
          mov       D0,	L3955
          push      D0
          call      ax_disasm.genstr
L516:
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3956
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-24]
          mov       D1,	2
          and       D0,	D1
          cmp       D0,	0
          jz        L517
          mov       D0,	1
          jmp       L518
L517:
          mov       D0,	[ax_disasm.opsize]
L518:
          mov       [ax_disasm.opsize],	D0
          call      ax_disasm.readimm
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L519:
          mov       D0,	L3957
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-24]
          mov       D1,	15
          and       D0,	D1
          mov       D0,	[D0*8+ax_disasm.condnames]
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3958
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L520:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.rmopc]
          mov       D0,	[D0*8+ax_disasm.opnames]
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3959
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-24]
          mov       D1,	131
          cmp       D0,	D1
          jz        L521
          call      ax_disasm.readimm
          push      D0
          call      ax_disasm.genintd
          jmp       L522
L521:
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
L522:
          jmp       L496
L523:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          lea       D0,	[ax_disasm.rmreg]
          push      D0
          call      ax_disasm.getsil
          mov       D0,	L3960
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3961
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L524:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3962
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          lea       D0,	[ax_disasm.rmreg]
          push      D0
          call      ax_disasm.getsil
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3963
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L525:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3964
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          lea       D0,	[ax_disasm.rmreg]
          push      D0
          call      ax_disasm.getsil
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L3965
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L526:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3966
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          lea       D0,	[ax_disasm.rmreg]
          push      D0
          call      ax_disasm.getsil
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3967
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L527:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L3968
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [ax_disasm.rmreg]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3969
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L528:
          mov       D0,	1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	1
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L3970
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L529:
          mov       D0,	[ax_disasm.rex]
          cmp       D0,	0
          jz        L530
          jmp       L531
L530:
          mov       D0,	L3971
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L532:
;doexch
L531:
          mov       D0,	[Dframe+-24]
          mov       D1,	7
          and       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-32],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L533
          mov       D0,	8
          add       [Dframe+-32],	D0
L533:
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L534
          mov       D0,	2
          jmp       L535
L534:
          mov       D0,	4
L535:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L536
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
L536:
          mov       D0,	L3972
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          mov       D0,	1
          push      D0
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3973
          push      D0
          call      ax_disasm.genstr
          push      word64 [ax_disasm.opsize]
          push      word64 [Dframe+-32]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L537:
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L538
          mov       D0,	L3974
          push      D0
          call      ax_disasm.genstr
          jmp       L539
L538:
          mov       D0,	L3975
          push      D0
          call      ax_disasm.genstr
L539:
          jmp       L496
L540:
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L542
          mov       D0,	L3976
          push      D0
          call      ax_disasm.genstr
          jmp       L541
L542:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L543
          mov       D0,	L3977
          push      D0
          call      ax_disasm.genstr
          jmp       L541
L543:
          mov       D0,	L3978
          push      D0
          call      ax_disasm.genstr
L541:
          jmp       L496
L544:
          mov       D0,	L3979
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L545:
          mov       D0,	L3980
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L546:
          mov       D0,	L3981
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L547:
          mov       D0,	L3982
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L548:
          mov       D0,	L3983
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L549:
          mov       D0,	[Dframe+-24]
          sar       D0,	1
          mov       D1,	7
          and       D0,	D1
          sub       D0,	1
          cmp       D0,	7
          jae       L552
          jmp       [D0*8+L551]
          isegment  
L551:
          dq        L553
          dq        L554
          dq        L555
          dq        L556
          dq        L557
          dq        L558
          dq        L559
          csegment  
L553:
          mov       D0,	L3984
          jmp       L550
L554:
          mov       D0,	L3985
          jmp       L550
L555:
          mov       D0,	L3986
          jmp       L550
L556:
          mov       D0,	L3987
          jmp       L550
L557:
          mov       D0,	L3988
          jmp       L550
L558:
          mov       D0,	L3989
          jmp       L550
L559:
          mov       D0,	L3990
          jmp       L550
L552:
          mov       D0,	L3991
L550:
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          mov       D1,	0
          cmp       D0,	D1
          jnz       L560
          mov       D0,	L3992
          push      D0
          call      ax_disasm.genstr
          jmp       L561
L560:
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L563
          mov       D0,	L3993
          push      D0
          call      ax_disasm.genstr
          jmp       L562
L563:
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L564
          mov       D0,	L3994
          push      D0
          call      ax_disasm.genstr
          jmp       L562
L564:
          mov       D0,	L3995
          push      D0
          call      ax_disasm.genstr
L562:
L561:
          jmp       L496
L565:
          mov       D0,	L3996
          push      D0
          call      ax_disasm.genstr
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L566
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L567
          mov       D0,	2
          jmp       L568
L567:
          mov       D0,	4
L568:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L569
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
L569:
L566:
          push      word64 [ax_disasm.opsize]
          mov       D0,	1
          push      D0
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3997
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readimm
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L570:
          mov       D0,	[Dframe+-24]
          mov       D1,	7
          and       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-32],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L571
          mov       D0,	8
          add       [Dframe+-32],	D0
L571:
          mov       D0,	[Dframe+-24]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L572
          mov       D0,	[ax_disasm.sizeoverride]
          cmp       D0,	0
          jz        L573
          mov       D0,	2
          jmp       L574
L573:
          mov       D0,	4
L574:
          mov       [ax_disasm.opsize],	D0
          mov       D0,	[ax_disasm.rex]
          mov       D1,	8
          and       D0,	D1
          cmp       D0,	0
          jz        L575
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
L575:
L572:
          mov       D0,	L3998
          push      D0
          call      ax_disasm.genstr
          lea       D0,	[Dframe+-32]
          push      D0
          call      ax_disasm.getsil
          push      word64 [ax_disasm.opsize]
          push      word64 [Dframe+-32]
          call      ax_disasm.strreg
          push      D0
          call      ax_disasm.genstr
          mov       D0,	L3999
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readimm8
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L576:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          mov       D0,	[ax_disasm.rmopc]
          mov       D1,	1
          add       D0,	D1
          sub       D0,	1
          cmp       D0,	8
          jae       L579
          jmp       [D0*8+L578]
          isegment  
L578:
          dq        L580
          dq        L581
          dq        L582
          dq        L583
          dq        L584
          dq        L585
          dq        L586
          dq        L587
          csegment  
L580:
          mov       D0,	L4000
          jmp       L577
L581:
          mov       D0,	L4001
          jmp       L577
L582:
          mov       D0,	L4002
          jmp       L577
L583:
          mov       D0,	L4003
          jmp       L577
L584:
          mov       D0,	L4004
          jmp       L577
L585:
          mov       D0,	L4005
          jmp       L577
L586:
          mov       D0,	L4006
          jmp       L577
L587:
          mov       D0,	L4007
          jmp       L577
L579:
          mov       D0,	L4008
L577:
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	[Dframe+-24]
          mov       D1,	193
          cmp       D0,	D1
          jg        L588
          mov       D0,	L4009
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L589
L588:
          mov       D0,	[Dframe+-24]
          mov       D1,	2
          and       D0,	D1
          cmp       D0,	0
          jz        L590
          mov       D0,	L4010
          jmp       L591
L590:
          mov       D0,	L4011
L591:
          push      D0
          call      ax_disasm.genstr
L589:
          jmp       L496
L592:
          mov       D0,	L4012
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readword16
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L593:
          mov       D0,	L4013
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L594:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          mov       D0,	L4014
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	L4015
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readimm
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L595:
          mov       D0,	L4016
          push      D0
          call      ax_disasm.genstr
          jmp       L496
L596:
          mov       D0,	[Dframe+-24]
          mov       D1,	7
          and       D0,	D1
          push      D0
          call      ax_disasm.decode8087
          jmp       L496
L597:
          mov       D0,	L4017
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L598:
          mov       D0,	L4018
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L599:
          mov       D0,	L4019
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L600:
          mov       D0,	[ax_disasm.addroverride]
          cmp       D0,	0
          jz        L601
          mov       D0,	L4020
          push      D0
          call      ax_disasm.genstr
          jmp       L602
L601:
          mov       D0,	L4021
          push      D0
          call      ax_disasm.genstr
L602:
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L603:
          mov       D0,	L4022
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readint32
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L604:
          mov       D0,	L4023
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readint32
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L605:
          mov       D0,	L4024
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readsbyte
          push      D0
          call      ax_disasm.genintd
          jmp       L496
L606:
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	byte [D0]
          mov       D1,	15
          cmp       D0,	D1
          jz        L607
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	byte [D0]
          mov       D1,	64
          cmp       D0,	D1
          jge       L607
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	byte [D0]
          mov       D1,	79
          cmp       D0,	D1
          jle       L607
          mov       D0,	L4025
          push      D0
          call      ax_disasm.genstr
          jmp       L608
L607:
          mov       D0,	1
          mov       [ax_disasm.f2override],	D0
          jmp       L495
L608:
          jmp       L496
L609:
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	byte [D0]
          mov       D1,	15
          cmp       D0,	D1
          jz        L610
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	byte [D0]
          mov       D1,	64
          cmp       D0,	D1
          jge       L610
          mov       D0,	[ax_disasm.codeptr]
          movzx     D0,	byte [D0]
          mov       D1,	79
          cmp       D0,	D1
          jle       L610
          mov       D0,	L4026
          push      D0
          call      ax_disasm.genstr
          jmp       L611
L610:
          mov       D0,	1
          mov       [ax_disasm.f3override],	D0
          jmp       L495
L611:
          jmp       L496
L612:
          mov       D0,	0
          add       Dstack,	224
          pop       Dframe
          retn      16
          jmp       L496
L613:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          and       D0,	D1
          push      D0
          call      ax_disasm.decodeaddr
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          mov       D0,	[ax_disasm.rmopc]
          mov       D1,	1
          add       D0,	D1
          sub       D0,	1
          cmp       D0,	8
          jae       L616
          jmp       [D0*8+L615]
          isegment  
L615:
          dq        L617
          dq        L618
          dq        L619
          dq        L620
          dq        L621
          dq        L622
          dq        L623
          dq        L624
          csegment  
L617:
          mov       D0,	L4027
          jmp       L614
L618:
          mov       D0,	L4028
          jmp       L614
L619:
          mov       D0,	L4029
          jmp       L614
L620:
          mov       D0,	L4030
          jmp       L614
L621:
          mov       D0,	L4031
          jmp       L614
L622:
          mov       D0,	L4032
          jmp       L614
L623:
          mov       D0,	L4033
          jmp       L614
L624:
          mov       D0,	L4034
          jmp       L614
L616:
          mov       D0,	L4035
L614:
          push      D0
          call      ax_disasm.genstr
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          mov       D0,	[ax_disasm.rmopc]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L625
          mov       D0,	[ax_disasm.opsize]
          mov       D1,	8
          cmp       D0,	D1
          jnz       L626
          mov       D0,	4
          mov       [ax_disasm.opsize],	D0
L626:
          mov       D0,	L4036
          push      D0
          call      ax_disasm.genstr
          call      ax_disasm.readimm
          push      D0
          call      ax_disasm.genintd
L625:
          jmp       L496
L627:
          mov       D0,	0
          mov       [Dframe+-16],	D0
          jmp       L628
          jmp       L496
L629:
          mov       D0,	1
          mov       [Dframe+-16],	D0
;doff
L628:
          push      word64 [Dframe+-16]
          call      ax_disasm.decodeaddr
          mov       D0,	[ax_disasm.rmopc]
          mov       D1,	0
          cmp       D0,	D1
          jz        L631
          mov       D1,	1
          cmp       D0,	D1
          jz        L632
          mov       D1,	2
          cmp       D0,	D1
          jz        L633
          mov       D1,	4
          cmp       D0,	D1
          jz        L634
          mov       D1,	6
          cmp       D0,	D1
          jz        L635
          jmp       L636
L631:
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          mov       D0,	L4037
          push      D0
          call      ax_disasm.genstr
          jmp       L630
L632:
          lea       D0,	[ax_disasm.basereg]
          push      D0
          call      ax_disasm.getsilx
          mov       D0,	L4038
          push      D0
          call      ax_disasm.genstr
          jmp       L630
L633:
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L4039
          push      D0
          call      ax_disasm.genstr
          jmp       L630
L634:
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L4040
          push      D0
          call      ax_disasm.genstr
          jmp       L630
L635:
          mov       D0,	8
          mov       [ax_disasm.opsize],	D0
          mov       D0,	L4041
          push      D0
          call      ax_disasm.genstr
          jmp       L630
L636:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4042
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L630:
          mov       D0,	0
          push      D0
          call      ax_disasm.printaddrmode
          jmp       L496
L498:
          mov       D0,	L4043
          push      D0
          call      ax_disasm.genstr
          push      word64 [Dframe+-24]
          call      ax_disasm.genhex
L496:
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L637
          lea       D0,	[ax_disasm.decodeinstr.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4044
          push      D0
          mov       D0,	[Dframe+24]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4046
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          jmp       L638
L637:
          lea       D0,	[ax_disasm.decodeinstr.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4047
          push      D0
          mov       D0,	[Dframe+-72]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4048
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
L638:
          mov       D0,	[ax_disasm.codeptr]
          mov       D1,	[Dframe+-72]
          sub       D0,	D1
          mov       [Dframe+-8],	D0
L639:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-216],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L642
L640:
          lea       D0,	[Dframe+-200]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4049
          push      D0
          lea       D0,	[Dframe+-72]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          push      D1
          call      [L3658]	!print_i64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4050
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-200]
          lea       D1,	[ax_disasm.decodeinstr.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L641:
          dec       word64 [Dframe+-216]
          mov       D0,	[Dframe+-216]
          cmp       D0,	0
          jnz       L640
L642:
L643:
          mov       D0,	14
          mov       D1,	[Dframe+-8]
          sub       D0,	D1
          mov       [Dframe+-224],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L646
L644:
          mov       D0,	L4051
          lea       D1,	[ax_disasm.decodeinstr.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L645:
          dec       word64 [Dframe+-224]
          mov       D0,	[Dframe+-224]
          cmp       D0,	0
          jnz       L644
L646:
          lea       D0,	[ax_disasm.deststr]
          lea       D1,	[ax_disasm.decodeinstr.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[ax_disasm.codeptr]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          lea       D0,	[ax_disasm.decodeinstr.str]
L494:
;-------------------------------------------------
          add       Dstack,	224
          pop       Dframe
          retn      16
;PROC GETOFFSETS ============================================================
ax_writeexe.getoffsets:
L4052:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	208
;-------------------------------------------------
          mov       D0,	392
          mov       [Dframe+-8],	D0
          mov       D0,	40
          mov       D1,	[ax_writeexe.nsections]
          imul2     D0,	D1
          add       [Dframe+-8],	D0
          mov       D0,	512
          push      D0
          push      word64 [Dframe+-8]
          call      ax_writeexe.roundtoblock
          mov       [Dframe+-8],	D0
          mov       D0,	4096
          mov       [Dframe+-16],	D0
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+40]
          mov       [Dframe+-72],	D0
          push      word64 [Dframe+-72]
          mov       D0,	[ax_decls.ss_code]
          push      D0
          call      ax_lib.bufferelemptr
          mov       [Dframe+-112],	D0
          jmp       L649
L648:
          mov       D0,	144
          lea       D1,	[Dframe+-112]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          inc       word64 [Dframe+-72]
L649:
          mov       D0,	[Dframe+-72]
          mov       D1,	7
          and       D0,	D1
          cmp       D0,	0
          jnz       L648
L650:
          mov       D0,	[Dframe+-72]
          mov       [Dframe+-88],	D0
          mov       D0,	[ax_writeexe.nimports]
          shl       D0,	3
          add       [Dframe+-72],	D0
          mov       D0,	[Dframe+-72]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+40],	D0
          mov       D0,	512
          push      D0
          push      word64 [Dframe+-72]
          call      ax_writeexe.roundtoblock
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+24],	D0
          mov       D0,	[Dframe+-72]
          mov       D1,	[Dframe+-88]
          sub       D0,	D1
          mov       D1,	16
          add       D0,	D1
          mov       D1,	[ax_decls.ss_code]
          push      D0
          push      D1
          call      ax_lib.buffercheck
L651:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.nsections]
          cmp       D0,	1
          jl        L654
L652:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L655
          mov       D0,	[Dframe+-8]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+32],	D0
L655:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L656
          mov       D0,	512
          mov       D1,	[Dframe+-8]
          lea       D2,	[ax_writeexe.sectiontable]
          mov       D3,	[Dframe+-24]
          imul2     D3,	72
          lea       D2,	[D2+D3-72]
          mov       D2,	[D2+40]
          add       D1,	D2
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          mov       [Dframe+-8],	D0
L656:
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+48],	D0
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L657
          mov       D0,	[Dframe+-16]
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+-24]
          mov       [Dframe+-40],	D0
L657:
          mov       D0,	4096
          mov       D1,	[Dframe+-16]
          lea       D2,	[ax_writeexe.sectiontable]
          mov       D3,	[Dframe+-24]
          imul2     D3,	72
          lea       D2,	[D2+D3-72]
          mov       D2,	[D2+40]
          add       D1,	D2
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          mov       [Dframe+-16],	D0
L653:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.nsections]
          cmp       D0,	D1
          jle       L652
L654:
          mov       D0,	[ax_writeexe.ndlls]
          mov       D1,	1
          add       D0,	D1
          mov       D1,	20
          imul2     D0,	D1
          add       [Dframe+-32],	D0
L658:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L661
L659:
          mov       D0,	[Dframe+-32]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+16],	D0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+8]
          mov       D1,	1
          add       D0,	D1
          shl       D0,	3
          add       [Dframe+-32],	D0
L660:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L659
L661:
          mov       D0,	[Dframe+-32]
          mov       [ax_writeexe.fileiatoffset],	D0
L662:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L665
L663:
          mov       D0,	[Dframe+-32]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+24],	D0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+8]
          mov       D1,	1
          add       D0,	D1
          shl       D0,	3
          add       [Dframe+-32],	D0
L664:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L663
L665:
          mov       D0,	[Dframe+-32]
          mov       D1,	[ax_writeexe.fileiatoffset]
          sub       D0,	D1
          mov       [ax_writeexe.fileiatsize],	D0
          mov       D0,	[Dframe+-32]
          mov       [Dframe+-48],	D0
L666:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.nimports]
          cmp       D0,	1
          jl        L669
L667:
          lea       D0,	[ax_writeexe.importtable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	3
          add       D0,	D1
          mov       [Dframe+-80],	D0
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L670
          inc       word64 [Dframe+-80]
L670:
          mov       D0,	[Dframe+-32]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+24],	D0
          mov       D0,	[Dframe+-80]
          add       [Dframe+-32],	D0
L668:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.nimports]
          cmp       D0,	D1
          jle       L667
L669:
          mov       D0,	4
          push      D0
          push      word64 [Dframe+-32]
          call      ax_writeexe.roundtoblock
          mov       [Dframe+-32],	D0
L671:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L674
L672:
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-80],	D0
          mov       D1,	1
          and       D0,	D1
          cmp       D0,	0
          jz        L675
          inc       word64 [Dframe+-80]
L675:
          mov       D0,	[Dframe+-32]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+40],	D0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+8]
          shl       D0,	2
          add       [Dframe+-32],	D0
          mov       D0,	[Dframe+-32]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+32],	D0
          mov       D0,	[Dframe+-80]
          add       [Dframe+-32],	D0
L673:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L672
L674:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	[Dframe+-40]
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+48]
          mov       [Dframe+-104],	D0
          mov       D0,	[Dframe+-32]
          mov       D1,	[Dframe+-104]
          sub       D0,	D1
          mov       [Dframe+-96],	D0
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	[Dframe+-40]
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+40],	D0
          mov       D0,	512
          push      D0
          push      word64 [Dframe+-96]
          call      ax_writeexe.roundtoblock
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	[Dframe+-40]
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+24],	D0
          mov       D0,	512
          mov       D1,	[Dframe+-8]
          mov       D2,	[Dframe+-96]
          add       D1,	D2
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          mov       [ax_writeexe.filesize],	D0
          mov       D0,	4096
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-32]
          mov       D3,	[Dframe+-104]
          sub       D2,	D3
          add       D1,	D2
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          mov       [ax_writeexe.imagesize],	D0
          push      word64 [Dframe+-96]
          call      mlib.pcm_allocz
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	[Dframe+-40]
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1],	D0
          mov       [Dframe+-120],	D0
          mov       [Dframe+-128],	D0
L676:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L679
L677:
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+16]
          mov       D1,	[Dframe+-128]
          mov       [D1],	A0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+24]
          mov       D1,	[Dframe+-128]
          mov       [D1+16],	A0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+32]
          mov       D1,	[Dframe+-128]
          mov       [D1+12],	A0
          add       word64 [Dframe+-128],	20
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+24]
          mov       [Dframe+-152],	D0
          mov       D0,	[Dframe+-120]
          mov       D1,	[Dframe+-152]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+-104]
          sub       D0,	D1
          mov       [Dframe+-136],	D0
          mov       D0,	[Dframe+-120]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       D1,	[D1+16]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+-104]
          sub       D0,	D1
          mov       [Dframe+-144],	D0
L680:
          mov       D0,	1
          mov       [Dframe+-56],	D0
          mov       D0,	[ax_writeexe.nimports]
          cmp       D0,	1
          jl        L683
L681:
          lea       D0,	[ax_writeexe.importtable]
          mov       D1,	[Dframe+-56]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+8]
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jnz       L684
          lea       D0,	[ax_writeexe.importtable]
          mov       D1,	[Dframe+-56]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+24]
          mov       D1,	[Dframe+-136]
          mov       [D1],	D0
          mov       D1,	[Dframe+-144]
          mov       [D1],	D0
          mov       D0,	[Dframe+-152]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[Dframe+-56]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+32],	D0
          mov       D0,	8
          add       [Dframe+-152],	D0
          add       word64 [Dframe+-144],	8
          add       word64 [Dframe+-136],	8
L684:
L682:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          mov       D1,	[ax_writeexe.nimports]
          cmp       D0,	D1
          jle       L681
L683:
L678:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L677
L679:
L685:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.nimports]
          cmp       D0,	1
          jl        L688
L686:
          mov       D0,	[Dframe+-120]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       D1,	[D1+24]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+-104]
          sub       D0,	D1
          mov       [Dframe+-160],	D0
          lea       D0,	[Dframe+-160]
          mov       D1,	2
          add       [D0],	D1
          lea       D0,	[ax_writeexe.importtable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+16]
          mov       D1,	[Dframe+-160]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L687:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.nimports]
          cmp       D0,	D1
          jle       L686
L688:
          mov       D0,	[Dframe+-104]
          mov       [Dframe+-176],	D0
L689:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L692
L690:
          mov       D0,	[Dframe+-120]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       D1,	[D1+40]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+-104]
          sub       D0,	D1
          mov       [Dframe+-168],	D0
L693:
          mov       D0,	1
          mov       [Dframe+-56],	D0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+8]
          mov       [Dframe+-184],	D0
          cmp       D0,	1
          jl        L696
L694:
          mov       D0,	[Dframe+-176]
          mov       D1,	[Dframe+-168]
          mov       [D1],	A0
          add       word64 [Dframe+-168],	4
L695:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          mov       D1,	[Dframe+-184]
          cmp       D0,	D1
          jle       L694
L696:
          mov       D0,	20
          add       [Dframe+-176],	D0
          mov       D0,	[Dframe+-120]
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       D1,	[D1+32]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+-104]
          sub       D0,	D1
          mov       [Dframe+-160],	D0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-24]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0]
          mov       D1,	[Dframe+-160]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L691:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L690
L692:
          push      word64 [Dframe+-88]
          mov       D0,	[ax_decls.ss_code]
          push      D0
          call      ax_lib.bufferelemptr
          mov       [Dframe+-192],	D0
          mov       D0,	0
          mov       D1,	[ax_decls.ss_code]
          push      D0
          push      D1
          call      ax_lib.bufferelemptr
          mov       [Dframe+-200],	D0
L697:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_writeexe.nimports]
          cmp       D0,	1
          jl        L700
L698:
          mov       D0,	[Dframe+-192]
          mov       D1,	[Dframe+-200]
          sub       D0,	D1
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+40],	D0
          mov       D0,	72
          lea       D1,	[Dframe+-192]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	255
          lea       D1,	[Dframe+-192]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	36
          lea       D1,	[Dframe+-192]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	37
          lea       D1,	[Dframe+-192]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	4194304
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[Dframe+-24]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       D1,	[D1+32]
          add       D0,	D1
          mov       [Dframe+-208],	D0
          mov       D1,	[Dframe+-192]
          mov       [D1],	A0
          lea       D0,	[Dframe+-192]
          mov       D1,	4
          add       [D0],	D1
L699:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_writeexe.nimports]
          cmp       D0,	D1
          jle       L698
L700:
L647:
;-------------------------------------------------
          add       Dstack,	208
          pop       Dframe
          ret       
;PROC WRITESECTIONDATA ============================================================
ax_writeexe.writesectiondata:
L4053:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L703
          mov       D1,	3
          cmp       D0,	D1
          jz        L704
          jmp       L705
L703:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+40]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_writeexe.writerecordx
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+40]
          cmp       D0,	D1
          jle       L706
          lea       D0,	[ax_writeexe.dataptr]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+24]
          mov       D2,	[Dframe+16]
          mov       D2,	[D2+40]
          sub       D1,	D2
          add       [D0],	D1
L706:
          jmp       L702
L704:
          jmp       L702
L705:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+24]
          mov       D1,	0
          mov       D2,	[Dframe+16]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          call      ax_lib.bufferelemptr
          push      D0
          call      ax_writeexe.writerecordx
L702:
L701:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC WRITESECTIONHEADER ============================================================
ax_writeexe.writesectionheader:
L4054:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	48
;-------------------------------------------------
          mov       D0,	40
          mov       D1,	0
          lea       D2,	[Dframe+-40]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          lea       D1,	[Dframe+-40]
          lea       D1,	[D1]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+40]
          lea       D1,	[Dframe+-40]
          mov       [D1+8],	A0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+48]
          lea       D1,	[Dframe+-40]
          mov       [D1+12],	A0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+32]
          lea       D1,	[Dframe+-40]
          mov       [D1+20],	A0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+24]
          lea       D1,	[Dframe+-40]
          mov       [D1+16],	A0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L709
          mov       D1,	2
          cmp       D0,	D1
          jz        L710
          mov       D1,	1
          cmp       D0,	D1
          jz        L711
          mov       D1,	5
          cmp       D0,	D1
          jz        L712
          jmp       L713
L709:
          mov       D0,	3226468480
          lea       D1,	[Dframe+-40]
          mov       [D1+36],	A0
          jmp       L708
L710:
          mov       D0,	3226468416
          lea       D1,	[Dframe+-40]
          mov       [D1+36],	A0
          jmp       L708
L711:
          mov       D0,	1615855648
          lea       D1,	[Dframe+-40]
          mov       [D1+36],	A0
          jmp       L708
L712:
          mov       D0,	3224371264
          lea       D1,	[Dframe+-40]
          mov       [D1+36],	A0
          jmp       L708
L713:
L708:
          mov       D0,	40
          lea       D1,	[Dframe+-40]
          push      D0
          push      D1
          call      ax_writeexe.writerecordx
L707:
;-------------------------------------------------
          add       Dstack,	48
          pop       Dframe
          retn      8
;PROC WRITEOPTHEADER ============================================================
ax_writeexe.writeoptheader:
L4055:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	240
;-------------------------------------------------
          mov       D0,	240
          mov       D1,	0
          lea       D2,	[Dframe+-240]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	523
          lea       D1,	[Dframe+-240]
          mov       [D1],	W0
          mov       D0,	1
          lea       D1,	[Dframe+-240]
          mov       [D1+2],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-240]
          mov       [D1+3],	B0
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+24]
          lea       D1,	[Dframe+-240]
          mov       [D1+4],	A0
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	2
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+24]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	4
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       D1,	[D1+24]
          add       D0,	D1
          lea       D1,	[Dframe+-240]
          mov       [D1+8],	A0
          mov       D0,	512
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	3
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       D1,	[D1+40]
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          lea       D1,	[Dframe+-240]
          mov       [D1+12],	A0
          mov       D0,	[ax_writeexe.stentrypoint]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L715
          mov       D0,	[ax_writeexe.stentrypoint2]
          mov       [ax_writeexe.stentrypoint],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L716
          mov       D0,	[ax_writeexe.stentrypoint3]
          mov       [ax_writeexe.stentrypoint],	D0
          cmp       D0,	0
          jz        L717
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4056
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L717:
L716:
L715:
          mov       D0,	[ax_writeexe.stentrypoint]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L718
          mov       D0,	[ax_writeexe.userentrypoint]
          cmp       D0,	0
          jz        L719
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[ax_writeexe.userentrypoint]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4057
          push      D0
          call      ax_lib.gerror
          jmp       L720
L719:
          mov       D0,	L4058
          push      D0
          call      ax_lib.gerror
L720:
L718:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+48]
          mov       D1,	[ax_writeexe.stentrypoint]
          movsx     D1,	word32 [D1+24]
          add       D0,	D1
          lea       D1,	[Dframe+-240]
          mov       [D1+16],	A0
          mov       D0,	4096
          lea       D1,	[Dframe+-240]
          mov       [D1+20],	A0
          mov       D0,	4194304
          lea       D1,	[Dframe+-240]
          mov       [D1+24],	D0
          mov       D0,	4096
          lea       D1,	[Dframe+-240]
          mov       [D1+32],	A0
          mov       D0,	512
          lea       D1,	[Dframe+-240]
          mov       [D1+36],	A0
          mov       D0,	4
          lea       D1,	[Dframe+-240]
          mov       [D1+40],	W0
          mov       D0,	0
          lea       D1,	[Dframe+-240]
          mov       [D1+42],	W0
          mov       D0,	5
          lea       D1,	[Dframe+-240]
          mov       [D1+48],	W0
          mov       D0,	2
          lea       D1,	[Dframe+-240]
          mov       [D1+50],	W0
          mov       D0,	[ax_writeexe.imagesize]
          lea       D1,	[Dframe+-240]
          mov       [D1+56],	A0
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+32]
          lea       D1,	[Dframe+-240]
          mov       [D1+60],	A0
          mov       D0,	3
          lea       D1,	[Dframe+-240]
          mov       [D1+68],	W0
          mov       D0,	4194304
          lea       D1,	[Dframe+-240]
          mov       [D1+72],	D0
          mov       D0,	2097152
          lea       D1,	[Dframe+-240]
          mov       [D1+80],	D0
          mov       D0,	1048576
          lea       D1,	[Dframe+-240]
          mov       [D1+88],	D0
          mov       D0,	4096
          lea       D1,	[Dframe+-240]
          mov       [D1+96],	D0
          mov       D0,	16
          lea       D1,	[Dframe+-240]
          mov       [D1+108],	A0
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	4
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+48]
          lea       D1,	[Dframe+-240]
          mov       [D1+120],	A0
          mov       D0,	128
          lea       D1,	[Dframe+-240]
          mov       [D1+124],	A0
          mov       D0,	[ax_writeexe.fileiatoffset]
          lea       D1,	[Dframe+-240]
          mov       [D1+208],	A0
          mov       D0,	[ax_writeexe.fileiatsize]
          lea       D1,	[Dframe+-240]
          mov       [D1+212],	A0
          mov       D0,	240
          lea       D1,	[Dframe+-240]
          push      D0
          push      D1
          call      ax_writeexe.writerecordx
L714:
;-------------------------------------------------
          add       Dstack,	240
          pop       Dframe
          ret       
;PROC WRITEFILEHEADER ============================================================
ax_writeexe.writefileheader:
L4059:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	20
          mov       D1,	0
          lea       D2,	[Dframe+-24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	34404
          lea       D1,	[Dframe+-24]
          mov       [D1],	W0
          mov       D0,	[ax_writeexe.nsections]
          lea       D1,	[Dframe+-24]
          mov       [D1+2],	W0
          mov       D0,	240
          lea       D1,	[Dframe+-24]
          mov       [D1+16],	W0
          mov       D0,	559
          lea       D1,	[Dframe+-24]
          mov       [D1+18],	W0
          mov       D0,	20
          lea       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      ax_writeexe.writerecordx
L721:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          ret       
;PROC WRITEPADDING ============================================================
ax_writeexe.writepadding:
L4060:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_writeexe.datastart]
          mov       D1,	[Dframe+16]
          lea       D0,	[D0+D1]
          mov       [ax_writeexe.dataptr],	D0
L722:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC WRITEPESIG ============================================================
ax_writeexe.writepesig:
L4061:
;-------------------------------------------------
          mov       D0,	80
          lea       D1,	[ax_writeexe.dataptr]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	69
          lea       D1,	[ax_writeexe.dataptr]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	0
          lea       D1,	[ax_writeexe.dataptr]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          mov       D0,	0
          lea       D1,	[ax_writeexe.dataptr]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
L723:
;-------------------------------------------------
          ret       
;PROC WRITEDOSSTUB ============================================================
ax_writeexe.writedosstub:
L4062:
;-------------------------------------------------
          mov       D0,	128
          lea       D1,	[ax_writeexe.writedosstub.stubdata]
          push      D0
          push      D1
          call      ax_writeexe.writerecordx
L724:
;-------------------------------------------------
          ret       
;PROC WRITERECORDX ============================================================
ax_writeexe.writerecordx:
L4063:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[ax_writeexe.dataptr]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[ax_writeexe.dataptr]
          mov       D1,	[Dframe+24]
          add       [D0],	D1
L725:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC RELOCDATA ============================================================
ax_writeexe.relocdata:
L4064:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	72
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_lib.bufferelemptr
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+56]
          mov       [Dframe+-16],	D0
          jmp       L728
L727:
          mov       D0,	[ax_decls.ss_symboltable]
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1+24]
          mov       D0,	[D0+D1*8-8]
          mov       [Dframe+-40],	D0
          movsx     D0,	word32 [D0+32]
          mov       [Dframe+-56],	D0
          lea       D0,	[ax_writeexe.importtable]
          mov       D1,	[Dframe+-56]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+40]
          mov       [Dframe+-64],	D0
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0+8]
          mov       D1,	4
          cmp       D0,	D1
          jz        L731
          mov       D1,	2
          cmp       D0,	D1
          jz        L732
          mov       D1,	1
          cmp       D0,	D1
          jz        L732
          jmp       L733
L731:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+36]
          mov       D1,	21
          cmp       D0,	D1
          jz        L734
          mov       D0,	L4065
          push      D0
          call      ax_lib.gerror
L734:
          mov       D0,	[Dframe+-64]
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1+16]
          sub       D0,	D1
          mov       D1,	4
          sub       D0,	D1
          mov       D1,	[Dframe+-24]
          mov       D2,	[Dframe+-16]
          mov       D2,	[D2+16]
          lea       D1,	[D1+D2]
          mov       [D1],	A0
          jmp       L730
L732:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+36]
          mov       D1,	21
          cmp       D0,	D1
          jnz       L735
          mov       D0,	4194304
          mov       D1,	[Dframe+-64]
          add       D0,	D1
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       D1,	[D1+48]
          add       D0,	D1
          mov       D1,	[Dframe+-24]
          mov       D2,	[Dframe+-16]
          mov       D2,	[D2+16]
          lea       D1,	[D1+D2]
          mov       [D1],	A0
          jmp       L736
L735:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+42]
          mov       D1,	3
          cmp       D0,	D1
          jz        L738
          mov       D1,	2
          cmp       D0,	D1
          jz        L739
          mov       D1,	1
          cmp       D0,	D1
          jz        L740
          jmp       L741
L738:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	3
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       [Dframe+-8],	D0
          jmp       L737
L739:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	2
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       [Dframe+-8],	D0
          jmp       L737
L740:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       [Dframe+-8],	D0
          jmp       L737
L741:
L737:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1+16]
          lea       D0,	[D0+D1]
          mov       [Dframe+-32],	D0
          movzx     D0,	word32 [D0]
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+48]
          add       D0,	D1
          mov       D1,	4194304
          add       D0,	D1
          mov       D1,	[Dframe+-32]
          mov       [D1],	A0
L736:
          jmp       L730
L733:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1+8]
          mov       D1,	[D1*8+ax_objdecls.relocnames]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4066
          push      D0
          call      ax_lib.gerror
L730:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0]
          mov       [Dframe+-16],	D0
L728:
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jnz       L727
L729:
L726:
;-------------------------------------------------
          add       Dstack,	72
          pop       Dframe
          retn      8
;PROC SCANST ============================================================
ax_writeexe.scanst:
L4067:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
L743:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.ss_nsymbols]
          cmp       D0,	1
          jl        L746
L744:
          mov       D0,	[ax_decls.ss_symboltable]
          mov       D1,	[Dframe+-8]
          mov       D0,	[D0+D1*8-8]
          mov       [Dframe+-24],	D0
          movzx     D0,	byte [D0+36]
          mov       D1,	21
          cmp       D0,	D1
          jz        L748
          mov       D1,	22
          cmp       D0,	D1
          jz        L749
          jmp       L750
L748:
          mov       D0,	[ax_writeexe.nimports]
          mov       D1,	3000
          cmp       D0,	D1
          jl        L751
          mov       D0,	L4068
          push      D0
          call      ax_lib.gerror
L751:
          inc       word64 [ax_writeexe.nimports]
          mov       D0,	[Dframe+-24]
          movsx     D0,	word32 [D0+68]
          lea       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-24]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          call      ax_writeexe.extractlibname
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[ax_writeexe.nimports]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+-32]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[ax_writeexe.nimports]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+16],	D0
          mov       D0,	[Dframe+-24]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[ax_writeexe.nimports]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1],	D0
          mov       D0,	[ax_writeexe.nimports]
          mov       D1,	[Dframe+-24]
          mov       [D1+32],	A0
          jmp       L747
L749:
          mov       D0,	[ax_writeexe.userentrypoint]
          cmp       D0,	0
          jz        L752
          mov       D0,	[ax_writeexe.userentrypoint]
          mov       D1,	[Dframe+-24]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      mlib.eqstring
          cmp       D0,	0
          jz        L753
          mov       D0,	[Dframe+-24]
          mov       [ax_writeexe.stentrypoint],	D0
L753:
          jmp       L754
L752:
          mov       D0,	L4069
          mov       D1,	[Dframe+-24]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      mlib.eqstring
          cmp       D0,	0
          jz        L756
          mov       D0,	[Dframe+-24]
          mov       [ax_writeexe.stentrypoint],	D0
          jmp       L755
L756:
          mov       D0,	L4070
          mov       D1,	[Dframe+-24]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      mlib.eqstring
          cmp       D0,	0
          jz        L757
          mov       D0,	[Dframe+-24]
          mov       [ax_writeexe.stentrypoint2],	D0
L757:
L755:
L754:
          jmp       L747
L750:
L747:
L745:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.ss_nsymbols]
          cmp       D0,	D1
          jle       L744
L746:
L742:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          ret       
;PROC EXTRACTLIBNAME ============================================================
ax_writeexe.extractlibname:
L4071:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	544
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-16],	D0
;reenter
L759:
          mov       D0,	[Dframe+16]
          mov       [Dframe+-8],	D0
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          jmp       L761
L760:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	46
          cmp       D0,	D1
          jnz       L763
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          sub       D0,	D1
          mov       D1,	[Dframe+16]
          lea       D2,	[Dframe+-272]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[Dframe+-272]
          mov       D2,	[Dframe+-8]
          mov       D3,	[Dframe+16]
          sub       D2,	D3
          mov       D3,	1
          add       D2,	D3
          mov       [D1+D2-1],	B0
          mov       D0,	L4072
          lea       D1,	[Dframe+-272]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L764:
          mov       D0,	1
          mov       [Dframe+-536],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L767
L765:
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-536]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0]
          lea       D1,	[Dframe+-272]
          push      D0
          push      D1
          call      mlib.eqstring
          cmp       D0,	0
          jz        L768
          mov       D0,	[Dframe+-536]
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+24]
          mov       D1,	[D1]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          lea       D0,	[D0+8]
          inc       word64 [D0]
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jz        L769
          mov       D0,	[Dframe+-16]
          jmp       L770
L769:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
L770:
          add       Dstack,	544
          pop       Dframe
          retn      24
L768:
L766:
          mov       D0,	[Dframe+-536]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-536],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L765
L767:
          mov       D0,	[ax_writeexe.ndlls]
          mov       D1,	50
          cmp       D0,	D1
          jl        L771
          mov       D0,	L4073
          push      D0
          call      ax_lib.gerror
L771:
          lea       D0,	[ax_writeexe.ndlls]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	[Dframe+24]
          mov       [D0],	D1
          lea       D0,	[Dframe+-272]
          push      D0
          call      mlib.pcm_copyheapstring
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+24]
          mov       D2,	[D2]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1],	D0
          mov       D0,	1
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+24]
          mov       D2,	[D2]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jz        L772
          mov       D0,	[Dframe+-16]
          jmp       L773
L772:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
L773:
          add       Dstack,	544
          pop       Dframe
          retn      24
L763:
          inc       word64 [Dframe+-8]
L761:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L760
L762:
L774:
          mov       D0,	1
          mov       [Dframe+-536],	D0
          mov       D0,	[ax_decls.nsearchlibs]
          cmp       D0,	1
          jl        L778
L775:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-536]
          mov       D1,	[D1*8+ax_writeexe.libinsttable-8]
          push      D0
          push      D1
          call      oswindows.os_getdllprocaddr
          cmp       D0,	0
          jz        L779
          mov       D0,	[Dframe+-536]
          mov       [Dframe+-544],	D0
          jmp       L777
L779:
L776:
          mov       D0,	[Dframe+-536]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-536],	D0
          mov       D1,	[ax_decls.nsearchlibs]
          cmp       D0,	D1
          jle       L775
L778:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[Dframe+32]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4074
          push      D0
          call      ax_lib.gerror
L777:
          mov       D0,	[Dframe+-544]
          mov       D0,	[D0*8+ax_writeexe.libnotable-8]
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          cmp       D0,	0
          jz        L780
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+24]
          mov       D1,	[D1]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          lea       D0,	[D0+8]
          inc       word64 [D0]
          mov       D0,	[Dframe+16]
          add       Dstack,	544
          pop       Dframe
          retn      24
L780:
          mov       D0,	[Dframe+-544]
          mov       D0,	[D0*8+ax_decls.searchlibs-8]
          lea       D1,	[Dframe+-272]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4075
          lea       D1,	[Dframe+-272]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[ax_writeexe.ndlls]
          mov       D1,	50
          cmp       D0,	D1
          jl        L781
          mov       D0,	L4076
          push      D0
          call      ax_lib.gerror
L781:
          lea       D0,	[ax_writeexe.ndlls]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	[Dframe+24]
          mov       [D0],	D1
          lea       D0,	[Dframe+-272]
          push      D0
          call      mlib.pcm_copyheapstring
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+24]
          mov       D2,	[D2]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1],	D0
          mov       D0,	1
          lea       D1,	[ax_writeexe.dlltable]
          mov       D2,	[Dframe+24]
          mov       D2,	[D2]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          lea       D1,	[ax_writeexe.libnotable]
          mov       D2,	[Dframe+-544]
          mov       [D1+D2*8-8],	D0
          mov       D0,	[Dframe+16]
L758:
;-------------------------------------------------
          add       Dstack,	544
          pop       Dframe
          retn      24
;PROC SHOWSECTIONS ============================================================
ax_writeexe.showsections:
L4077:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	80
;-------------------------------------------------
          mov       D0,	L4078
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L783:
          mov       D0,	1
          mov       [Dframe+-80],	D0
          mov       D0,	[ax_writeexe.nsections]
          cmp       D0,	1
          jl        L786
L784:
          lea       D0,	[Dframe+-72]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	[Dframe+-80]
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       D3,	9
L4079:
          mov       D2,	[D1]
          mov       [D0],	D2
          add       D0,	8
          add       D1,	8
          dec       D3
          jnz       L4079
          mov       D0,	L4080
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          push      word64 [Dframe+-80]
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_strint
          mov       D0,	L4081
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+8]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4082
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+16]
          mov       D0,	[D0*8+ax_tables.segmentnames-8]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4083
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+32]
          mov       D1,	L4084
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+24]
          mov       D1,	L4085
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+48]
          mov       D1,	L4086
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+40]
          mov       D1,	L4087
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0+64]
          mov       D1,	L4088
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-72]
          mov       D0,	[D0]
          mov       D1,	L4089
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L785:
          mov       D0,	[Dframe+-80]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-80],	D0
          mov       D1,	[ax_writeexe.nsections]
          cmp       D0,	D1
          jle       L784
L786:
L782:
;-------------------------------------------------
          add       Dstack,	80
          pop       Dframe
          ret       
;PROC ROUNDTOBLOCK ============================================================
ax_writeexe.roundtoblock:
L4090:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       D2,	1
          sub       D1,	D2
          and       D0,	D1
          mov       D1,	0
          cmp       D0,	D1
          jnz       L788
          mov       D0,	[Dframe+16]
          pop       Dframe
          retn      16
L788:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          mov       D3,	[Dframe+24]
          mov       D4,	1
          sub       D3,	D4
          and       D2,	D3
          sub       D1,	D2
          add       D0,	D1
L787:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC SHOWIMPORTTABLE ============================================================
ax_writeexe.showimporttable:
L4091:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	360
;-------------------------------------------------
          mov       D0,	L4092
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L790:
          mov       D0,	1
          mov       [Dframe+-360],	D0
          mov       D0,	[ax_writeexe.ndlls]
          cmp       D0,	1
          jl        L793
L791:
          push      word64 [Dframe+-360]
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_strint
          mov       D0,	L4093
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-360]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4094
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-360]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+8]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strint
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-360]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+16]
          mov       D1,	L4095
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-360]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+24]
          mov       D1,	L4096
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[ax_writeexe.dlltable]
          mov       D1,	[Dframe+-360]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0+32]
          mov       D1,	L4097
          push      D0
          push      D1
          call      ax_writeexe.gs_value
L792:
          mov       D0,	[Dframe+-360]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-360],	D0
          mov       D1,	[ax_writeexe.ndlls]
          cmp       D0,	D1
          jle       L791
L793:
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	L4098
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L794:
          mov       D0,	1
          mov       [Dframe+-360],	D0
          mov       D0,	[ax_writeexe.nimports]
          cmp       D0,	1
          jl        L797
L795:
          lea       D0,	[Dframe+-352]
          lea       D1,	[ax_writeexe.importtable]
          mov       D2,	[Dframe+-360]
          imul2     D2,	48
          lea       D1,	[D1+D2-48]
          mov       D3,	6
L4099:
          mov       D2,	[D1]
          mov       [D0],	D2
          add       D0,	8
          add       D1,	8
          dec       D3
          jnz       L4099
          push      word64 [Dframe+-360]
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_strint
          mov       D0,	L4100
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[Dframe+-352]
          mov       D0,	[D0+8]
          cmp       D0,	0
          jz        L798
          lea       D0,	[Dframe+-352]
          mov       D0,	[D0+16]
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4101
          mov       D1,	16
          lea       D2,	[Dframe+-256]
          push      D0
          push      D1
          push      D2
          call      mlib.ipadstr
          lea       D0,	[Dframe+-256]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4102
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[ax_writeexe.dlltable]
          lea       D1,	[Dframe+-352]
          mov       D1,	[D1+8]
          imul2     D1,	48
          lea       D0,	[D0+D1-48]
          mov       D0,	[D0]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4103
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          lea       D0,	[Dframe+-352]
          mov       D0,	[D0+32]
          mov       D1,	L4104
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-352]
          mov       D0,	[D0+40]
          mov       D1,	L4105
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          lea       D0,	[Dframe+-352]
          mov       D0,	[D0+24]
          mov       D1,	L4106
          push      D0
          push      D1
          call      ax_writeexe.gs_value
          jmp       L799
L798:
          lea       D0,	[Dframe+-352]
          mov       D0,	[D0+16]
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4107
          mov       D1,	20
          lea       D2,	[Dframe+-256]
          push      D0
          push      D1
          push      D2
          call      mlib.ipadstr
          lea       D0,	[Dframe+-256]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4108
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L799:
L796:
          mov       D0,	[Dframe+-360]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-360],	D0
          mov       D1,	[ax_writeexe.nimports]
          cmp       D0,	D1
          jle       L795
L797:
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L789:
;-------------------------------------------------
          add       Dstack,	360
          pop       Dframe
          ret       
;PROC SHOWSYMBOLTABLE2 ============================================================
ax_writeexe.showsymboltable2:
L4109:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	L4110
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L801:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.ss_nsymbols]
          cmp       D0,	1
          jl        L804
L802:
          push      word64 [Dframe+-8]
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_strint
          mov       D0,	L4111
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[ax_decls.ss_symboltable]
          mov       D1,	[Dframe+-8]
          mov       D0,	[D0+D1*8-8]
          mov       D0,	[D0]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L803:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.ss_nsymbols]
          cmp       D0,	D1
          jle       L802
L804:
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L800:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC GS_VALUE ============================================================
ax_writeexe.gs_value:
L4112:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	256
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4113
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4114
          mov       D1,	20
          lea       D2,	[Dframe+-256]
          push      D0
          push      D1
          push      D2
          call      mlib.ipadstr
          lea       D0,	[Dframe+-256]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[Dframe+-256]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4115
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	L4117
          push      D0
          mov       D0,	[Dframe+24]
          push      D0
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-256]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L805:
;-------------------------------------------------
          add       Dstack,	256
          pop       Dframe
          retn      16
;PROC SHOWSECTIONRELOCS2 ============================================================
ax_writeexe.showsectionrelocs2:
L4118:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	L4119
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+16]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4120
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          push      word64 [Dframe+32]
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_strint
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	[Dframe+24]
          mov       [Dframe+-8],	D0
          jmp       L808
L807:
          mov       D0,	L4121
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+8]
          mov       D0,	[D0*8+ax_objdecls.relocnames]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4122
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+16]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strint
          mov       D0,	L4123
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+24]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strint
          mov       D0,	L4124
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[ax_decls.ss_symboltable]
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+24]
          mov       D0,	[D0+D1*8-8]
          mov       D0,	[D0]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
L808:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L807
L809:
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L806:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      24
;PROC SHOWSECTIONCODE ============================================================
ax_writeexe.showsectioncode:
L4125:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	72
;-------------------------------------------------
          mov       D0,	L4126
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+40]
          mov       [Dframe+-32],	D0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_lib.bufferelemptr
          mov       [Dframe+-8],	D0
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-32]
          lea       D0,	[D0+D1]
          mov       [Dframe+-16],	D0
          mov       D0,	4194304
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+48]
          add       D0,	D1
          mov       [Dframe+-72],	D0
          jmp       L812
L811:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-24]
          sub       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+-72]
          mov       D1,	[Dframe+-40]
          lea       D0,	[D0+D1]
          lea       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_disasm.decodeinstr
          mov       [Dframe+-48],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L814
          jmp       L813
L814:
          lea       D0,	[Dframe+-64]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4127
          push      D0
          mov       D0,	[Dframe+-40]
          push      D0
          call      [L3658]	!print_i64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4128
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-64]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+-48]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L812:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-16]
          cmp       D0,	D1
          jb        L811
L813:
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L810:
;-------------------------------------------------
          add       Dstack,	72
          pop       Dframe
          retn      8
;PROC SHOWSECTIONDATA ============================================================
ax_writeexe.showsectiondata:
L4129:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	312
;-------------------------------------------------
          mov       D0,	L4130
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4131
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+40]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strint
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	0
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L816
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_lib.bufferelemptr
          mov       [Dframe+-296],	D0
          jmp       L817
L816:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-296],	D0
L817:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+40]
          mov       [Dframe+-24],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-160]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	4194304
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+48]
          add       D0,	D1
          mov       [Dframe+-304],	D0
          lea       D0,	[Dframe+-288]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4132
          push      D0
          mov       D0,	[Dframe+-304]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4133
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-288]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
L818:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+-24]
          cmp       D0,	1
          jl        L821
L819:
          lea       D0,	[Dframe+-296]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-32],	D1
          lea       D0,	[Dframe+-288]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4134
          push      D0
          mov       D0,	[Dframe+-32]
          push      D0
          call      [L3658]	!print_i64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4135
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-288]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	32
          mov       D1,	[Dframe+-32]
          cmp       D0,	D1
          jg        L822
          mov       D0,	[Dframe+-32]
          mov       D1,	127
          cmp       D0,	D1
          jg        L822
          mov       D0,	[Dframe+-32]
          lea       D1,	[Dframe+-288]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-288]
          mov       D2,	2
          mov       [D1+D2-1],	B0
          lea       D0,	[Dframe+-288]
          lea       D1,	[Dframe+-160]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L823
L822:
          mov       D0,	L4136
          lea       D1,	[Dframe+-160]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L823:
          lea       D0,	[Dframe+-16]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	16
          cmp       D1,	D0
          jz        L825
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jnz       L824
L825:
          mov       D0,	[Dframe+-16]
          mov       D1,	16
          cmp       D0,	D1
          jge       L826
L827:
          mov       D0,	16
          mov       D1,	[Dframe+-16]
          sub       D0,	D1
          mov       [Dframe+-312],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L830
L828:
          mov       D0,	L4137
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4138
          lea       D1,	[Dframe+-160]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L829:
          dec       word64 [Dframe+-312]
          mov       D0,	[Dframe+-312]
          cmp       D0,	0
          jnz       L828
L830:
L826:
          mov       D0,	L4139
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[Dframe+-160]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4140
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          mov       D0,	0
          mov       [Dframe+-16],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-160]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          lea       D0,	[Dframe+-304]
          mov       D1,	16
          add       [D0],	D1
          lea       D0,	[Dframe+-288]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4141
          push      D0
          mov       D0,	[Dframe+-304]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4142
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-288]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
L824:
L820:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jle       L819
L821:
          mov       D0,	[Dframe+-16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L831
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L831:
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jz        L832
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
L832:
L815:
;-------------------------------------------------
          add       Dstack,	312
          pop       Dframe
          retn      8
;PROC SHOWSSDATA ============================================================
ax_writeexe.showssdata:
L4143:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L834
          mov       D0,	L4144
          jmp       L835
L834:
          mov       D0,	L4145
L835:
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          call      ax_writeexe.showsections
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          push      word64 [ax_decls.ss_nidatarelocs]
          mov       D0,	[ax_decls.ss_idatarelocs]
          mov       D1,	L4146
          push      D0
          push      D1
          call      ax_writeexe.showsectionrelocs2
          push      word64 [ax_decls.ss_ncoderelocs]
          mov       D0,	[ax_decls.ss_coderelocs]
          mov       D1,	L4147
          push      D0
          push      D1
          call      ax_writeexe.showsectionrelocs2
          mov       D0,	L4148
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          push      word64 [ax_decls.ss_zdatalen]
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_strint
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	2
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.showsectiondata
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.showsectioncode
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L836
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	4
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.showsectiondata
L836:
          call      ax_writeexe.showsymboltable2
          call      ax_writeexe.showimporttable
          mov       D0,	L4149
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L833:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC INITSECTIONTABLE ============================================================
ax_writeexe.initsectiontable::
L4150:
;-------------------------------------------------
          mov       D0,	L4151
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+8],	D0
          mov       D0,	1
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+16],	D0
          mov       D0,	[ax_decls.ss_code]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1],	D0
          mov       D0,	[ax_decls.ss_code]
          push      D0
          call      ax_lib.bufferlength
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+40],	D0
          mov       D0,	[ax_decls.ss_idata]
          push      D0
          call      ax_lib.bufferlength
          mov       D1,	0
          cmp       D0,	D1
          jnz       L838
          mov       D0,	0
          mov       D1,	[ax_decls.ss_idata]
          push      D0
          push      D1
          call      ax_lib.addqword
L838:
          mov       D0,	L4152
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+8],	D0
          mov       D0,	2
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+16],	D0
          mov       D0,	[ax_decls.ss_idata]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1],	D0
          mov       D0,	[ax_decls.ss_idata]
          push      D0
          call      ax_lib.bufferlength
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+40],	D0
          mov       D0,	512
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       D1,	[D1+40]
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+24],	D0
          mov       D0,	[ax_decls.ss_nidatarelocs]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+64],	D0
          mov       D0,	[ax_decls.ss_idatarelocs]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	2
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+56],	D0
          mov       D0,	[ax_decls.ss_zdatalen]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L839
          mov       D0,	16
          mov       [ax_decls.ss_zdatalen],	D0
L839:
          mov       D0,	L4153
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	3
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+8],	D0
          mov       D0,	3
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	3
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+16],	D0
          mov       D0,	[ax_decls.ss_zdatalen]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	3
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+40],	D0
          mov       D0,	512
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       D1,	[D1+40]
          push      D0
          push      D1
          call      ax_writeexe.roundtoblock
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+24],	D0
          mov       D0,	[ax_decls.ss_ncoderelocs]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+64],	D0
          mov       D0,	[ax_decls.ss_coderelocs]
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	1
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+56],	D0
          mov       D0,	L4154
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	4
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+8],	D0
          mov       D0,	5
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	4
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+16],	D0
          mov       D0,	0
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	4
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+40],	D0
          mov       D0,	0
          lea       D1,	[ax_writeexe.sectiontable]
          mov       D2,	4
          imul2     D2,	72
          lea       D1,	[D1+D2-72]
          mov       [D1+24],	D0
          mov       D0,	4
          mov       [ax_writeexe.nsections],	D0
L837:
;-------------------------------------------------
          ret       
;PROC WRITESSDATA ============================================================
ax_writeexe.writessdata::
L4155:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_init
          push      word64 [Dframe+16]
          call      ax_writeexe.showssdata
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_line
          mov       D0,	[ax_lib.dest]
L840:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC LOADLIBS ============================================================
ax_writeexe.loadlibs:
L4156:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	328
;-------------------------------------------------
L842:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_decls.nsearchlibs]
          cmp       D0,	1
          jl        L845
L843:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0*8+ax_decls.searchlibs-8]
          lea       D1,	[Dframe+-328]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4157
          lea       D1,	[Dframe+-328]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-328]
          push      D0
          call      oswindows.os_getdllinst
          mov       [Dframe+-16],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L846
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1*8+ax_decls.searchlibs-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4158
          push      D0
          call      ax_lib.gerror
L846:
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_writeexe.libinsttable]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2*8-8],	D0
          lea       D0,	[Dframe+-328]
          push      D0
          call      mlib.pcm_copyheapstring
          lea       D1,	[ax_writeexe.libinstnames]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2*8-8],	D0
L844:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[ax_decls.nsearchlibs]
          cmp       D0,	D1
          jle       L843
L845:
L841:
;-------------------------------------------------
          add       Dstack,	328
          pop       Dframe
          ret       
;PROC GENEXE ============================================================
ax_writeexe.genexe::
L4159:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       [ax_writeexe.userentrypoint],	D0
          call      ax_writeexe.loadlibs
          call      ax_writeexe.scanst
          call      ax_writeexe.getoffsets
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.relocdata
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	2
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.relocdata
L847:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC WRITEEXE ============================================================
ax_writeexe.writeexe::
L4160:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	288
;-------------------------------------------------
          push      word64 [ax_writeexe.filesize]
          call      mlib.pcm_allocz
          mov       [ax_writeexe.dataptr],	D0
          mov       [ax_writeexe.datastart],	D0
          call      ax_writeexe.writedosstub
          call      ax_writeexe.writepesig
          call      ax_writeexe.writefileheader
          call      ax_writeexe.writeoptheader
L849:
          mov       D0,	1
          mov       [Dframe+-280],	D0
          mov       D0,	[ax_writeexe.nsections]
          cmp       D0,	1
          jl        L852
L850:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	[Dframe+-280]
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.writesectionheader
L851:
          mov       D0,	[Dframe+-280]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-280],	D0
          mov       D1,	[ax_writeexe.nsections]
          cmp       D0,	D1
          jle       L850
L852:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	1
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          mov       D0,	[D0+32]
          push      D0
          call      ax_writeexe.writepadding
L853:
          mov       D0,	1
          mov       [Dframe+-280],	D0
          mov       D0,	[ax_writeexe.nsections]
          cmp       D0,	1
          jl        L856
L854:
          lea       D0,	[ax_writeexe.sectiontable]
          mov       D1,	[Dframe+-280]
          imul2     D1,	72
          lea       D0,	[D0+D1-72]
          push      D0
          call      ax_writeexe.writesectiondata
L855:
          mov       D0,	[Dframe+-280]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-280],	D0
          mov       D1,	[ax_writeexe.nsections]
          cmp       D0,	D1
          jle       L854
L856:
          mov       D0,	[ax_decls.fverbose]
          cmp       D0,	0
          jz        L857
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4161
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L857:
          mov       D0,	[ax_writeexe.dataptr]
          mov       D1,	[ax_writeexe.datastart]
          sub       D0,	D1
          mov       D1,	[ax_writeexe.datastart]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.writefile
          mov       D1,	0
          cmp       D0,	D1
          jnz       L858
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4162
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L858:
L848:
;-------------------------------------------------
          add       Dstack,	288
          pop       Dframe
          retn      8
;PROC DO_PCMPISTRI ============================================================
ax_genss.do_pcmpistri:
L4163:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L861
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L860
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L860
L861:
          mov       D0,	L4164
          push      D0
          call      ax_lib.gerror
L860:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L862
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       [Dframe+16],	D1
          mov       [Dframe+24],	D0
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	58
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+40]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L863
L862:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	58
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+40]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L863:
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
L859:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      32
;PROC EXTENDSYMBOLTABLE ============================================================
ax_genss.extendsymboltable:
L4165:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[ax_decls.ss_symboltablesize]
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_decls.ss_symboltable]
          mov       [Dframe+-8],	D0
          lea       D0,	[ax_decls.ss_symboltablesize]
          mov       D1,	2
          imul2     D1,	[D0]
          mov       [D0],	D1
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4166
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.ss_symboltablesize]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	8
          mov       D1,	[ax_decls.ss_symboltablesize]
          imul2     D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       [ax_decls.ss_symboltable],	D0
L865:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[ax_decls.ss_nsymbols]
          cmp       D0,	1
          jl        L868
L866:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-24]
          mov       D0,	[D0+D1*8-8]
          mov       D1,	[ax_decls.ss_symboltable]
          mov       D2,	[Dframe+-24]
          mov       [D1+D2*8-8],	D0
L867:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[ax_decls.ss_nsymbols]
          cmp       D0,	D1
          jle       L866
L868:
          mov       D0,	8
          mov       D1,	[Dframe+-16]
          imul2     D0,	D1
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.pcm_free
L864:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          ret       
;PROC DO_BSF ============================================================
ax_genss.do_bsf:
L4167:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L870
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L871
          mov       D0,	8
          mov       D1,	[Dframe+24]
          mov       [D1+17],	B0
L871:
L870:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L872
          mov       D0,	L4168
          push      D0
          call      ax_lib.gerror
L872:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodebx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L869:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC DO_POPCNT ============================================================
ax_genss.do_popcnt:
L4169:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L874
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L875
          mov       D0,	8
          mov       D1,	[Dframe+24]
          mov       [D1+17],	B0
L875:
L874:
          mov       D0,	243
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodebx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	184
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L873:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC DO_MOVDQX ============================================================
ax_genss.do_movdqx:
L4170:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L878
          mov       D1,	3
          cmp       D0,	D1
          jz        L879
          jmp       L880
L878:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L882
          mov       D1,	3
          cmp       D0,	D1
          jz        L883
          jmp       L884
L882:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodebx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	111
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L881
L883:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	111
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L881
L884:
          mov       D0,	L4171
          push      D0
          call      ax_lib.gerror
L881:
          jmp       L877
L879:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L886
          jmp       L887
L886:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	127
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L885
L887:
          mov       D0,	L4172
          push      D0
          call      ax_lib.gerror
L885:
          jmp       L877
L880:
          mov       D0,	L4172
          push      D0
          call      ax_lib.gerror
L877:
L876:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC SWITCHSEG ============================================================
ax_genss.switchseg:
L4173:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	[ax_genss.currseg]
          cmp       D0,	D1
          jnz       L889
          pop       Dframe
          retn      8
L889:
          mov       D0,	[ax_genss.currseg]
          mov       D1,	1
          cmp       D0,	D1
          jz        L891
          mov       D1,	2
          cmp       D0,	D1
          jz        L892
          jmp       L893
L891:
          mov       D0,	[ax_genss.currrelocs]
          mov       [ax_decls.ss_coderelocs],	D0
          mov       D0,	[ax_genss.nrelocs]
          mov       [ax_decls.ss_ncoderelocs],	D0
          jmp       L890
L892:
          mov       D0,	[ax_genss.currrelocs]
          mov       [ax_decls.ss_idatarelocs],	D0
          mov       D0,	[ax_genss.nrelocs]
          mov       [ax_decls.ss_nidatarelocs],	D0
          jmp       L890
L893:
L890:
          mov       D0,	[Dframe+16]
          mov       [ax_genss.currseg],	D0
          mov       D1,	1
          cmp       D0,	D1
          jz        L895
          mov       D1,	2
          cmp       D0,	D1
          jz        L896
          mov       D1,	3
          cmp       D0,	D1
          jz        L897
          jmp       L898
L895:
          mov       D0,	[ax_decls.ss_code]
          mov       [ax_genss.currdata],	D0
          mov       D0,	[ax_decls.ss_coderelocs]
          mov       [ax_genss.currrelocs],	D0
          mov       D0,	[ax_decls.ss_ncoderelocs]
          mov       [ax_genss.nrelocs],	D0
          jmp       L894
L896:
          mov       D0,	[ax_decls.ss_idata]
          mov       [ax_genss.currdata],	D0
          mov       D0,	[ax_decls.ss_idatarelocs]
          mov       [ax_genss.currrelocs],	D0
          mov       D0,	[ax_decls.ss_nidatarelocs]
          mov       [ax_genss.nrelocs],	D0
          jmp       L894
L897:
          mov       D0,	[ax_decls.ss_zdata]
          mov       [ax_genss.currdata],	D0
          jmp       L894
L898:
L894:
L888:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ADDFWDREF ============================================================
ax_genss.addfwdref:
L4174:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	16
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	A0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+-8]
          mov       [D1+12],	W0
          mov       D0,	[Dframe+40]
          mov       D1,	[Dframe+-8]
          mov       [D1+14],	W0
          mov       D0,	[Dframe+-8]
L899:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      32
;PROC CHECKSHORTJUMP ============================================================
ax_genss.checkshortjump:
L4175:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	0
          add       Dstack,	8
          pop       Dframe
          retn      16
          mov       D0,	0
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+16],	D0
          jmp       L902
L901:
          inc       word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L904
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0]
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jnz       L904
          mov       D0,	1
          add       Dstack,	8
          pop       Dframe
          retn      16
L904:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+16],	D0
L902:
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L905
          mov       D0,	[Dframe+-8]
          mov       D1,	8
          cmp       D0,	D1
          jle       L901
L905:
L903:
          mov       D0,	0
L900:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GENREL8 ============================================================
ax_genss.genrel8:
L4176:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0+41]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L907
          mov       D0,	0
          mov       D1,	6
          mov       D2,	3
          push      D0
          push      D1
          push      D2
          call      ax_genss.getcurrdatalen
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      ax_genss.addfwdref
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	0
          push      D0
          call      ax_genss.genbyte
          jmp       L908
L907:
          mov       D0,	L4177
          push      D0
          call      ax_lib.gerror
L908:
L906:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GETR32BITS ============================================================
ax_genss.getr32bits:
L4178:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          cvtsd2ss  XMM0,	XMM0
          movd      [Dframe+-8],	XMM0
          movd      XMM0,	[Dframe+-8]
          movq      D0,	XMM0
          movsx     D0,	A0
L909:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC DO_FMEM ============================================================
ax_genss.do_fmem:
L4179:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L911
          mov       D0,	L4180
          push      D0
          call      ax_lib.gerror
L911:
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L912
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jz        L914
          mov       D1,	8
          cmp       D0,	D1
          jz        L915
          mov       D1,	16
          cmp       D0,	D1
          jz        L916
          jmp       L917
L914:
          mov       D0,	0
          mov       [Dframe+-24],	D0
          jmp       L913
L915:
          mov       D0,	2
          mov       [Dframe+-24],	D0
          jmp       L913
L916:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jz        L919
          mov       D1,	3
          cmp       D0,	D1
          jz        L920
          jmp       L921
L919:
          mov       D0,	5
          mov       [Dframe+32],	D0
          jmp       L918
L920:
          mov       D0,	7
          mov       [Dframe+32],	D0
          jmp       L918
L921:
          mov       D0,	L4181
          push      D0
          call      ax_lib.gerror
L918:
          jmp       L913
L917:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4182
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+17]
          movzx     D1,	B1
          push      D0
          push      D1
          call      [L3648]	!print_u64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4183
          push      D0
          call      ax_lib.gerror
L913:
          jmp       L922
L912:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	2
          cmp       D0,	D1
          jz        L924
          mov       D1,	4
          cmp       D0,	D1
          jz        L925
          mov       D1,	8
          cmp       D0,	D1
          jz        L926
          jmp       L927
L924:
          mov       D0,	3
          mov       [Dframe+-24],	D0
          jmp       L923
L925:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          jmp       L923
L926:
          mov       D0,	3
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jz        L929
          mov       D1,	3
          cmp       D0,	D1
          jz        L930
          jmp       L931
L929:
          mov       D0,	5
          mov       [Dframe+32],	D0
          jmp       L928
L930:
          mov       D0,	7
          mov       [Dframe+32],	D0
          jmp       L928
L931:
          mov       D0,	L4184
          push      D0
          call      ax_lib.gerror
L928:
          jmp       L923
L927:
          mov       D0,	L4185
          push      D0
          call      ax_lib.gerror
L923:
L922:
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	217
          mov       D1,	[Dframe+-24]
          shl       D1,	1
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
L910:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      24
;PROC DO_CMOVCC ============================================================
ax_genss.do_cmovcc:
L4186:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+32]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L933
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+17]
          cmp       D0,	0
          jz        L933
          mov       D0,	L4187
          push      D0
          call      ax_lib.gerror
L933:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L934
          mov       D0,	L4188
          push      D0
          call      ax_lib.gerror
L934:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+32]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	64
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+32]
          push      D0
          call      ax_genss.genamode
L932:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC GETCURRDATALEN ============================================================
ax_genss.getcurrdatalen:
L4189:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_genss.currseg]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L936
          mov       D0,	[ax_decls.ss_zdatalen]
          pop       Dframe
          retn      8
L936:
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.bufferlength
L935:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC DO_JMP ============================================================
ax_genss.do_jmp:
L4190:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jz        L939
          jmp       L940
L939:
          mov       D0,	11
          push      D0
          call      ax_genss.getcurrdatalen
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_genss.getrel32
          mov       [Dframe+-24],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L941
          mov       D0,	[Dframe+-24]
          mov       D1,	-126
          cmp       D0,	D1
          jle       L941
          mov       D0,	235
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          jmp       L942
L941:
          mov       D0,	0
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jle       L943
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_genss.checkshortjump
          mov       [Dframe+-32],	D0
L943:
          mov       D0,	[Dframe+-32]
          cmp       D0,	0
          jnz       L944
          mov       D0,	233
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrel32
          jmp       L945
L944:
          mov       D0,	235
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrel8
L945:
L942:
          jmp       L938
L940:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jz        L947
          mov       D1,	1
          cmp       D0,	D1
          jz        L948
          mov       D1,	2
          cmp       D0,	D1
          jz        L948
          mov       D1,	4
          cmp       D0,	D1
          jz        L948
          jmp       L949
L947:
          mov       D0,	8
          mov       D1,	[Dframe+16]
          mov       [D1+17],	B0
          jmp       L946
L948:
          mov       D0,	L4191
          push      D0
          call      ax_lib.gerror
          jmp       L946
L949:
L946:
          mov       D0,	4
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setaddrsize
          call      ax_genss.genrex
          mov       D0,	255
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
L938:
L937:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC DO_CALL ============================================================
ax_genss.do_call:
L4192:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jz        L952
          jmp       L953
L952:
          mov       D0,	232
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrel32
          jmp       L951
L953:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jz        L955
          mov       D1,	1
          cmp       D0,	D1
          jz        L956
          mov       D1,	2
          cmp       D0,	D1
          jz        L956
          mov       D1,	4
          cmp       D0,	D1
          jz        L956
          jmp       L957
L955:
          mov       D0,	8
          mov       D1,	[Dframe+16]
          mov       [D1+17],	B0
          jmp       L954
L956:
          mov       D0,	L4193
          push      D0
          call      ax_lib.gerror
          jmp       L954
L957:
L954:
          mov       D0,	2
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setaddrsize
          call      ax_genss.genrex
          mov       D0,	255
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
L951:
L950:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC DO_FLOAT ============================================================
ax_genss.do_float:
L4194:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L960
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L959
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L959
L960:
          mov       D0,	L4195
          push      D0
          call      ax_lib.gerror
L959:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L961
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L962
          mov       D0,	4
          mov       D1,	[Dframe+24]
          mov       [D1+17],	B0
L962:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jz        L963
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jz        L963
          mov       D0,	L4196
          push      D0
          call      ax_lib.gerror
L963:
L961:
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	42
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L958:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC DO_FIX ============================================================
ax_genss.do_fix:
L4197:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L966
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L965
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L965
L966:
          mov       D0,	L4198
          push      D0
          call      ax_lib.gerror
L965:
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L967
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          jmp       L968
L967:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
L968:
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+40]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L964:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      32
;PROC DO_CONVERTFLOAT ============================================================
ax_genss.do_convertfloat:
L4199:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L971
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L970
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L970
L971:
          mov       D0,	L4200
          push      D0
          call      ax_lib.gerror
L970:
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L972
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	90
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L973
L972:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	90
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L973:
L969:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC DO_LOGICXMM ============================================================
ax_genss.do_logicxmm:
L4201:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L976
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L975
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L975
L976:
          mov       D0,	L4202
          push      D0
          call      ax_lib.gerror
L975:
          mov       D0,	[Dframe+40]
          mov       D1,	8
          cmp       D0,	D1
          jnz       L977
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
L977:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L978
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L979
L978:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L979:
L974:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      32
;PROC DO_ARITHXMM ============================================================
ax_genss.do_arithxmm:
L4203:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L982
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L981
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L981
L982:
          mov       D0,	L4204
          push      D0
          call      ax_lib.gerror
L981:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L983
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+32]
          cmp       D0,	0
          jz        L984
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
L984:
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+40]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L985
L983:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+32]
          cmp       D0,	0
          jz        L986
          push      word64 [Dframe+32]
          call      ax_genss.genbyte
L986:
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+40]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L985:
L980:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      32
;PROC DO_MOVXMM ============================================================
ax_genss.do_movxmm:
L4205:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L989
          mov       D1,	5
          cmp       D0,	D1
          jz        L990
          mov       D1,	3
          cmp       D0,	D1
          jz        L991
          jmp       L992
L989:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L994
          jmp       L995
L994:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jz        L996
          mov       D0,	L4206
          push      D0
          call      ax_lib.gerror
L996:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	126
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L993
L995:
          mov       D0,	L4207
          push      D0
          call      ax_lib.gerror
L993:
          jmp       L988
L990:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L998
          mov       D1,	5
          cmp       D0,	D1
          jz        L999
          mov       D1,	3
          cmp       D0,	D1
          jz        L1000
          jmp       L1001
L998:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jz        L1002
          mov       D0,	L4208
          push      D0
          call      ax_lib.gerror
L1002:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	110
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L997
L999:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodebx
          mov       [Dframe+-32],	D0
          mov       D0,	243
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	126
          push      D0
          call      ax_genss.genbyte
          mov       D0,	192
          mov       D1,	[Dframe+-24]
          shl       D1,	3
          add       D0,	D1
          mov       D1,	[Dframe+-32]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          jmp       L997
L1000:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          cmp       D0,	0
          jz        L1003
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jz        L1003
          mov       D0,	L4209
          push      D0
          call      ax_lib.gerror
L1003:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1004
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	110
          push      D0
          call      ax_genss.genbyte
          jmp       L1005
L1004:
          mov       D0,	243
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	126
          push      D0
          call      ax_genss.genbyte
L1005:
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L997
L1001:
          mov       D0,	L4210
          push      D0
          call      ax_lib.gerror
L997:
          jmp       L988
L991:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L1007
          jmp       L1008
L1007:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          cmp       D0,	0
          jz        L1009
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jz        L1009
          mov       D0,	L4211
          push      D0
          call      ax_lib.gerror
L1009:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoderx
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1010
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	126
          push      D0
          call      ax_genss.genbyte
          jmp       L1011
L1010:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	214
          push      D0
          call      ax_genss.genbyte
L1011:
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1006
L1008:
          mov       D0,	L4212
          push      D0
          call      ax_lib.gerror
L1006:
          jmp       L988
L992:
          mov       D0,	L4213
          push      D0
          call      ax_lib.gerror
L988:
L987:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      24
;PROC DO_SETCC ============================================================
ax_genss.do_setcc:
L4214:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1015
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1014
L1015:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jle       L1013
L1014:
          mov       D0,	L4215
          push      D0
          call      ax_lib.gerror
L1013:
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	144
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L1012:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC DO_JCXZ ============================================================
ax_genss.do_jcxz:
L4216:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	10
          push      D0
          call      ax_genss.getcurrdatalen
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_genss.getrel32
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L1017
          mov       D0,	[Dframe+-8]
          mov       D1,	-126
          cmp       D0,	D1
          jge       L1018
          mov       D0,	L4217
          push      D0
          call      ax_lib.gerror
L1018:
          mov       D0,	[Dframe+24]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1019
          mov       D0,	103
          push      D0
          call      ax_genss.genbyte
L1019:
          mov       D0,	227
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          jmp       L1020
L1017:
          mov       D0,	L4218
          push      D0
          call      ax_lib.gerror
L1020:
L1016:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC DO_LOOP ============================================================
ax_genss.do_loop:
L4219:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	9
          push      D0
          call      ax_genss.getcurrdatalen
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_genss.getrel32
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L1022
          mov       D0,	[Dframe+-8]
          mov       D1,	-126
          cmp       D0,	D1
          jge       L1023
          mov       D0,	L4220
          push      D0
          call      ax_lib.gerror
L1023:
          push      word64 [Dframe+24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          jmp       L1024
L1022:
          mov       D0,	L4221
          push      D0
          call      ax_lib.gerror
L1024:
L1021:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC DO_TEST ============================================================
ax_genss.do_test:
L4222:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1027
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1027
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1027
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1029
          mov       D1,	2
          cmp       D0,	D1
          jz        L1030
          mov       D1,	4
          cmp       D0,	D1
          jz        L1031
          jmp       L1032
L1029:
          mov       D0,	168
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          jmp       L1028
L1030:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          mov       D0,	169
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.genword
          jmp       L1028
L1031:
          mov       D0,	169
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.gendword
          jmp       L1028
L1032:
          mov       D0,	72
          push      D0
          call      ax_genss.genbyte
          mov       D0,	169
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.gendword
L1028:
          jmp       L1026
L1027:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1034
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1033
L1034:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1033
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1035
          mov       D0,	246
          jmp       L1036
L1035:
          mov       D0,	247
L1036:
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       [Dframe+-8],	D0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          push      word64 [Dframe+-16]
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1038
          mov       D1,	2
          cmp       D0,	D1
          jz        L1039
          jmp       L1040
L1038:
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          jmp       L1037
L1039:
          push      word64 [Dframe+-8]
          call      ax_genss.genword
          jmp       L1037
L1040:
          push      word64 [Dframe+-8]
          call      ax_genss.gendword
L1037:
          jmp       L1026
L1033:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1041
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1042
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1041
L1042:
;doregmem
L1043:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-32],	D0
          push      word64 [Dframe+-32]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1044
          mov       D0,	132
          jmp       L1045
L1044:
          mov       D0,	133
L1045:
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L1026
L1041:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1046
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1046
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       [Dframe+16],	D1
          mov       [Dframe+24],	D0
          jmp       L1043
          jmp       L1026
L1046:
          mov       D0,	L4223
          push      D0
          call      ax_lib.gerror
L1026:
L1025:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC DO_SHIFT ============================================================
ax_genss.do_shift:
L4224:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1048
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L1048
          mov       D0,	L4225
          push      D0
          call      ax_lib.gerror
L1048:
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1049
          mov       D0,	0
          jmp       L1050
L1049:
          mov       D0,	1
L1050:
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1052
          mov       D1,	1
          cmp       D0,	D1
          jz        L1053
          jmp       L1054
L1052:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1055
          mov       D0,	L4226
          push      D0
          call      ax_lib.gerror
L1055:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1056
          mov       D0,	208
          mov       D1,	[Dframe+-16]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1057
L1056:
          mov       D0,	192
          mov       D1,	[Dframe+-16]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genbyte
L1057:
          jmp       L1051
L1053:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          mov       D1,	11
          cmp       D0,	D1
          jnz       L1059
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1058
L1059:
          mov       D0,	L4227
          push      D0
          call      ax_lib.gerror
L1058:
          mov       D0,	210
          mov       D1,	[Dframe+-16]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1051
L1054:
          mov       D0,	L4228
          push      D0
          call      ax_lib.gerror
L1051:
L1047:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC DO_IMUL3 ============================================================
ax_genss.do_imul3:
L4229:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1062
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1061
L1062:
          mov       D0,	L4230
          push      D0
          call      ax_lib.gerror
L1061:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1063
          mov       D0,	L4231
          push      D0
          call      ax_lib.gerror
L1063:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1064
          mov       D0,	L4232
          push      D0
          call      ax_lib.gerror
L1064:
          mov       D0,	[Dframe+32]
          mov       D0,	[D0+8]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodeb
          mov       [Dframe+-24],	D0
          mov       D0,	192
          mov       D1,	[Dframe+-16]
          shl       D1,	3
          add       D0,	D1
          mov       D1,	[Dframe+-24]
          add       D0,	D1
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	-128
          mov       D1,	[Dframe+-8]
          cmp       D0,	D1
          jg        L1066
          mov       D0,	[Dframe+-8]
          mov       D1,	127
          cmp       D0,	D1
          jg        L1066
          mov       D0,	107
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-32]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          jmp       L1065
L1066:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1067
          mov       D0,	105
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-32]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.genword
          jmp       L1065
L1067:
          mov       D0,	105
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-32]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          call      ax_genss.gendword
L1065:
L1060:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      24
;PROC DO_IMUL2 ============================================================
ax_genss.do_imul2:
L4233:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1069
          mov       D0,	L4234
          push      D0
          call      ax_lib.gerror
L1069:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1070
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          mov       [D1+17],	B0
L1070:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1071
          mov       D0,	L4235
          push      D0
          call      ax_lib.gerror
L1071:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1073
          mov       D1,	3
          cmp       D0,	D1
          jz        L1073
          mov       D1,	2
          cmp       D0,	D1
          jz        L1074
          jmp       L1075
L1073:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L1076
          mov       D0,	L4236
          push      D0
          call      ax_lib.gerror
L1076:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	175
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L1072
L1074:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1077
          mov       D0,	L4237
          push      D0
          call      ax_lib.gerror
L1077:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodeb
          mov       [Dframe+-8],	D0
          mov       D0,	192
          mov       D1,	[Dframe+-8]
          shl       D1,	3
          add       D0,	D1
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	-128
          mov       D1,	[Dframe+-32]
          cmp       D0,	D1
          jg        L1079
          mov       D0,	[Dframe+-32]
          mov       D1,	127
          cmp       D0,	D1
          jg        L1079
          mov       D0,	107
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-32]
          call      ax_genss.genbyte
          jmp       L1078
L1079:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1080
          mov       D0,	105
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-32]
          call      ax_genss.genword
          jmp       L1078
L1080:
          mov       D0,	105
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-32]
          call      ax_genss.gendword
L1078:
          jmp       L1072
L1075:
          mov       D0,	L4238
          push      D0
          call      ax_lib.gerror
L1072:
L1068:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC DO_MOVSXD ============================================================
ax_genss.do_movsxd:
L4239:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1082
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1082
          mov       D0,	4
          mov       D1,	[Dframe+24]
          mov       [D1+17],	B0
L1082:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jnz       L1084
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jle       L1083
L1084:
          mov       D0,	L4240
          push      D0
          call      ax_lib.gerror
L1083:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1086
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1085
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L1085
L1086:
          mov       D0,	L4241
          push      D0
          call      ax_lib.gerror
L1085:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	99
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L1081:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC DO_EXCH ============================================================
ax_genss.do_exch:
L4242:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1088
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1088
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1089
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1088
L1089:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1088
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1090
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       [Dframe+16],	D1
          mov       [Dframe+24],	D0
L1090:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L1091
          mov       D0,	L4243
          push      D0
          call      ax_lib.gerror
L1091:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodeb
          mov       [Dframe+-8],	D0
          call      ax_genss.genrex
          mov       D0,	144
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          add       Dstack,	16
          pop       Dframe
          retn      16
L1088:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1092
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       [Dframe+16],	D1
          mov       [Dframe+24],	D0
L1092:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1094
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1093
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L1093
L1094:
          mov       D0,	L4244
          push      D0
          call      ax_lib.gerror
L1093:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1095
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1095
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          mov       [D1+17],	B0
L1095:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L1096
          mov       D0,	L4245
          push      D0
          call      ax_lib.gerror
L1096:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1097
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
L1097:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1098
          mov       D0,	134
          jmp       L1099
L1098:
          mov       D0,	135
L1099:
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L1087:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC CHECKHIGHREG ============================================================
ax_genss.checkhighreg:
L4246:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1101
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          mov       D1,	6
          cmp       D0,	D1
          jz        L1103
          mov       D1,	4
          cmp       D0,	D1
          jz        L1103
          mov       D1,	15
          cmp       D0,	D1
          jz        L1103
          mov       D1,	16
          cmp       D0,	D1
          jz        L1103
          jmp       L1104
L1103:
          mov       D0,	64
          or        [ax_genss.rex],	D0
          jmp       L1102
L1104:
L1102:
L1101:
L1100:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC DO_MOVSX ============================================================
ax_genss.do_movsx:
L4247:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1106
          mov       D0,	L4248
          push      D0
          call      ax_lib.gerror
L1106:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jnz       L1107
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1107
          mov       D0,	[Dframe+32]
          mov       D1,	190
          cmp       D0,	D1
          jnz       L1108
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.do_movsxd
          jmp       L1109
L1108:
          lea       D0,	[ax_lib.regtable]
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+18]
          shl       D1,	6
          lea       D0,	[D0+D1-64]
          mov       D1,	4
          mov       D0,	[D0+D1*8-8]
          mov       [Dframe+16],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.do_mov
L1109:
          add       Dstack,	16
          pop       Dframe
          retn      24
L1107:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1111
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          ja        L1110
L1111:
          mov       D0,	L4249
          push      D0
          call      ax_lib.gerror
L1110:
          mov       D0,	[Dframe+32]
          mov       D1,	182
          cmp       D0,	D1
          jnz       L1112
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1112
          mov       D0,	L4250
          push      D0
          call      ax_lib.gerror
L1112:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1114
          mov       D1,	3
          cmp       D0,	D1
          jz        L1115
          jmp       L1116
L1114:
          jmp       L1113
L1115:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1117
          mov       D0,	L4251
          push      D0
          call      ax_lib.gerror
L1117:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jnz       L1118
          mov       D0,	L4252
          push      D0
          call      ax_lib.gerror
L1118:
          jmp       L1113
L1116:
          mov       D0,	L4253
          push      D0
          call      ax_lib.gerror
L1113:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          call      ax_genss.genrex
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1119
          mov       D0,	[Dframe+32]
          jmp       L1120
L1119:
          mov       D0,	[Dframe+32]
          mov       D1,	1
          add       D0,	D1
L1120:
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L1105:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC DO_LEA ============================================================
ax_genss.do_lea:
L4254:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1123
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jz        L1122
L1123:
          mov       D0,	L4255
          push      D0
          call      ax_lib.gerror
L1122:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jge       L1124
          mov       D0,	L4256
          push      D0
          call      ax_lib.gerror
L1124:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	141
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
L1121:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC GETREGCODERX ============================================================
ax_genss.getregcoderx:
L4257:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	8
          cmp       D0,	D1
          jl        L1126
          mov       D0,	8
          sub       [Dframe+-8],	D0
          mov       D0,	4
          or        [ax_genss.rex],	D0
L1126:
          mov       D0,	[Dframe+-8]
L1125:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GETREGCODEBX ============================================================
ax_genss.getregcodebx:
L4258:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	8
          cmp       D0,	D1
          jl        L1128
          mov       D0,	8
          sub       [Dframe+-8],	D0
          mov       D0,	1
          or        [ax_genss.rex],	D0
L1128:
          mov       D0,	[Dframe+-8]
L1127:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GETREGCODEB ============================================================
ax_genss.getregcodeb:
L4259:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-8],	D0
          mov       D1,	8
          cmp       D0,	D1
          jl        L1130
          mov       D0,	8
          sub       [Dframe+-8],	D0
          mov       D0,	1
          or        [ax_genss.rex],	D0
L1130:
          mov       D0,	[Dframe+-8]
L1129:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GETREGCODER ============================================================
ax_genss.getregcoder:
L4260:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-8],	D0
          mov       D1,	8
          cmp       D0,	D1
          jl        L1132
          mov       D0,	8
          sub       [Dframe+-8],	D0
          mov       D0,	4
          or        [ax_genss.rex],	D0
L1132:
          mov       D0,	[Dframe+-8]
L1131:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC DO_MOV ============================================================
ax_genss.do_mov:
L4261:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1135
          mov       D1,	3
          cmp       D0,	D1
          jz        L1136
          jmp       L1137
L1135:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1139
          mov       D1,	3
          cmp       D0,	D1
          jz        L1139
          mov       D1,	2
          cmp       D0,	D1
          jz        L1140
          jmp       L1141
L1139:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L1142
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          cmp       D0,	0
          jz        L1142
          mov       D0,	L4262
          push      D0
          call      ax_lib.gerror
L1142:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1143
          mov       D0,	138
          jmp       L1144
L1143:
          mov       D0,	139
L1144:
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L1138
L1140:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodeb
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1145
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	2
          cmp       D0,	D1
          jg        L1145
          mov       D0,	L4263
          push      D0
          call      ax_lib.gerror
L1145:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1147
          mov       D1,	2
          cmp       D0,	D1
          jz        L1148
          mov       D1,	4
          cmp       D0,	D1
          jz        L1149
          jmp       L1150
L1147:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          mov       D1,	6
          cmp       D0,	D1
          jz        L1152
          mov       D1,	4
          cmp       D0,	D1
          jz        L1152
          mov       D1,	15
          cmp       D0,	D1
          jz        L1152
          mov       D1,	16
          cmp       D0,	D1
          jz        L1152
          jmp       L1153
L1152:
          mov       D0,	64
          or        [ax_genss.rex],	D0
          jmp       L1151
L1153:
L1151:
          mov       D0,	-128
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jg        L1155
          mov       D0,	[Dframe+-24]
          mov       D1,	255
          cmp       D0,	D1
          jle       L1154
L1155:
          mov       D0,	L4264
          push      D0
          call      ax_lib.gerror
L1154:
          call      ax_genss.genrex
          mov       D0,	176
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          jmp       L1146
L1148:
          mov       D0,	-32768
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jg        L1157
          mov       D0,	[Dframe+-24]
          mov       D1,	65535
          cmp       D0,	D1
          jle       L1156
L1157:
          mov       D0,	L4265
          push      D0
          call      ax_lib.gerror
L1156:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          call      ax_genss.genrex
          mov       D0,	184
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genword
          jmp       L1146
L1149:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1158
          call      ax_genss.genrex
          mov       D0,	184
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          mov       D0,	4
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1159
L1158:
          mov       D0,	-2147483648
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jg        L1161
          mov       D0,	[Dframe+-24]
          mov       D1,	4294967295
          cmp       D0,	D1
          jle       L1160
L1161:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4266
          push      D0
          call      ax_lib.gerror
L1160:
;doreg32
L1162:
          call      ax_genss.genrex
          mov       D0,	184
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.gendword
L1159:
          jmp       L1146
L1150:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1163
          mov       D0,	8
          or        [ax_genss.rex],	D0
          call      ax_genss.genrex
          mov       D0,	184
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          mov       D0,	8
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1164
L1163:
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jl        L1165
          mov       D0,	[Dframe+-24]
          mov       D1,	4294967295
          cmp       D0,	D1
          jg        L1165
          jmp       L1162
L1165:
          mov       D0,	8
          or        [ax_genss.rex],	D0
          call      ax_genss.genrex
          mov       D0,	184
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-24]
          call      ax_genss.genqword
L1164:
L1146:
          jmp       L1138
L1141:
          mov       D0,	L4267
          push      D0
          call      ax_lib.gerror
L1138:
          jmp       L1134
L1136:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1167
          mov       D1,	2
          cmp       D0,	D1
          jz        L1168
          jmp       L1169
L1167:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+17]
          cmp       D0,	D1
          jz        L1170
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          cmp       D0,	0
          jz        L1170
          mov       D0,	L4268
          push      D0
          call      ax_lib.gerror
L1170:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1171
          mov       D0,	136
          jmp       L1172
L1171:
          mov       D0,	137
L1172:
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1166
L1168:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       [Dframe+-24],	D0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1173
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	2
          cmp       D0,	D1
          jg        L1173
          mov       D0,	L4269
          push      D0
          call      ax_lib.gerror
L1173:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1174
          mov       D0,	1
          mov       D1,	[Dframe+16]
          mov       [D1+17],	B0
L1174:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	0
          cmp       D0,	D1
          jz        L1176
          mov       D1,	1
          cmp       D0,	D1
          jz        L1176
          mov       D1,	2
          cmp       D0,	D1
          jz        L1177
          mov       D1,	4
          cmp       D0,	D1
          jz        L1178
          mov       D1,	8
          cmp       D0,	D1
          jz        L1178
          jmp       L1179
L1176:
          mov       D0,	-128
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jg        L1181
          mov       D0,	[Dframe+-24]
          mov       D1,	255
          cmp       D0,	D1
          jle       L1180
L1181:
          mov       D0,	L4270
          push      D0
          call      ax_lib.gerror
L1180:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	198
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          jmp       L1175
L1177:
          mov       D0,	-32768
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jg        L1183
          mov       D0,	[Dframe+-24]
          mov       D1,	65535
          cmp       D0,	D1
          jle       L1182
L1183:
          mov       D0,	L4271
          push      D0
          call      ax_lib.gerror
L1182:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	199
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          push      word64 [Dframe+-24]
          call      ax_genss.genword
          jmp       L1175
L1178:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jnz       L1184
          mov       D0,	-2147483647
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jg        L1186
          mov       D0,	[Dframe+-24]
          mov       D1,	4294967295
          cmp       D0,	D1
          jle       L1185
L1186:
          mov       D0,	L4272
          push      D0
          call      ax_lib.gerror
L1185:
L1184:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	199
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          mov       D0,	4
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1175
L1179:
L1175:
          jmp       L1166
L1169:
          mov       D0,	L4273
          push      D0
          call      ax_lib.gerror
L1166:
          jmp       L1134
L1137:
          mov       D0,	L4274
          push      D0
          call      ax_lib.gerror
L1134:
L1133:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      16
;PROC DO_ARITH ============================================================
ax_genss.do_arith:
L4275:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1189
          mov       D1,	3
          cmp       D0,	D1
          jz        L1190
          jmp       L1191
L1189:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1193
          mov       D1,	3
          cmp       D0,	D1
          jz        L1193
          mov       D1,	2
          cmp       D0,	D1
          jz        L1194
          jmp       L1195
L1193:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	[Dframe+32]
          shl       D0,	3
          push      D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1196
          mov       D0,	2
          jmp       L1197
L1196:
          mov       D0,	3
L1197:
          pop       D1
          or        D1,	D0
          mov       [Dframe+-24],	D1
          call      ax_genss.genrex
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.genamode
          jmp       L1192
L1194:
;doregimm
L1198:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1199
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jl        L1201
          mov       D0,	[Dframe+32]
          mov       D1,	7
          cmp       D0,	D1
          jle       L1200
L1201:
          mov       D0,	L4276
          push      D0
          call      ax_lib.gerror
L1200:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	4
          cmp       D0,	D1
          jge       L1202
          mov       D0,	L4277
          push      D0
          call      ax_lib.gerror
L1202:
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          mov       D0,	129
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          mov       D0,	4
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_genss.genopnd
          add       Dstack,	40
          pop       Dframe
          retn      24
L1199:
          mov       D0,	[Dframe+24]
          mov       D0,	[D0+8]
          mov       [Dframe+-40],	D0
          mov       D0,	1
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1204
          mov       D0,	128
          mov       [Dframe+-24],	D0
          jmp       L1203
L1204:
          mov       D0,	-128
          mov       D1,	[Dframe+-40]
          cmp       D0,	D1
          jg        L1205
          mov       D0,	[Dframe+-40]
          mov       D1,	127
          cmp       D0,	D1
          jg        L1205
          mov       D0,	131
          mov       [Dframe+-24],	D0
          jmp       L1203
L1205:
          mov       D0,	-2147483648
          mov       D1,	[Dframe+-40]
          cmp       D0,	D1
          jg        L1207
          mov       D0,	[Dframe+-40]
          mov       D1,	4294967295
          cmp       D0,	D1
          jle       L1206
L1207:
          mov       D0,	L4278
          push      D0
          call      ax_lib.gerror
L1206:
          mov       D0,	129
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1208
          mov       D0,	2
          jmp       L1209
L1208:
          mov       D0,	4
L1209:
          mov       [Dframe+-32],	D0
L1203:
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          mov       D0,	[Dframe+-32]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1211
          mov       D1,	2
          cmp       D0,	D1
          jz        L1212
          mov       D1,	4
          cmp       D0,	D1
          jz        L1213
          jmp       L1214
L1211:
          push      word64 [Dframe+-40]
          call      ax_genss.genbyte
          jmp       L1210
L1212:
          push      word64 [Dframe+-40]
          call      ax_genss.genword
          jmp       L1210
L1213:
          push      word64 [Dframe+-40]
          call      ax_genss.gendword
          jmp       L1210
L1214:
L1210:
          jmp       L1192
L1195:
          mov       D0,	L4279
          push      D0
          call      ax_lib.gerror
L1192:
          jmp       L1188
L1190:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1216
          mov       D1,	2
          cmp       D0,	D1
          jz        L1217
          jmp       L1218
L1216:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcoder
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.setopsize
          mov       D0,	[Dframe+32]
          shl       D0,	3
          push      D0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1219
          mov       D0,	0
          jmp       L1220
L1219:
          mov       D0,	1
L1220:
          pop       D1
          or        D1,	D0
          mov       [Dframe+-24],	D1
          call      ax_genss.genrex
          push      word64 [Dframe+-24]
          call      ax_genss.genbyte
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1215
L1217:
          jmp       L1198
          jmp       L1215
L1218:
          mov       D0,	L4280
          push      D0
          call      ax_lib.gerror
L1215:
          jmp       L1188
L1191:
          mov       D0,	L4281
          push      D0
          call      ax_lib.gerror
L1188:
L1187:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      24
;PROC MAKEAM ============================================================
ax_genss.makeam:
L4282:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          shl       D0,	16
          mov       D1,	[Dframe+16]
          shl       D1,	8
          add       D0,	D1
          mov       D1,	[Dframe+32]
          add       D0,	D1
L1221:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC GENRMBYTE ============================================================
ax_genss.genrmbyte:
L4283:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          shl       D0,	6
          mov       D1,	[Dframe+24]
          shl       D1,	3
          add       D0,	D1
          mov       D1,	[Dframe+32]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
L1222:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC GENRM ============================================================
ax_genss.genrm:
L4284:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	88
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-16],	D0
          mov       [Dframe+-8],	D0
          mov       D0,	0
          mov       [Dframe+-24],	D0
          mov       D0,	0
          mov       [Dframe+-32],	D0
          mov       D0,	0
          mov       [Dframe+-40],	D0
          mov       D0,	-1
          mov       [Dframe+-48],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1224
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+21]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1224
          mov       D0,	1
          mov       [ax_genss.addroverride],	D0
L1224:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1226
          mov       D1,	3
          cmp       D0,	D1
          jz        L1227
          mov       D1,	5
          cmp       D0,	D1
          jz        L1228
          jmp       L1229
L1226:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodeb
          mov       [Dframe+-88],	D0
          push      word64 [Dframe+-32]
          push      word64 [Dframe+-48]
          push      word64 [Dframe+-88]
          push      word64 [Dframe+24]
          mov       D0,	3
          push      D0
          call      ax_genss.makemodrm
          push      D0
          call      ax_genss.makeam
          add       Dstack,	88
          pop       Dframe
          retn      16
          jmp       L1225
L1227:
          jmp       L1225
L1228:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_genss.getregcodebx
          mov       [Dframe+-88],	D0
          push      word64 [Dframe+-32]
          push      word64 [Dframe+-48]
          push      word64 [Dframe+-88]
          push      word64 [Dframe+24]
          mov       D0,	3
          push      D0
          call      ax_genss.makemodrm
          push      D0
          call      ax_genss.makeam
          add       Dstack,	88
          pop       Dframe
          retn      16
          jmp       L1225
L1229:
          mov       D0,	L4285
          push      D0
          call      ax_lib.gerror
L1225:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          mov       [Dframe+-72],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+19]
          mov       [Dframe+-80],	D0
          mov       D0,	[Dframe+-72]
          mov       D1,	[Dframe+-80]
          cmp       D0,	D1
          jnz       L1231
          mov       D0,	[Dframe+-80]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1231
          mov       D0,	0
          mov       [Dframe+-8],	D0
          mov       D0,	4
          mov       [Dframe+-16],	D0
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	4
          mov       [Dframe+-56],	D0
          mov       D0,	5
          mov       [Dframe+-64],	D0
          mov       D0,	4
          mov       [Dframe+-32],	D0
          jmp       L1230
L1231:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          mov       D1,	1
          cmp       D0,	D1
          jg        L1232
          mov       D0,	[Dframe+-80]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1232
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.getdispsize
          mov       [Dframe+-32],	D0
          cmp       D0,	0
          jz        L1233
          mov       D0,	[Dframe+-32]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1234
          mov       D0,	1
          jmp       L1235
L1234:
          mov       D0,	2
L1235:
          mov       [Dframe+-8],	D0
L1233:
          mov       D0,	[Dframe+-72]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-16],	D0
          mov       D1,	4
          cmp       D0,	D1
          jz        L1236
          mov       D0,	[Dframe+-16]
          mov       D1,	12
          cmp       D0,	D1
          jz        L1236
          mov       D0,	[Dframe+-16]
          mov       [Dframe+-64],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L1238
          mov       D0,	[Dframe+-16]
          mov       D1,	13
          cmp       D0,	D1
          jnz       L1237
L1238:
          mov       D0,	[Dframe+-32]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1237
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	1
          mov       [Dframe+-32],	D0
L1237:
          mov       D0,	0
          mov       [Dframe+-56],	D0
          jmp       L1239
L1236:
          mov       D0,	4
          mov       [Dframe+-56],	D0
          mov       D0,	[Dframe+-16]
          mov       [Dframe+-64],	D0
          mov       D0,	1
          mov       [Dframe+-24],	D0
L1239:
          jmp       L1230
L1232:
          mov       D0,	[Dframe+-80]
          cmp       D0,	0
          jz        L1240
          mov       D0,	[Dframe+-72]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1240
          mov       D0,	4
          mov       [Dframe+-32],	D0
          mov       D0,	0
          mov       [Dframe+-8],	D0
          mov       D0,	4
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          cmp       D0,	0
          jz        L1241
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          jmp       L1242
L1241:
          mov       D0,	1
L1242:
          mov       [Dframe+-24],	D0
          mov       D0,	5
          mov       [Dframe+-64],	D0
          mov       D0,	[Dframe+-80]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-56],	D0
          mov       D0,	[Dframe+-80]
          mov       D1,	16
          cmp       D0,	D1
          jnz       L1243
          mov       D0,	L4286
          push      D0
          call      ax_lib.gerror
L1243:
          jmp       L1230
L1240:
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.getdispsize
          mov       [Dframe+-32],	D0
          cmp       D0,	0
          jz        L1244
          mov       D0,	[Dframe+-32]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1245
          mov       D0,	1
          jmp       L1246
L1245:
          mov       D0,	2
L1246:
          mov       [Dframe+-8],	D0
L1244:
          mov       D0,	4
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          cmp       D0,	0
          jz        L1247
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          jmp       L1248
L1247:
          mov       D0,	1
L1248:
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-72]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1249
          mov       D0,	5
          mov       [Dframe+-64],	D0
          jmp       L1250
L1249:
          mov       D0,	[Dframe+-72]
          mov       D1,	15
          cmp       D0,	D1
          jnz       L1251
          mov       D0,	[Dframe+-32]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1251
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	1
          mov       [Dframe+-32],	D0
L1251:
          mov       D0,	[Dframe+-72]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-64],	D0
L1250:
          mov       D0,	[Dframe+-80]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1252
          mov       D0,	4
          mov       [Dframe+-56],	D0
          jmp       L1253
L1252:
          mov       D0,	[Dframe+-80]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-56],	D0
L1253:
          mov       D0,	[Dframe+-80]
          cmp       D0,	0
          jz        L1254
          mov       D0,	[Dframe+-72]
          cmp       D0,	0
          jnz       L1254
          mov       D0,	4
          mov       [Dframe+-32],	D0
L1254:
          mov       D0,	[Dframe+-80]
          mov       D1,	16
          cmp       D0,	D1
          jnz       L1255
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          cmp       D0,	D1
          jle       L1255
          mov       D0,	L4287
          push      D0
          call      ax_lib.gerror
L1255:
L1230:
          mov       D0,	[Dframe+-56]
          mov       D1,	8
          cmp       D0,	D1
          jl        L1256
          mov       D0,	2
          or        [ax_genss.rex],	D0
          mov       D0,	7
          and       [Dframe+-56],	D0
L1256:
          mov       D0,	[Dframe+-64]
          mov       D1,	8
          cmp       D0,	D1
          jl        L1257
          mov       D0,	1
          or        [ax_genss.rex],	D0
          mov       D0,	7
          and       [Dframe+-64],	D0
L1257:
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L1258
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0*8+ax_genss.genrm.scaletable-8]
          shl       D0,	6
          mov       D1,	[Dframe+-56]
          shl       D1,	3
          add       D0,	D1
          mov       D1,	[Dframe+-64]
          add       D0,	D1
          mov       [Dframe+-48],	D0
L1258:
          mov       D0,	7
          and       [Dframe+-16],	D0
          push      word64 [Dframe+-32]
          push      word64 [Dframe+-48]
          push      word64 [Dframe+-16]
          push      word64 [Dframe+24]
          push      word64 [Dframe+-8]
          call      ax_genss.makemodrm
          push      D0
          call      ax_genss.makeam
L1223:
;-------------------------------------------------
          add       Dstack,	88
          pop       Dframe
          retn      16
;PROC GETDISPSIZE ============================================================
ax_genss.getdispsize:
L4288:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1260
          mov       D0,	4
          pop       Dframe
          retn      16
L1260:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          cmp       D0,	0
          jnz       L1262
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L1261
L1262:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.isbytesized
          cmp       D0,	0
          jz        L1263
          mov       D0,	1
          jmp       L1264
L1263:
          mov       D0,	4
L1264:
          jmp       L1265
L1261:
          mov       D0,	0
L1265:
L1259:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC SETADDRSIZE ============================================================
ax_genss.setaddrsize:
L4289:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1267
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+21]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1267
          mov       D0,	1
          mov       [ax_genss.addroverride],	D0
L1267:
L1266:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC SETOPSIZE ============================================================
ax_genss.setopsize:
L4290:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1270
          mov       D1,	2
          cmp       D0,	D1
          jz        L1271
          mov       D1,	8
          cmp       D0,	D1
          jz        L1272
          mov       D1,	4
          cmp       D0,	D1
          jz        L1273
          jmp       L1274
L1270:
          jmp       L1269
L1271:
          mov       D0,	1
          mov       [ax_genss.sizeoverride],	D0
          jmp       L1269
L1272:
          mov       D0,	8
          or        [ax_genss.rex],	D0
          jmp       L1269
L1273:
          jmp       L1269
L1274:
          mov       D0,	L4291
          push      D0
          call      ax_lib.gerror
L1269:
L1268:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC MAKEMODRM ============================================================
ax_genss.makemodrm:
L4292:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          shl       D0,	6
          mov       D1,	[Dframe+24]
          shl       D1,	3
          add       D0,	D1
          mov       D1,	[Dframe+32]
          add       D0,	D1
L1275:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC GENAMODE ============================================================
ax_genss.genamode:
L4293:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          sar       D0,	16
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          sar       D0,	8
          mov       D1,	255
          and       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	255
          and       D0,	D1
          mov       [Dframe+-24],	D0
          push      word64 [Dframe+-16]
          call      ax_genss.genbyte
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jl        L1277
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
L1277:
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jz        L1279
          mov       D1,	1
          cmp       D0,	D1
          jz        L1280
          mov       D1,	4
          cmp       D0,	D1
          jz        L1281
          jmp       L1282
L1279:
          jmp       L1278
L1280:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genbyte
          jmp       L1278
L1281:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1283
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genabs32
          jmp       L1284
L1283:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
L1284:
          jmp       L1278
L1282:
          mov       D0,	L4294
          push      D0
          call      ax_lib.gerror
L1278:
L1276:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      16
;PROC DO_NEG ============================================================
ax_genss.do_neg:
L4295:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1286
          mov       D0,	246
          jmp       L1287
L1286:
          mov       D0,	247
L1287:
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1289
          mov       D1,	3
          cmp       D0,	D1
          jz        L1289
          jmp       L1290
L1289:
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1288
L1290:
          mov       D0,	L4296
          push      D0
          call      ax_lib.gerror
L1288:
L1285:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC DO_INC ============================================================
ax_genss.do_inc:
L4297:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1292
          mov       D0,	254
          jmp       L1293
L1292:
          mov       D0,	255
L1293:
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1295
          mov       D1,	3
          cmp       D0,	D1
          jz        L1295
          jmp       L1296
L1295:
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.checkhighreg
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.setopsize
          call      ax_genss.genrex
          push      word64 [Dframe+-8]
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1294
L1296:
          mov       D0,	L4298
          push      D0
          call      ax_lib.gerror
L1294:
L1291:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC DO_POP ============================================================
ax_genss.do_pop:
L4299:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1299
          mov       D1,	3
          cmp       D0,	D1
          jz        L1300
          jmp       L1301
L1299:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jz        L1302
          mov       D0,	L4300
          push      D0
          call      ax_lib.gerror
L1302:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-8],	D0
          mov       D1,	8
          cmp       D0,	D1
          jl        L1303
          mov       D0,	1
          mov       [ax_genss.rex],	D0
          mov       D0,	7
          and       [Dframe+-8],	D0
L1303:
          call      ax_genss.genrex
          mov       D0,	88
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          jmp       L1298
L1300:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jz        L1304
          mov       D0,	L4301
          push      D0
          call      ax_lib.gerror
L1304:
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          call      ax_genss.genrex
          mov       D0,	143
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1298
L1301:
          mov       D0,	L4302
          push      D0
          call      ax_lib.gerror
L1298:
L1297:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC DO_PUSH ============================================================
ax_genss.do_push:
L4303:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1307
          mov       D1,	2
          cmp       D0,	D1
          jz        L1308
          mov       D1,	3
          cmp       D0,	D1
          jz        L1309
          jmp       L1310
L1307:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jz        L1311
          mov       D0,	L4304
          push      D0
          call      ax_lib.gerror
L1311:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          movzx     D0,	byte [D0+ax_tables.regcodes]
          mov       [Dframe+-8],	D0
          mov       D1,	8
          cmp       D0,	D1
          jl        L1312
          mov       D0,	1
          mov       [ax_genss.rex],	D0
          mov       D0,	7
          and       [Dframe+-8],	D0
L1312:
          call      ax_genss.genrex
          mov       D0,	80
          mov       D1,	[Dframe+-8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          jmp       L1306
L1308:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1314
          mov       D0,	104
          push      D0
          call      ax_genss.genbyte
          mov       D0,	4
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1313
L1314:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.isbytesized
          cmp       D0,	0
          jz        L1315
          mov       D0,	106
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genbyte
          jmp       L1313
L1315:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.isdwordsized
          cmp       D0,	0
          jz        L1316
          mov       D0,	104
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
          jmp       L1313
L1316:
          mov       D0,	L4305
          push      D0
          call      ax_lib.gerror
L1313:
          jmp       L1306
L1309:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	8
          cmp       D0,	D1
          jz        L1317
          mov       D0,	L4306
          push      D0
          call      ax_lib.gerror
L1317:
          mov       D0,	6
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.genrm
          mov       [Dframe+-16],	D0
          call      ax_genss.genrex
          mov       D0,	255
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genamode
          jmp       L1306
L1310:
          mov       D0,	L4307
          push      D0
          call      ax_lib.gerror
L1306:
L1305:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC ISDWORDSIZED ============================================================
ax_genss.isdwordsized:
L4308:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	-2147483648
          mov       D1,	[Dframe+16]
          cmp       D0,	D1
          setle     B0
          movzx     A0,	B0
          mov       D1,	[Dframe+16]
          mov       D2,	2147483647
          cmp       D1,	D2
          setle     B1
          movzx     A1,	B1
          and       D0,	D1
L1318:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ISBYTESIZED ============================================================
ax_genss.isbytesized:
L4309:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	-128
          mov       D1,	[Dframe+16]
          cmp       D0,	D1
          setle     B0
          movzx     A0,	B0
          mov       D1,	[Dframe+16]
          mov       D2,	127
          cmp       D1,	D2
          setle     B1
          movzx     A1,	B1
          and       D0,	D1
L1319:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENREX ============================================================
ax_genss.genrex:
L4310:
;-------------------------------------------------
          mov       D0,	[ax_genss.sizeoverride]
          cmp       D0,	0
          jz        L1321
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
L1321:
          mov       D0,	[ax_genss.addroverride]
          cmp       D0,	0
          jz        L1322
          mov       D0,	103
          push      D0
          call      ax_genss.genbyte
L1322:
          mov       D0,	[ax_genss.rex]
          cmp       D0,	0
          jz        L1323
          mov       D0,	[ax_genss.rex]
          mov       D1,	64
          cmp       D0,	D1
          jge       L1324
          mov       D0,	64
          mov       D1,	[ax_genss.rex]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          jmp       L1325
L1324:
          push      word64 [ax_genss.rex]
          call      ax_genss.genbyte
L1325:
L1323:
L1320:
;-------------------------------------------------
          ret       
;PROC DOFWDREFS ============================================================
ax_genss.dofwdrefs:
L4311:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1327
          add       Dstack,	56
          pop       Dframe
          retn      8
L1327:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       [Dframe+-8],	D0
          jmp       L1329
L1328:
          mov       D0,	[Dframe+-8]
          movsx     D0,	word32 [D0+8]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          movsx     D0,	word16 [D0+12]
          mov       D1,	4
          cmp       D0,	D1
          jz        L1332
          mov       D1,	2
          cmp       D0,	D1
          jz        L1333
          mov       D1,	1
          cmp       D0,	D1
          jz        L1333
          mov       D1,	6
          cmp       D0,	D1
          jz        L1334
          jmp       L1335
L1332:
          push      word64 [Dframe+-16]
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.bufferelemptr
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+24]
          mov       D1,	[Dframe+-16]
          sub       D0,	D1
          mov       D1,	4
          sub       D0,	D1
          mov       D1,	[Dframe+-40]
          mov       [D1],	A0
          jmp       L1331
L1333:
          mov       D0,	[Dframe+-8]
          movsx     D0,	word16 [D0+14]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1337
          mov       D1,	3
          cmp       D0,	D1
          jz        L1338
          mov       D1,	2
          cmp       D0,	D1
          jz        L1339
          jmp       L1340
L1337:
          mov       D0,	[ax_decls.ss_code]
          mov       [Dframe+-56],	D0
          jmp       L1336
L1338:
          mov       D0,	L4312
          push      D0
          call      ax_lib.gerror
          jmp       L1336
L1339:
          mov       D0,	[ax_decls.ss_idata]
          mov       [Dframe+-56],	D0
          jmp       L1336
L1340:
L1336:
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+-56]
          push      D0
          call      ax_lib.bufferelemptr
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+-8]
          movsx     D0,	word16 [D0+12]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1341
          mov       D0,	[Dframe+-40]
          movsx     D0,	word32 [D0]
          mov       D1,	[Dframe+16]
          movsx     D1,	word32 [D1+24]
          add       D0,	D1
          mov       D1,	[Dframe+-40]
          mov       [D1],	A0
          jmp       L1342
L1341:
          mov       D0,	[Dframe+-40]
          mov       [Dframe+-48],	D0
          mov       D0,	[D0]
          mov       D1,	[Dframe+16]
          movsx     D1,	word32 [D1+24]
          add       D0,	D1
          mov       D1,	[Dframe+-48]
          mov       [D1],	D0
L1342:
          jmp       L1331
L1334:
          push      word64 [Dframe+-16]
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.bufferelemptr
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+24]
          mov       D1,	[Dframe+-16]
          sub       D0,	D1
          mov       D1,	1
          sub       D0,	D1
          mov       D1,	[Dframe+-32]
          mov       [D1],	B0
          jmp       L1331
L1335:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          movsx     D1,	word16 [D1+12]
          mov       D1,	[D1*8+ax_objdecls.relocnames]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4313
          push      D0
          call      ax_lib.gerror
L1331:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
L1329:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L1328
L1330:
L1326:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          retn      8
;PROC GETREL32 ============================================================
ax_genss.getrel32:
L4314:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+41]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1344
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+42]
          mov       D1,	[ax_genss.currseg]
          cmp       D0,	D1
          jz        L1345
          mov       D0,	L4315
          push      D0
          call      ax_lib.gerror
L1345:
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+24]
          mov       D1,	[Dframe+24]
          mov       D2,	1
          add       D1,	D2
          sub       D0,	D1
          jmp       L1346
L1344:
          mov       D0,	2147483647
L1346:
L1343:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GENABS64 ============================================================
ax_genss.genabs64:
L4316:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0+41]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1349
          mov       D1,	1
          cmp       D0,	D1
          jz        L1350
          jmp       L1351
L1349:
          mov       D0,	[Dframe+-8]
          movsx     D0,	word32 [D0+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genqword
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          push      D0
          push      D1
          call      ax_genss.addrelocitem
          jmp       L1348
L1350:
          push      word64 [ax_genss.currseg]
          mov       D0,	2
          mov       D1,	5
          push      D0
          push      D1
          call      ax_genss.getcurrdatalen
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      ax_genss.addfwdref
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genqword
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          push      D0
          push      D1
          call      ax_genss.addrelocitem
          jmp       L1348
L1351:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genqword
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          push      D0
          push      D1
          call      ax_genss.addrelocitem
L1348:
L1347:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GENABS32 ============================================================
ax_genss.genabs32:
L4317:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0+41]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1354
          mov       D1,	1
          cmp       D0,	D1
          jz        L1355
          jmp       L1356
L1354:
          mov       D0,	[Dframe+-8]
          movsx     D0,	word32 [D0+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.gendword
          mov       D0,	[Dframe+-8]
          mov       D1,	2
          push      D0
          push      D1
          call      ax_genss.addrelocitem
          jmp       L1353
L1355:
          push      word64 [ax_genss.currseg]
          mov       D0,	2
          mov       D1,	4
          push      D0
          push      D1
          call      ax_genss.getcurrdatalen
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      ax_genss.addfwdref
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
          mov       D0,	[Dframe+-8]
          mov       D1,	2
          push      D0
          push      D1
          call      ax_genss.addrelocitem
          jmp       L1353
L1356:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
          mov       D0,	[Dframe+-8]
          mov       D1,	2
          push      D0
          push      D1
          call      ax_genss.addrelocitem
L1353:
L1352:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GENREL32 ============================================================
ax_genss.genrel32:
L4318:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1358
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
          add       Dstack,	8
          pop       Dframe
          retn      8
L1358:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+41]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1360
          mov       D1,	1
          cmp       D0,	D1
          jz        L1361
          jmp       L1362
L1360:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+42]
          mov       D1,	[ax_genss.currseg]
          cmp       D0,	D1
          jz        L1363
          mov       D0,	L4319
          push      D0
          call      ax_lib.gerror
L1363:
          mov       D0,	[Dframe+-8]
          movsx     D0,	word32 [D0+24]
          mov       D1,	2
          push      D0
          push      D1
          call      ax_genss.getcurrdatalen
          mov       D1,	4
          add       D0,	D1
          pop       D1
          sub       D1,	D0
          push      D1
          call      ax_genss.gendword
          jmp       L1359
L1361:
          mov       D0,	0
          mov       D1,	4
          mov       D2,	3
          push      D0
          push      D1
          push      D2
          call      ax_genss.getcurrdatalen
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      ax_genss.addfwdref
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	0
          push      D0
          call      ax_genss.gendword
          jmp       L1359
L1362:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
          mov       D0,	[Dframe+-8]
          mov       D1,	4
          push      D0
          push      D1
          call      ax_genss.addrelocitem
L1359:
L1357:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GETSTINDEX ============================================================
ax_genss.getstindex:
L4320:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+28]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1365
          mov       D0,	[ax_decls.ss_nsymbols]
          mov       D1,	[ax_decls.ss_symboltablesize]
          cmp       D0,	D1
          jl        L1366
          call      ax_genss.extendsymboltable
L1366:
          lea       D0,	[ax_decls.ss_nsymbols]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	[Dframe+16]
          mov       [D0+28],	A1
          mov       D0,	[Dframe+16]
          mov       D1,	[ax_decls.ss_symboltable]
          mov       D2,	[Dframe+16]
          movsx     D2,	word32 [D2+28]
          mov       [D1+D2*8-8],	D0
L1365:
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+28]
L1364:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ADDRELOCITEM ============================================================
ax_genss.addrelocitem:
L4321:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_genss.getstindex
          mov       [Dframe+-16],	D0
          mov       D0,	4
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1368
          mov       D0,	8
          mov       [Dframe+-24],	D0
L1368:
          mov       D0,	32
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_genss.currrelocs]
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	1
          push      D0
          call      ax_genss.getcurrdatalen
          mov       D1,	[Dframe+-24]
          sub       D0,	D1
          mov       D1,	[Dframe+-8]
          mov       [D1+16],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          mov       [D1+24],	D0
          inc       word64 [ax_genss.nrelocs]
          mov       D0,	[Dframe+-8]
          mov       [ax_genss.currrelocs],	D0
L1367:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      16
;PROC GENOPND ============================================================
ax_genss.genopnd:
L4322:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1370
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       [Dframe+24],	D0
L1370:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          sub       D0,	2
          cmp       D0,	5
          jae       L1373
          jmp       [D0*8+L1372]
          isegment  
L1372:
          dq        L1374
          dq        L1374
          dq        L1373
          dq        L1373
          dq        L1375
          csegment  
L1374:
          jmp       L1371
L1375:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       [Dframe+-8],	D0
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-24],	D0
          mov       D1,	100
          cmp       D0,	D1
          jle       L1376
          mov       D0,	1024
          mov       D1,	[Dframe+-24]
          mov       D2,	1
          add       D1,	D2
          cmp       D0,	D1
          cmovl     D0,	D1
          mov       D1,	[ax_genss.currdata]
          push      D0
          push      D1
          call      ax_lib.buffercheck
L1376:
          jmp       L1378
L1377:
          lea       D0,	[Dframe+-8]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          push      D1
          call      ax_genss.genbyte
L1378:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L1377
L1379:
          add       Dstack,	24
          pop       Dframe
          retn      16
          jmp       L1371
L1373:
          mov       D0,	L4323
          push      D0
          call      ax_lib.gerror
L1371:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1380
          mov       D0,	[Dframe+24]
          mov       D1,	2
          cmp       D0,	D1
          jg        L1380
          mov       D0,	L4324
          push      D0
          call      ax_lib.gerror
L1380:
          mov       D0,	[Dframe+24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1382
          mov       D1,	2
          cmp       D0,	D1
          jz        L1383
          mov       D1,	4
          cmp       D0,	D1
          jz        L1384
          mov       D1,	8
          cmp       D0,	D1
          jz        L1385
          jmp       L1386
L1382:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genbyte
          jmp       L1381
L1383:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genword
          jmp       L1381
L1384:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1387
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genabs32
          jmp       L1388
L1387:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+22]
          cmp       D0,	0
          jz        L1389
          mov       D0,	[Dframe+16]
          movq      XMM0,	[D0+8]
          movq      D13,	XMM0
          push      D13
          call      ax_genss.getr32bits
          push      D0
          call      ax_genss.gendword
          jmp       L1390
L1389:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.gendword
L1390:
L1388:
          jmp       L1381
L1385:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1391
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_genss.genabs64
          jmp       L1392
L1391:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+22]
          cmp       D0,	0
          jz        L1393
          mov       D0,	[Dframe+-16]
          push      D0
          call      ax_genss.genqword
          jmp       L1394
L1393:
          push      word64 [Dframe+-16]
          call      ax_genss.genqword
L1394:
L1392:
          jmp       L1381
L1386:
L1381:
L1369:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      16
;PROC GENQWORD ============================================================
ax_genss.genqword:
L4325:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          push      word64 [Dframe+16]
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.addqword
L1395:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENDWORD ============================================================
ax_genss.gendword:
L4326:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          push      word64 [Dframe+16]
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.adddword
L1396:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENWORD ============================================================
ax_genss.genword:
L4327:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          push      word64 [Dframe+16]
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.addword
L1397:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENBYTE ============================================================
ax_genss.genbyte:
L4328:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	[ax_genss.currdata]
          lea       D1,	[D1+8]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
L1398:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC DOINSTR ============================================================
ax_genss.doinstr:
L4329:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	80
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       [ax_genss.currmcl],	D0
          mov       D0,	1024
          mov       D1,	[ax_genss.currdata]
          push      D0
          push      D1
          call      ax_lib.buffercheck
          mov       D0,	0
          mov       [ax_genss.f3override],	D0
          mov       [ax_genss.f2override],	D0
          mov       [ax_genss.addroverride],	D0
          mov       [ax_genss.sizeoverride],	D0
          mov       [ax_genss.rex],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          sub       D0,	4
          cmp       D0,	141
          jae       L1402
          jmp       [D0*8+L1401]
          isegment  
L1401:
          dq        L1403
          dq        L1420
          dq        L1494
          dq        L1402
          dq        L1402
          dq        L1433
          dq        L1428
          dq        L1429
          dq        L1434
          dq        L1495
          dq        L1477
          dq        L1478
          dq        L1435
          dq        L1436
          dq        L1437
          dq        L1405
          dq        L1425
          dq        L1426
          dq        L1406
          dq        L1407
          dq        L1438
          dq        L1432
          dq        L1432
          dq        L1432
          dq        L1432
          dq        L1431
          dq        L1431
          dq        L1439
          dq        L1402
          dq        L1431
          dq        L1431
          dq        L1432
          dq        L1432
          dq        L1432
          dq        L1471
          dq        L1432
          dq        L1470
          dq        L1470
          dq        L1470
          dq        L1470
          dq        L1470
          dq        L1470
          dq        L1470
          dq        L1431
          dq        L1431
          dq        L1430
          dq        L1430
          dq        L1421
          dq        L1422
          dq        L1423
          dq        L1424
          dq        L1476
          dq        L1509
          dq        L1509
          dq        L1480
          dq        L1479
          dq        L1479
          dq        L1479
          dq        L1479
          dq        L1479
          dq        L1480
          dq        L1480
          dq        L1480
          dq        L1480
          dq        L1484
          dq        L1485
          dq        L1482
          dq        L1481
          dq        L1482
          dq        L1481
          dq        L1482
          dq        L1482
          dq        L1488
          dq        L1489
          dq        L1490
          dq        L1491
          dq        L1492
          dq        L1493
          dq        L1487
          dq        L1486
          dq        L1505
          dq        L1505
          dq        L1483
          dq        L1483
          dq        L1497
          dq        L1497
          dq        L1497
          dq        L1498
          dq        L1498
          dq        L1498
          dq        L1499
          dq        L1499
          dq        L1499
          dq        L1499
          dq        L1496
          dq        L1496
          dq        L1496
          dq        L1496
          dq        L1496
          dq        L1496
          dq        L1496
          dq        L1496
          dq        L1479
          dq        L1479
          dq        L1480
          dq        L1480
          dq        L1414
          dq        L1415
          dq        L1416
          dq        L1417
          dq        L1418
          dq        L1419
          dq        L1402
          dq        L1402
          dq        L1402
          dq        L1455
          dq        L1440
          dq        L1440
          dq        L1440
          dq        L1440
          dq        L1475
          dq        L1472
          dq        L1472
          dq        L1472
          dq        L1473
          dq        L1474
          dq        L1500
          dq        L1501
          dq        L1502
          dq        L1503
          dq        L1504
          dq        L1508
          dq        L1506
          dq        L1507
          dq        L1507
          dq        L1507
          dq        L1507
          dq        L1507
          dq        L1507
          dq        L1507
          dq        L1420
          csegment  
L1403:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       [Dframe+-24],	D0
          mov       D0,	2
          mov       D1,	[Dframe+-24]
          mov       [D1+41],	B0
          mov       D0,	[ax_genss.currseg]
          mov       D1,	[Dframe+-24]
          mov       [D1+42],	B0
          mov       D0,	6
          push      D0
          call      ax_genss.getcurrdatalen
          mov       D1,	[Dframe+-24]
          mov       [D1+24],	A0
          mov       D0,	[Dframe+-24]
          movzx     D0,	byte [D0+36]
          mov       D1,	22
          cmp       D0,	D1
          jnz       L1404
          mov       D0,	[Dframe+-24]
          push      D0
          call      ax_genss.getstindex
L1404:
          mov       D0,	[Dframe+-24]
          push      D0
          call      ax_genss.dofwdrefs
          jmp       L1400
L1405:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_genss.do_call
          jmp       L1400
L1406:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_jmp
          jmp       L1400
L1407:
          mov       D0,	7
          push      D0
          call      ax_genss.getcurrdatalen
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      ax_genss.getrel32
          mov       [Dframe+-48],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L1408
          mov       D0,	[Dframe+-48]
          mov       D1,	-126
          cmp       D0,	D1
          jge       L1409
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	128
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+-48]
          mov       D1,	4
          sub       D0,	D1
          push      D0
          call      ax_genss.gendword
          jmp       L1410
L1409:
          mov       D0,	112
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          push      word64 [Dframe+-48]
          call      ax_genss.genbyte
L1410:
          jmp       L1411
L1408:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_genss.checkshortjump
          mov       [Dframe+-56],	D0
          cmp       D0,	0
          jnz       L1412
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	128
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+-16]
          push      D0
          call      ax_genss.genrel32
          jmp       L1413
L1412:
          mov       D0,	112
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+8]
          add       D0,	D1
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+-16]
          push      D0
          call      ax_genss.genrel8
L1413:
L1411:
          jmp       L1400
L1414:
          mov       D0,	1
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1400
L1415:
          mov       D0,	2
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1400
L1416:
          mov       D0,	4
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1400
L1417:
          mov       D0,	8
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.genopnd
          jmp       L1400
L1418:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_genss.genrel32
          jmp       L1400
L1419:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.switchseg
          jmp       L1400
L1420:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1421:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          mov       D0,	152
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1422:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          mov       D0,	153
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1423:
          mov       D0,	153
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1424:
          mov       D0,	72
          push      D0
          call      ax_genss.genbyte
          mov       D0,	153
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1425:
          mov       D0,	195
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1426:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1427
          mov       D0,	L4330
          push      D0
          call      ax_lib.gerror
L1427:
          mov       D0,	194
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+8]
          push      D0
          call      ax_genss.genword
          jmp       L1400
L1428:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_genss.do_push
          jmp       L1400
L1429:
          mov       D0,	[Dframe+-8]
          push      D0
          call      ax_genss.do_pop
          jmp       L1400
L1430:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_inc
          jmp       L1400
L1431:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_neg
          jmp       L1400
L1432:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_arith
          jmp       L1400
L1433:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_mov
          jmp       L1400
L1434:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_lea
          jmp       L1400
L1435:
          mov       D0,	190
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_movsx
          jmp       L1400
L1436:
          mov       D0,	182
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_movsx
          jmp       L1400
L1437:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_movsxd
          jmp       L1400
L1438:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_exch
          jmp       L1400
L1439:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_imul2
          jmp       L1400
L1440:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1441
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+8]
          mov       D1,	[Dframe+16]
          movzx     D1,	word16 [D1+24]
          movzx     D1,	byte [D1+ax_tables.mclcodes-1]
          imul2     D0,	D1
          mov       [Dframe+-64],	D0
          mov       D0,	[ax_genss.currseg]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1443
          mov       D1,	2
          cmp       D0,	D1
          jz        L1444
          jmp       L1445
L1443:
L1446:
          mov       D0,	[Dframe+-64]
          mov       [Dframe+-72],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L1449
L1447:
          mov       D0,	144
          push      D0
          call      ax_genss.genbyte
L1448:
          dec       word64 [Dframe+-72]
          mov       D0,	[Dframe+-72]
          cmp       D0,	0
          jnz       L1447
L1449:
          jmp       L1442
L1444:
L1450:
          mov       D0,	[Dframe+-64]
          mov       [Dframe+-80],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L1453
L1451:
          mov       D0,	0
          push      D0
          call      ax_genss.genbyte
L1452:
          dec       word64 [Dframe+-80]
          mov       D0,	[Dframe+-80]
          cmp       D0,	0
          jnz       L1451
L1453:
          jmp       L1442
L1445:
          mov       D0,	[Dframe+-64]
          add       [ax_decls.ss_zdatalen],	D0
L1442:
          jmp       L1454
L1441:
          mov       D0,	L4331
          push      D0
          call      ax_lib.gerror
L1454:
          jmp       L1400
L1455:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1456
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+8]
          mov       [Dframe+-40],	D0
          mov       D1,	1
          cmp       D0,	D1
          jl        L1458
          mov       D0,	[Dframe+-40]
          mov       D1,	16384
          cmp       D0,	D1
          jle       L1457
L1458:
          mov       D0,	L4332
          push      D0
          call      ax_lib.gerror
L1457:
          mov       D0,	[ax_genss.currseg]
          mov       D1,	3
          cmp       D0,	D1
          jz        L1459
          jmp       L1461
L1460:
          mov       D0,	[ax_genss.currseg]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1463
          mov       D0,	144
          jmp       L1464
L1463:
          mov       D0,	0
L1464:
          push      D0
          call      ax_genss.genbyte
L1461:
          mov       D0,	[ax_genss.currdata]
          push      D0
          call      ax_lib.bufferlength
          mov       D1,	[Dframe+-40]
          cqo       
          idiv      D1
          xchg      D0,	D11
          cmp       D0,	0
          jnz       L1460
L1462:
          jmp       L1465
L1459:
          jmp       L1467
L1466:
          inc       word64 [ax_decls.ss_zdatalen]
L1467:
          mov       D0,	[ax_decls.ss_zdatalen]
          mov       D1,	[Dframe+-40]
          cqo       
          idiv      D1
          xchg      D0,	D11
          cmp       D0,	0
          jnz       L1466
L1468:
L1465:
          jmp       L1469
L1456:
          mov       D0,	L4333
          push      D0
          call      ax_lib.gerror
L1469:
          jmp       L1400
L1470:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_shift
          jmp       L1400
L1471:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_test
          jmp       L1400
L1472:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_loop
          jmp       L1400
L1473:
          mov       D0,	4
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_jcxz
          jmp       L1400
L1474:
          mov       D0,	8
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_jcxz
          jmp       L1400
L1475:
          mov       D0,	215
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1476:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_setcc
          jmp       L1400
L1477:
          mov       D0,	4
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_movxmm
          jmp       L1400
L1478:
          mov       D0,	8
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_movxmm
          jmp       L1400
L1479:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	243
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_arithxmm
          jmp       L1400
L1480:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	242
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_arithxmm
          jmp       L1400
L1481:
          mov       D0,	4
          mov       D1,	[Dframe+16]
          movzx     D1,	word16 [D1+24]
          movzx     D1,	byte [D1+ax_tables.mclcodes-1]
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_logicxmm
          jmp       L1400
L1482:
          mov       D0,	8
          mov       D1,	[Dframe+16]
          movzx     D1,	word16 [D1+24]
          movzx     D1,	byte [D1+ax_tables.mclcodes-1]
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_logicxmm
          jmp       L1400
L1483:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+16]
          movzx     D1,	word16 [D1+26]
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_pcmpistri
          jmp       L1400
L1484:
          mov       D0,	47
          mov       D1,	0
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_arithxmm
          jmp       L1400
L1485:
          mov       D0,	47
          mov       D1,	102
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_arithxmm
          jmp       L1400
L1486:
          mov       D0,	243
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_convertfloat
          jmp       L1400
L1487:
          mov       D0,	242
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_convertfloat
          jmp       L1400
L1488:
          mov       D0,	45
          mov       D1,	243
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_fix
          jmp       L1400
L1489:
          mov       D0,	45
          mov       D1,	242
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_fix
          jmp       L1400
L1490:
          mov       D0,	44
          mov       D1,	243
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_fix
          jmp       L1400
L1491:
          mov       D0,	44
          mov       D1,	242
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      ax_genss.do_fix
          jmp       L1400
L1492:
          mov       D0,	243
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_float
          jmp       L1400
L1493:
          mov       D0,	242
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_float
          jmp       L1400
L1494:
          mov       D0,	[Dframe+-8]
          mov       [ax_genss.extraparam],	D0
          jmp       L1400
L1495:
          mov       D0,	[Dframe+-16]
          mov       D1,	[ax_genss.extraparam]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_cmovcc
          jmp       L1400
L1496:
          mov       D0,	217
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1497:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	1
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_fmem
          jmp       L1400
L1498:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	0
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_fmem
          jmp       L1400
L1499:
          mov       D0,	222
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1500:
          mov       D0,	166
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1501:
          mov       D0,	102
          push      D0
          call      ax_genss.genbyte
          mov       D0,	167
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1502:
          mov       D0,	167
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1503:
          mov       D0,	72
          push      D0
          call      ax_genss.genbyte
          mov       D0,	167
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1504:
          mov       D0,	15
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1505:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_movdqx
          jmp       L1400
L1506:
          mov       D0,	219
          push      D0
          call      ax_genss.genbyte
          mov       D0,	227
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1507:
          mov       D0,	217
          push      D0
          call      ax_genss.genbyte
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          push      D0
          call      ax_genss.genbyte
          jmp       L1400
L1508:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_genss.do_popcnt
          jmp       L1400
L1509:
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          movzx     D0,	byte [D0+ax_tables.mclcodes-1]
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_genss.do_bsf
          jmp       L1400
L1402:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4334
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          movzx     D1,	word16 [D1+24]
          mov       D1,	[D1*8+ax_tables.mclnames-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4335
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.alineno]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1400:
L1399:
;-------------------------------------------------
          add       Dstack,	80
          pop       Dframe
          retn      16
;PROC GENSS ============================================================
ax_genss.genss::
L4336:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	0
          mov       [ax_decls.ss_zdatalen],	D0
          mov       D0,	1024
          push      D0
          call      ax_lib.buffercreate
          mov       [ax_decls.ss_zdata],	D0
          mov       D0,	1024
          push      D0
          call      ax_lib.buffercreate
          mov       [ax_decls.ss_idata],	D0
          mov       D0,	1024
          push      D0
          call      ax_lib.buffercreate
          mov       [ax_decls.ss_code],	D0
          mov       D0,	0
          mov       [ax_decls.ss_idatarelocs],	D0
          mov       D0,	0
          mov       [ax_decls.ss_coderelocs],	D0
          mov       D0,	0
          mov       [ax_decls.ss_nsymbols],	D0
          mov       D0,	1
          push      D0
          call      ax_genss.switchseg
          mov       D0,	9999
          mov       [ax_decls.alineno],	D0
          mov       D0,	0
          mov       [ax_genss.extraparam],	D0
          mov       D0,	[ax_lib.mccode]
          mov       [Dframe+-16],	D0
          mov       D0,	0
          mov       [Dframe+-8],	D0
          jmp       L1512
L1511:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0+28]
          mov       [ax_decls.alineno],	D0
          lea       D0,	[Dframe+-8]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	[Dframe+-16]
          push      D1
          push      D0
          call      ax_genss.doinstr
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0]
          mov       [Dframe+-16],	D0
L1512:
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jnz       L1511
L1513:
          mov       D0,	0
          push      D0
          call      ax_genss.switchseg
          mov       D0,	[ax_decls.ss_zdata]
          push      D0
          call      ax_lib.bufferlength
          cmp       D0,	0
          jz        L1514
          mov       D0,	L4337
          push      D0
          call      ax_lib.gerror
L1514:
L1510:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC PRINTDUPLTABLE ============================================================
ax_lib.printdupltable::
L4338:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	296
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4340
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1516:
          mov       D0,	0
          mov       [Dframe+-288],	D0
          mov       D0,	65535
          mov       [Dframe+-296],	D0
L1517:
          mov       D0,	[Dframe+-288]
          mov       D0,	[D0*8+ax_decls.dupltable]
          cmp       D0,	0
          jz        L1520
          mov       D0,	[Dframe+-288]
          mov       D0,	[D0*8+ax_decls.dupltable]
          mov       [Dframe+-264],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4341
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-264]
          movzx     D1,	word32 [D1+76]
          movzx     D1,	A1
          push      D0
          push      D1
          call      [L3648]	!print_u64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4342
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          jmp       L1522
L1521:
          lea       D0,	[Dframe+-256]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4343
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	L4344
          push      D0
          mov       D0,	[Dframe+-264]
          movzx     D0,	word32 [D0+72]
          movzx     D0,	A0
          push      D0
          call      [L3648]	!print_u64
          mov       D0,	0
          mov       D1,	[Dframe+-264]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[Dframe+-264]
          movsx     D2,	word32 [D2+68]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	L4345
          push      D0
          mov       D0,	[Dframe+-264]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-264]
          mov       D0,	[D0+60]
          mov       [Dframe+-264],	D0
L1522:
          mov       D0,	[Dframe+-264]
          cmp       D0,	0
          jnz       L1521
L1523:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1520:
L1518:
          mov       D0,	[Dframe+-288]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-288],	D0
          mov       D1,	[Dframe+-296]
          cmp       D0,	D1
          jle       L1517
L1519:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1515:
;-------------------------------------------------
          add       Dstack,	296
          pop       Dframe
          retn      8
;PROC PRINTIMPORTSYMBOLS ============================================================
ax_lib.printimportsymbols::
L4346:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4347
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.globalimportlist]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	[ax_decls.globalimportlist]
          mov       [Dframe+-24],	D0
          jmp       L1526
L1525:
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4348
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4349
          mov       D2,	14
          mov       D3,	[Dframe+-8]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4349
          mov       D2,	12
          mov       D3,	[Dframe+-8]
          movzx     D3,	byte [D3+36]
          mov       D3,	[D3*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4350
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          movsx     D1,	word32 [D1+24]
          movsx     D1,	A1
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          movzx     D1,	byte [D1+41]
          mov       D1,	[D1*8+ax_tables.reftypenames]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0+8]
          mov       [Dframe+-24],	D0
L1526:
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jnz       L1525
L1527:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1524:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      8
;PROC PRINTMODULESYMBOLS ============================================================
ax_lib.printmodulesymbols::
L4351:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	272
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4352
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[ax_decls.currmoduleno]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	[ax_decls.modulenamelist]
          mov       [Dframe+-264],	D0
          jmp       L1530
L1529:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4353
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4354
          mov       D2,	14
          mov       D3,	[Dframe+-264]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4354
          mov       D2,	12
          mov       D3,	[Dframe+-264]
          movzx     D3,	byte [D3+36]
          mov       D3,	[D3*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	L4355
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	L4356
          push      D0
          mov       D0,	[Dframe+-264]
          movzx     D0,	word32 [D0+76]
          movzx     D0,	A0
          push      D0
          call      [L3648]	!print_u64
          mov       D0,	L4356
          push      D0
          mov       D0,	[Dframe+-264]
          movzx     D0,	word32 [D0+72]
          movzx     D0,	A0
          push      D0
          call      [L3648]	!print_u64
          mov       D0,	L4357
          push      D0
          mov       D0,	[Dframe+-264]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-264]
          movzx     D0,	word32 [D0+76]
          mov       D0,	[D0*8+ax_decls.dupltable]
          mov       [Dframe+-272],	D0
          cmp       D0,	0
          jz        L1532
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4358
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          jmp       L1534
L1533:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4359
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[Dframe+-272]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4360
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-272]
          mov       D0,	[D0+60]
          mov       [Dframe+-272],	D0
L1534:
          mov       D0,	[Dframe+-272]
          cmp       D0,	0
          jnz       L1533
L1535:
L1532:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4361
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          push      D0
          mov       D0,	[Dframe+-264]
          mov       D0,	[D0+44]
          cmp       D0,	0
          jz        L1536
          mov       D0,	[Dframe+-264]
          mov       D0,	[D0+44]
          mov       D0,	[D0]
          jmp       L1537
L1536:
          mov       D0,	L4362
L1537:
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-264]
          mov       D1,	[D1+44]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-264]
          mov       D0,	[D0+52]
          mov       [Dframe+-264],	D0
L1530:
          mov       D0,	[Dframe+-264]
          cmp       D0,	0
          jnz       L1529
L1531:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1528:
;-------------------------------------------------
          add       Dstack,	272
          pop       Dframe
          retn      8
;PROC ADDQWORD ============================================================
ax_lib.addqword::
L4363:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          mov       [D1],	D0
          mov       D0,	[Dframe+16]
          lea       D0,	[D0+8]
          add       word64 [D0],	8
L1538:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC ADDDWORD ============================================================
ax_lib.adddword::
L4364:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          mov       [D1],	A0
          mov       D0,	[Dframe+16]
          lea       D0,	[D0+8]
          add       word64 [D0],	4
L1539:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC ADDWORD ============================================================
ax_lib.addword::
L4365:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          mov       [D1],	W0
          mov       D0,	[Dframe+16]
          lea       D0,	[D0+8]
          add       word64 [D0],	2
L1540:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC ADDBYTE ============================================================
ax_lib.addbyte::
L4366:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          mov       [D1],	B0
          mov       D0,	[Dframe+16]
          lea       D0,	[D0+8]
          inc       word64 [D0]
L1541:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC BUFFERELEMPTR ============================================================
ax_lib.bufferelemptr::
L4367:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	[Dframe+24]
          lea       D0,	[D0+D1]
L1542:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC BUFFERLENGTH ============================================================
ax_lib.bufferlength::
L4368:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          sub       D0,	D1
L1543:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC BUFFERCHECK ============================================================
ax_lib.buffercheck::
L4369:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          jmp       L1546
L1545:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.bufferexpand
L1546:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          sub       D0,	D1
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jl        L1545
L1547:
L1544:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC BUFFEREXPAND ============================================================
ax_lib.bufferexpand:
L4370:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+24]
          shl       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          sub       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+24]
          cmp       D0,	D1
          jle       L1549
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4371
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	0
          push      D0
          call      [L3674]	!stop
L1549:
          push      word64 [Dframe+-8]
          call      mlib.pcm_alloc
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          mov       D2,	[Dframe+-24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+16]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          mov       [D1+24],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-8]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+16]
          mov       [D1+16],	D0
L1548:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      8
;PROC BUFFERCREATE ============================================================
ax_lib.buffercreate::
L4372:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	32
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+24],	D0
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+24]
          push      D0
          call      mlib.pcm_alloc
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1+24]
          lea       D0,	[D0+D1]
          mov       D1,	[Dframe+-8]
          mov       [D1+16],	D0
          mov       D0,	[Dframe+-8]
L1550:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC REALTOSTR ============================================================
ax_lib.realtostr:
L4373:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.strreal
          lea       D1,	[ax_lib.realtostr.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[ax_lib.realtostr.str]
L1551:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC INTTOSTR ============================================================
ax_lib.inttostr:
L4374:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          lea       D0,	[ax_lib.inttostr.str]
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.getstrint
          lea       D0,	[ax_lib.inttostr.str]
L1552:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC SERROR_S ============================================================
ax_lib.serror_s::
L4375:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	256
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          lea       D2,	[Dframe+-256]
          push      D0
          push      D1
          push      D2
          mov       D0,	`sprintf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-256]
          push      D0
          call      ax_lib.serror
L1553:
;-------------------------------------------------
          add       Dstack,	256
          pop       Dframe
          retn      16
;PROC SERROR ============================================================
ax_lib.serror::
L4376:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4377
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4378
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.lxlineno]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          lea       D1,	[ax_decls.moduletable]
          mov       D2,	[ax_decls.currmoduleno]
          imul2     D2,	24
          lea       D1,	[D1+D2-24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L1554:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GERROR ============================================================
ax_lib.gerror::
L4379:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4380
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4381
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.alineno]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L1555:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC CREATENAMEDCONST ============================================================
ax_lib.createnamedconst::
L4382:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	18
          mov       D1,	[Dframe+16]
          mov       [D1+36],	B0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       [D1+16],	D0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.adddef
L1556:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC CREATELABEL ============================================================
ax_lib.createlabel::
L4383:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       [D1+36],	B0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       [D1+28],	A0
          mov       D0,	[ax_decls.currmoduleno]
          mov       D1,	[Dframe+16]
          mov       [D1+68],	A0
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.adddef
L1557:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC ADDIMPORT ============================================================
ax_lib.addimport::
L4384:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	16
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[ax_decls.globalimportlist]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+-8]
          mov       [ax_decls.globalimportlist],	D0
L1558:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC ADDDEF ============================================================
ax_lib.adddef::
L4385:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_decls.modulenamelist]
          mov       D1,	[Dframe+16]
          mov       [D1+52],	D0
          mov       D0,	[Dframe+16]
          mov       [ax_decls.modulenamelist],	D0
L1559:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PRINTSTREC ============================================================
ax_lib.printstrec::
L4386:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+36]
          mov       D1,	19
          cmp       D0,	D1
          jz        L1562
          mov       D1,	20
          cmp       D0,	D1
          jz        L1562
          mov       D1,	22
          cmp       D0,	D1
          jz        L1562
          mov       D1,	21
          cmp       D0,	D1
          jz        L1563
          mov       D1,	18
          cmp       D0,	D1
          jz        L1564
          jmp       L1565
L1562:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4387
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4388
          mov       D2,	16
          mov       D3,	[Dframe+24]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          push      D0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+40]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L1566
          mov       D0,	L4389
          jmp       L1567
L1566:
          mov       D0,	L4390
L1567:
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1+36]
          mov       D1,	[D1*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4391
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4392
          mov       D2,	12
          push      D0
          push      D1
          push      D2
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+42]
          cmp       D0,	0
          jz        L1568
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+42]
          mov       D0,	[D0*8+ax_tables.segmentnames-8]
          jmp       L1569
L1568:
          mov       D0,	L4393
L1569:
          push      D0
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+24]
          movsx     D1,	word32 [D1+24]
          movsx     D1,	A1
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          jmp       L1561
L1563:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4394
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4395
          mov       D2,	16
          mov       D3,	[Dframe+24]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4396
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          jmp       L1561
L1564:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4397
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4398
          mov       D2,	16
          mov       D3,	[Dframe+24]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4399
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	0
          mov       D2,	[Dframe+24]
          mov       D2,	[D2+16]
          push      D0
          push      D1
          push      D2
          call      ax_lib.stropnd
          push      D0
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          jmp       L1561
L1565:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4400
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1561:
L1560:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC PRINTST ============================================================
ax_lib.printst::
L4401:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[ax_decls.modulenamelist]
          mov       [Dframe+-8],	D0
          jmp       L1572
L1571:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_lib.printstrec
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0+52]
          mov       [Dframe+-8],	D0
L1572:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L1571
L1573:
L1570:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      8
;PROC XGETREGNAME ============================================================
ax_lib.xgetregname::
L4402:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          lea       D0,	[ax_lib.xgetregname.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	0
          mov       D1,	L4403
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D2,	1
          sub       D1,	D2
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
          lea       D0,	[ax_lib.xgetregname.str]
L1574:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GETREGNAME ============================================================
ax_lib.getregname::
L4404:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jz        L1577
          mov       D1,	15
          cmp       D0,	D1
          jz        L1578
          mov       D1,	16
          cmp       D0,	D1
          jz        L1579
          jmp       L1580
L1577:
          mov       D0,	L4405
          add       Dstack,	16
          pop       Dframe
          retn      16
          jmp       L1576
L1578:
          mov       D0,	L4406
          mov       [Dframe+-16],	D0
          jmp       L1576
L1579:
          mov       D0,	L4407
          mov       [Dframe+-16],	D0
          jmp       L1576
L1580:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          sub       D0,	D1
          push      D0
          call      ax_lib.inttostr
          mov       [Dframe+-16],	D0
L1576:
          mov       D0,	[Dframe+24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1582
          mov       D1,	2
          cmp       D0,	D1
          jz        L1583
          mov       D1,	4
          cmp       D0,	D1
          jz        L1584
          jmp       L1585
L1582:
          mov       D0,	L4408
          mov       [Dframe+-8],	D0
          jmp       L1581
L1583:
          mov       D0,	L4409
          mov       [Dframe+-8],	D0
          jmp       L1581
L1584:
          mov       D0,	L4410
          mov       [Dframe+-8],	D0
          jmp       L1581
L1585:
          mov       D0,	L4411
          mov       [Dframe+-8],	D0
L1581:
          mov       D0,	[Dframe+-8]
          lea       D1,	[ax_lib.getregname.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_lib.getregname.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[ax_lib.getregname.str]
L1575:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC GETFULLNAME ============================================================
ax_lib.getfullname::
L4412:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	L4413
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+44]
          cmp       D0,	0
          jz        L1587
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+44]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
L1587:
          lea       D0,	[ax_lib.getfullname.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4414
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4415
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          movsx     D1,	word32 [D1+68]
          movsx     D1,	A1
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	L4416
          push      D0
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4045]	!print_ptr
          mov       D0,	L4417
          push      D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+36]
          mov       D0,	[D0*8+ax_tables.symbolnames-8]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	3
          sub       D0,	D1
          push      D0
          call      [L3658]	!print_i64
          mov       D0,	L4418
          push      D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+36]
          mov       D0,	[D0*8+ax_tables.symbolnames-8]
          push      D0
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[ax_lib.getfullname.str]
          add       Dstack,	8
          pop       Dframe
          retn      8
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
L1586:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GENREG0 ============================================================
ax_lib.genreg0::
L4419:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	1
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+18],	B0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+17],	B0
          mov       D0,	[Dframe+-8]
L1588:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GENMEM ============================================================
ax_lib.genmem::
L4420:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.genlab
          mov       [Dframe+-8],	D0
          mov       D0,	3
          mov       D1,	[Dframe+-8]
          mov       [D1+16],	B0
          mov       D0,	[Dframe+-8]
L1589:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GENLAB ============================================================
ax_lib.genlab::
L4421:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	2
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+17],	B0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[Dframe+-8]
L1590:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GENINT ============================================================
ax_lib.genint::
L4422:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	2
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+17],	B0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+-8]
L1591:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GENIMM_EXPR ============================================================
ax_lib.genimm_expr::
L4423:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	2
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+40]
          mov       D1,	[Dframe+-8]
          mov       [D1+17],	B0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+-8]
          mov       [D1+22],	B0
          mov       D0,	[Dframe+-8]
L1592:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      32
;PROC NEEDSIZEPREFIX ============================================================
ax_lib.needsizeprefix:
L4424:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	16
          cmp       D0,	D1
          jz        L1595
          mov       D1,	17
          cmp       D0,	D1
          jz        L1595
          mov       D1,	80
          cmp       D0,	D1
          jz        L1596
          mov       D1,	81
          cmp       D0,	D1
          jz        L1596
          jmp       L1597
L1595:
          mov       D0,	1
          pop       Dframe
          retn      24
          jmp       L1594
L1596:
          mov       D0,	1
          pop       Dframe
          retn      24
          jmp       L1594
L1597:
L1594:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1599
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jz        L1599
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1599
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+16]
          mov       D1,	5
          cmp       D0,	D1
          jnz       L1598
L1599:
          mov       D0,	0
          pop       Dframe
          retn      24
L1598:
          mov       D0,	1
L1593:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC GETSIZEPREFIX ============================================================
ax_lib.getsizeprefix:
L4425:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jnz       L1601
          mov       D0,	L4426
          pop       Dframe
          retn      16
L1601:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1603
          mov       D1,	2
          cmp       D0,	D1
          jz        L1604
          mov       D1,	4
          cmp       D0,	D1
          jz        L1605
          mov       D1,	8
          cmp       D0,	D1
          jz        L1606
          mov       D1,	0
          cmp       D0,	D1
          jz        L1607
          jmp       L1608
L1603:
          mov       D0,	L4427
          pop       Dframe
          retn      16
          jmp       L1602
L1604:
          mov       D0,	L4428
          pop       Dframe
          retn      16
          jmp       L1602
L1605:
          mov       D0,	L4429
          pop       Dframe
          retn      16
          jmp       L1602
L1606:
          mov       D0,	L4430
          pop       Dframe
          retn      16
          jmp       L1602
L1607:
          mov       D0,	L4431
          pop       Dframe
          retn      16
          jmp       L1602
L1608:
L1602:
          mov       D0,	L4432
L1600:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC SETSEGMENT ============================================================
ax_lib.setsegment::
L4433:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	[ax_lib.currsegment]
          cmp       D0,	D1
          jnz       L1610
          pop       Dframe
          retn      8
L1610:
          mov       D0,	[Dframe+16]
          mov       D1,	68
          cmp       D0,	D1
          jz        L1612
          mov       D1,	90
          cmp       D0,	D1
          jz        L1613
          mov       D1,	67
          cmp       D0,	D1
          jz        L1614
          mov       D1,	82
          cmp       D0,	D1
          jz        L1615
          jmp       L1616
L1612:
          mov       D0,	L4434
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmcstr
          jmp       L1611
L1613:
          mov       D0,	L4435
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmcstr
          jmp       L1611
L1614:
          mov       D0,	L4436
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmcstr
          jmp       L1611
L1615:
          mov       D0,	L4437
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmcstr
          jmp       L1611
L1616:
L1611:
          mov       D0,	[Dframe+16]
          mov       [ax_lib.currsegment],	D0
L1609:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC STRDEF ============================================================
ax_lib.strdef:
L4438:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+36]
          mov       D1,	18
          cmp       D0,	D1
          jnz       L1618
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_lib.inttostr
          pop       Dframe
          retn      8
L1618:
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lib.getfullname
L1617:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC STROPND ============================================================
ax_lib.stropnd::
L4439:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1621
          mov       D1,	2
          cmp       D0,	D1
          jz        L1622
          mov       D1,	3
          cmp       D0,	D1
          jz        L1623
          mov       D1,	6
          cmp       D0,	D1
          jz        L1624
          mov       D1,	4
          cmp       D0,	D1
          jz        L1625
          mov       D1,	5
          cmp       D0,	D1
          jz        L1626
          jmp       L1627
L1621:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+18]
          push      D0
          push      D1
          call      ax_lib.getregname
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L1620
L1622:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-32]
          cmp       D0,	0
          jz        L1628
          mov       D0,	[Dframe+-32]
          movzx     D0,	byte [D0+36]
          mov       D1,	18
          cmp       D0,	D1
          jnz       L1629
          mov       D0,	[Dframe+-32]
          mov       D0,	[D0+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_lib.inttostr
          add       Dstack,	32
          pop       Dframe
          retn      16
L1629:
          mov       D0,	[Dframe+-32]
          push      D0
          call      ax_lib.getfullname
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L1630
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jle       L1631
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4440
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          push      word64 [Dframe+-24]
          call      ax_lib.inttostr
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1632
L1631:
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          push      word64 [Dframe+-24]
          call      ax_lib.inttostr
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L1632:
          lea       D0,	[ax_lib.stropnd.str]
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L1633
L1630:
          mov       D0,	[Dframe+-16]
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[ax_lib.stropnd.str]
          add       Dstack,	32
          pop       Dframe
          retn      16
L1633:
L1628:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+22]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1634
          push      word64 [Dframe+-24]
          call      ax_lib.inttostr
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L1635
L1634:
          mov       D0,	[Dframe+-24]
          movq      XMM0,	D0
          movq      D13,	XMM0
          push      D13
          call      ax_lib.realtostr
          add       Dstack,	32
          pop       Dframe
          retn      16
L1635:
          jmp       L1620
L1623:
          mov       D0,	0
          lea       D1,	[ax_lib.stropnd.str]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+17]
          push      D0
          call      ax_lib.getsizeprefix
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4441
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4442
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          cmp       D0,	0
          jz        L1636
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+21]
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+18]
          push      D0
          push      D1
          call      ax_lib.getregname
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4443
          mov       [Dframe+-8],	D0
L1636:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+19]
          cmp       D0,	0
          jz        L1637
          mov       D0,	[Dframe+-8]
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+21]
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+19]
          push      D0
          push      D1
          call      ax_lib.getregname
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4443
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          mov       D1,	1
          cmp       D0,	D1
          jle       L1638
          mov       D0,	L4444
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+20]
          push      D0
          call      ax_lib.inttostr
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L1638:
L1637:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1639
          mov       D0,	[Dframe+-8]
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          push      D0
          call      ax_lib.strdef
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4445
          mov       [Dframe+-8],	D0
L1639:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	0
          cmp       D0,	D1
          jle       L1641
          mov       D0,	[Dframe+-8]
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_lib.inttostr
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1640
L1641:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D1,	0
          cmp       D0,	D1
          jge       L1642
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_lib.inttostr
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L1642:
L1640:
          mov       D0,	L4446
          lea       D1,	[ax_lib.stropnd.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1620
L1624:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	256
          cmp       D0,	D1
          jl        L1643
          lea       D0,	[ax_lib.stropnd.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	0
          mov       D1,	L4447
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          jmp       L1644
L1643:
          lea       D0,	[ax_lib.stropnd.str]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	0
          mov       D1,	L4448
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4448
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
L1644:
          jmp       L1620
L1625:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0*8+ax_lib.opndnames]
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L1620
L1626:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+18]
          push      D0
          call      ax_lib.xgetregname
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L1620
L1627:
          mov       D0,	L4449
          add       Dstack,	32
          pop       Dframe
          retn      16
L1620:
          lea       D0,	[ax_lib.stropnd.str]
L1619:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC STRMCL ============================================================
ax_lib.strmcl::
L4450:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	144
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          mov       [Dframe+-136],	D0
          mov       D1,	7
          cmp       D0,	D1
          jz        L1647
          mov       D1,	2
          cmp       D0,	D1
          jz        L1648
          mov       D1,	1
          cmp       D0,	D1
          jz        L1649
          mov       D1,	4
          cmp       D0,	D1
          jz        L1650
          jmp       L1651
L1647:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0+8]
          add       Dstack,	144
          pop       Dframe
          retn      8
          jmp       L1646
L1648:
          mov       D0,	L4451
          add       Dstack,	144
          pop       Dframe
          retn      8
          jmp       L1646
L1649:
          mov       D0,	L4452
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0+8]
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[ax_lib.strmcl.str]
          add       Dstack,	144
          pop       Dframe
          retn      8
          jmp       L1646
L1650:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0]
          mov       D0,	[D0]
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4453
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[ax_lib.strmcl.str]
          add       Dstack,	144
          pop       Dframe
          retn      8
          jmp       L1646
L1651:
L1646:
          mov       D0,	L4454
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-136]
          mov       D1,	23
          cmp       D0,	D1
          jz        L1653
          mov       D1,	55
          cmp       D0,	D1
          jz        L1654
          mov       D1,	13
          cmp       D0,	D1
          jz        L1655
          jmp       L1656
L1653:
          mov       D0,	L4455
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0+8]
          mov       D0,	[D0*8+ax_tables.condnames]
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1652
L1654:
          mov       D0,	L4456
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0+8]
          mov       D0,	[D0*8+ax_tables.condnames]
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1652
L1655:
          mov       D0,	L4457
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          mov       D0,	[D0+8]
          mov       D0,	[D0*8+ax_tables.condnames]
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1652
L1656:
          mov       D0,	[Dframe+-136]
          mov       D0,	[D0*8+ax_tables.mclnames-8]
          mov       D1,	2
          add       D0,	D1
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L1652:
          mov       D0,	L4458
          mov       D1,	12
          lea       D2,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          push      D2
          call      mlib.ipadstr
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          cmp       D0,	0
          jz        L1658
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          cmp       D0,	0
          jz        L1658
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          mov       D2,	[Dframe+16]
          movzx     D2,	word16 [D2+24]
          push      D0
          push      D1
          push      D2
          call      ax_lib.needsizeprefix
          mov       [Dframe+-144],	D0
          push      word64 [Dframe+-144]
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          push      D0
          call      ax_lib.stropnd
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	L4459
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          push      word64 [Dframe+-144]
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+16]
          push      D0
          call      ax_lib.stropnd
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1657
L1658:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0+8]
          cmp       D0,	0
          jz        L1659
          mov       D0,	[Dframe+16]
          movzx     D0,	word16 [D0+24]
          mov       D1,	19
          cmp       D0,	D1
          jnz       L1660
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      ax_lib.stropnd
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1661
L1660:
          mov       D0,	1
          mov       D1,	[Dframe+16]
          mov       D1,	[D1+8]
          push      D0
          push      D1
          call      ax_lib.stropnd
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L1661:
L1659:
L1657:
          mov       D0,	[Dframe+-136]
          mov       D1,	86
          cmp       D0,	D1
          jz        L1663
          mov       D1,	87
          cmp       D0,	D1
          jz        L1663
          jmp       L1664
L1663:
          lea       D0,	[Dframe+-128]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4460
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	0
          mov       D1,	[Dframe+16]
          movzx     D1,	word16 [D1+26]
          movzx     D1,	W1
          push      D0
          push      D1
          call      [L3648]	!print_u64
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-128]
          lea       D1,	[ax_lib.strmcl.str]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L1662
L1664:
L1662:
          lea       D0,	[ax_lib.strmcl.str]
L1645:
;-------------------------------------------------
          add       Dstack,	144
          pop       Dframe
          retn      8
;PROC WRITEMCL ============================================================
ax_lib.writemcl:
L4461:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	1032
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          push      D0
          call      ax_lib.strmcl
          lea       D1,	[Dframe+-512]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	1
          movzx     D0,	byte [Dframe+D0+-512-1]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1666
          add       Dstack,	1032
          pop       Dframe
          retn      16
L1666:
          mov       D0,	[Dframe+24]
          movzx     D0,	word16 [D0+24]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1668
          jmp       L1669
L1668:
          mov       D0,	L4462
          mov       [Dframe+-1032],	D0
          jmp       L1667
L1669:
          mov       D0,	L4463
          mov       [Dframe+-1032],	D0
L1667:
          lea       D0,	[Dframe+-1024]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4464
          push      D0
          mov       D0,	[Dframe+-1032]
          push      D0
          call      [L3647]	!print_str
          mov       D0,	L4465
          push      D0
          mov       D0,	[Dframe+16]
          push      D0
          call      [L3658]	!print_i64
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4466
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-1024]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_str
          lea       D0,	[Dframe+-512]
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
L1665:
;-------------------------------------------------
          add       Dstack,	1032
          pop       Dframe
          retn      16
;PROC GETSIZETAG ============================================================
ax_lib.getsizetag:
L4467:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1672
          mov       D1,	2
          cmp       D0,	D1
          jz        L1673
          mov       D1,	4
          cmp       D0,	D1
          jz        L1674
          mov       D1,	8
          cmp       D0,	D1
          jz        L1675
          jmp       L1676
L1672:
          mov       D0,	L4468
          pop       Dframe
          retn      8
          jmp       L1671
L1673:
          mov       D0,	L4469
          pop       Dframe
          retn      8
          jmp       L1671
L1674:
          mov       D0,	L4470
          pop       Dframe
          retn      8
          jmp       L1671
L1675:
          mov       D0,	L4471
          pop       Dframe
          retn      8
          jmp       L1671
L1676:
L1671:
          mov       D0,	L4472
          push      D0
          call      ax_lib.gerror
          mov       D0,	0
L1670:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GENSTRIMM ============================================================
ax_lib.genstrimm::
L4473:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	6
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+-8]
L1677:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GENCOMMENT ============================================================
ax_lib.gencomment::
L4474:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1679
          mov       D0,	0
          mov       D1,	0
          mov       D2,	2
          push      D0
          push      D1
          push      D2
          call      ax_lib.genmc
          jmp       L1680
L1679:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          push      D0
          push      D1
          call      ax_lib.genmcstr
L1680:
L1678:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC WRITEMCLBLOCK ============================================================
ax_lib.writemclblock::
L4475:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[ax_lib.dest]
          push      D0
          call      mlib.gs_init
          mov       D0,	L4476
          mov       D1,	[ax_lib.dest]
          push      D0
          push      D1
          call      mlib.gs_strln
          mov       D0,	[ax_lib.mccode]
          mov       [Dframe+-16],	D0
          mov       D0,	1
          mov       [Dframe+-8],	D0
          jmp       L1683
L1682:
          mov       D0,	[Dframe+-16]
          push      D0
          push      word64 [Dframe+-8]
          call      ax_lib.writemcl
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0]
          mov       [Dframe+-16],	D0
          inc       word64 [Dframe+-8]
L1683:
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jnz       L1682
L1684:
          mov       D0,	[ax_lib.dest]
L1681:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC GENINDEX ============================================================
ax_lib.genindex::
L4477:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+40]
          cmp       D0,	0
          jz        L1686
          mov       D0,	[Dframe+40]
          mov       [Dframe+-8],	D0
          mov       D0,	3
          mov       D1,	[Dframe+40]
          mov       [D1+16],	B0
          jmp       L1687
L1686:
          mov       D0,	3
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
L1687:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+18],	B0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+19],	B0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+-8]
          mov       [D1+20],	B0
          mov       D0,	[Dframe+48]
          mov       D1,	[Dframe+-8]
          mov       [D1+17],	B0
          mov       D0,	[Dframe+56]
          mov       D1,	[Dframe+-8]
          mov       [D1+21],	B0
          mov       D0,	[Dframe+-8]
L1685:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      48
;PROC GENXREG ============================================================
ax_lib.genxreg::
L4478:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	5
          push      D0
          call      ax_lib.newopnd
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+18],	B0
          mov       D0,	16
          mov       D1,	[Dframe+-8]
          mov       [D1+17],	B0
          mov       D0,	[Dframe+-8]
L1688:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC NEWOPND ============================================================
ax_lib.newopnd:
L4479:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          inc       word64 [ax_decls.nmclopndsasm]
          mov       D0,	24
          push      D0
          call      mlib.pcm_allocz
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+16],	B0
          mov       D0,	[Dframe+-8]
L1689:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC GENMCSTR ============================================================
ax_lib.genmcstr::
L4480:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      ax_lib.genstrimm
          push      D0
          push      word64 [Dframe+16]
          call      ax_lib.genmc
L1690:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GENMC ============================================================
ax_lib.genmc::
L4481:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	36
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          inc       word64 [ax_decls.nmclasm]
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       [D1],	D0
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	11
          cmp       D0,	D1
          jnz       L1692
          mov       D0,	[ax_decls.lxlineno]
          mov       D1,	1
          sub       D0,	D1
          mov       D1,	[Dframe+-8]
          mov       [D1+28],	D0
          jmp       L1693
L1692:
          mov       D0,	[ax_decls.lxlineno]
          mov       D1,	[Dframe+-8]
          mov       [D1+28],	D0
L1693:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       [D1+24],	W0
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1694
          mov       D0,	0
          jmp       L1695
L1694:
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1696
          mov       D0,	1
          jmp       L1697
L1696:
          mov       D0,	2
L1697:
L1695:
          mov       [Dframe+-16],	D0
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1698
          mov       D0,	[Dframe+16]
          mov       D1,	86
          cmp       D0,	D1
          jz        L1699
          mov       D1,	87
          cmp       D0,	D1
          jnz       L1698
L1699:
          mov       D0,	3
          mov       [Dframe+-16],	D0
L1698:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+ax_tables.mclnopnds-1]
          cmp       D0,	D1
          jge       L1701
          mov       D0,	L4482
          push      D0
          call      ax_lib.serror
          jmp       L1700
L1701:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          movzx     D1,	byte [D1+ax_tables.mclnopnds-1]
          cmp       D0,	D1
          jle       L1702
          mov       D0,	L4483
          push      D0
          call      ax_lib.serror
L1702:
L1700:
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+-8]
          mov       [D1+16],	D0
          mov       D0,	[ax_lib.mccode]
          cmp       D0,	0
          jz        L1703
          mov       D0,	[Dframe+-8]
          mov       D1,	[ax_lib.mccodex]
          mov       [D1],	D0
          mov       D0,	[Dframe+-8]
          mov       [ax_lib.mccodex],	D0
          jmp       L1704
L1703:
          mov       D0,	[Dframe+-8]
          mov       [ax_lib.mccodex],	D0
          mov       [ax_lib.mccode],	D0
L1704:
L1691:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC INITLIB ============================================================
ax_lib.initlib::
L4484:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	4
          mov       D1,	0
          push      D0
          push      D1
          call      ax_lib.genint
          mov       [ax_lib.zero_opnd],	D0
L1706:
          mov       D0,	1
          mov       [Dframe+-8],	D0
L1707:
L1710:
          mov       D0,	1
          mov       [Dframe+-16],	D0
L1711:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1715
          mov       D1,	2
          cmp       D0,	D1
          jz        L1715
          mov       D1,	4
          cmp       D0,	D1
          jz        L1715
          mov       D1,	8
          cmp       D0,	D1
          jz        L1715
          jmp       L1716
L1715:
          push      word64 [Dframe+-16]
          push      word64 [Dframe+-8]
          call      ax_lib.genreg0
          lea       D1,	[ax_lib.regtable]
          mov       D2,	[Dframe+-8]
          shl       D2,	6
          lea       D1,	[D1+D2-64]
          mov       D2,	[Dframe+-16]
          mov       [D1+D2*8-8],	D0
          jmp       L1714
L1716:
L1714:
L1712:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          cmp       D0,	8
          jle       L1711
L1713:
L1708:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          cmp       D0,	16
          jle       L1707
L1709:
L1717:
          mov       D0,	17
          mov       [Dframe+-8],	D0
L1718:
          mov       D0,	1
          push      D0
          push      word64 [Dframe+-8]
          call      ax_lib.genreg0
          lea       D1,	[ax_lib.regtable]
          mov       D2,	[Dframe+-8]
          shl       D2,	6
          lea       D1,	[D1+D2-64]
          mov       D2,	1
          mov       [D1+D2*8-8],	D0
L1719:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          cmp       D0,	20
          jle       L1718
L1720:
          mov       D0,	131072
          push      D0
          call      mlib.pcm_alloc
          mov       [ax_decls.ss_symboltable],	D0
          mov       D0,	16384
          mov       [ax_decls.ss_symboltablesize],	D0
          mov       D0,	0
          mov       [ax_decls.ss_nsymbols],	D0
L1705:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC READADDRMODE ============================================================
ax_parse.readaddrmode:
L4485:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	72
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-32],	D0
          mov       [Dframe+-8],	D0
          mov       D0,	0
          mov       [Dframe+-48],	D0
          mov       [Dframe+-16],	D0
          mov       D0,	0
          mov       [Dframe+-56],	D0
          mov       [Dframe+-24],	D0
          mov       D0,	0
          mov       [Dframe+-64],	D0
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	24
          cmp       D0,	D1
          jnz       L1722
          lea       D0,	[Dframe+-24]
          lea       D1,	[Dframe+-16]
          lea       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_parse.readreg
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	7
          cmp       D0,	D1
          jz        L1724
          mov       D1,	8
          cmp       D0,	D1
          jz        L1725
          jmp       L1726
L1724:
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	24
          cmp       D0,	D1
          jnz       L1727
          lea       D0,	[Dframe+-56]
          lea       D1,	[Dframe+-48]
          lea       D2,	[Dframe+-32]
          push      D0
          push      D1
          push      D2
          call      ax_parse.readreg
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	7
          cmp       D0,	D1
          jz        L1729
          mov       D1,	8
          cmp       D0,	D1
          jz        L1729
          jmp       L1730
L1729:
          call      ax_parse.readexpression
          mov       [Dframe+-64],	D0
          jmp       L1728
L1730:
L1728:
          jmp       L1731
L1727:
          call      ax_parse.readexpression
          mov       [Dframe+-64],	D0
L1731:
          jmp       L1723
L1725:
          call      ax_parse.readexpression
          mov       [Dframe+-64],	D0
          jmp       L1723
L1726:
L1723:
          jmp       L1732
L1722:
          call      ax_parse.readexpression
          mov       [Dframe+-64],	D0
L1732:
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L1733
          mov       D0,	[Dframe+-56]
          cmp       D0,	0
          jz        L1733
          mov       D0,	L4486
          push      D0
          call      ax_lib.serror
L1733:
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1734
          mov       D0,	[Dframe+-32]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1734
          mov       D0,	0
          cmp       D0,	0
          jz        L1734
          mov       D0,	L4487
          push      D0
          call      ax_lib.serror
L1734:
          mov       D0,	6
          push      D0
          call      ax_parse.checksymbol
          call      ax_lex.lex
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L1735
          mov       D0,	[Dframe+-56]
          cmp       D0,	0
          jnz       L1735
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-32]
          mov       [Dframe+-8],	D1
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-48]
          mov       [Dframe+-16],	D1
          mov       [Dframe+-48],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-56]
          mov       [Dframe+-24],	D1
          mov       [Dframe+-56],	D0
L1735:
          mov       D0,	[Dframe+-56]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1736
          mov       D0,	1
          mov       [Dframe+-56],	D0
L1736:
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jz        L1737
          mov       D0,	[Dframe+-48]
          cmp       D0,	0
          jz        L1737
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-48]
          cmp       D0,	D1
          jz        L1737
          mov       D0,	L4488
          push      D0
          call      ax_lib.serror
L1737:
          mov       D0,	[Dframe+-16]
          mov       D1,	4
          cmp       D0,	D1
          jz        L1739
          mov       D0,	[Dframe+-48]
          mov       D1,	4
          cmp       D0,	D1
          jnz       L1738
L1739:
          mov       D0,	4
          jmp       L1740
L1738:
          mov       D0,	8
L1740:
          push      D0
          push      word64 [Dframe+16]
          mov       D0,	[Dframe+-64]
          push      D0
          push      word64 [Dframe+-56]
          push      word64 [Dframe+-32]
          push      word64 [Dframe+-8]
          call      ax_lib.genindex
          mov       [Dframe+-72],	D0
L1721:
;-------------------------------------------------
          add       Dstack,	72
          pop       Dframe
          retn      8
;PROC READREG ============================================================
ax_parse.readreg:
L4489:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[ax_lex.lxsubcode]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+39]
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	9
          cmp       D0,	D1
          jnz       L1742
          call      ax_lex.lex
          mov       D0,	14
          push      D0
          call      ax_parse.checksymbol
          mov       D0,	[ax_lex.lxvalue]
          mov       D1,	1
          cmp       D0,	D1
          jz        L1744
          mov       D1,	2
          cmp       D0,	D1
          jz        L1744
          mov       D1,	4
          cmp       D0,	D1
          jz        L1744
          mov       D1,	8
          cmp       D0,	D1
          jz        L1744
          jmp       L1745
L1744:
          jmp       L1743
L1745:
          mov       D0,	L4490
          push      D0
          call      ax_lib.serror
L1743:
          mov       D0,	[ax_lex.lxvalue]
          mov       D1,	[Dframe+32]
          mov       [D1],	D0
          call      ax_lex.lex
          jmp       L1746
L1742:
          mov       D0,	0
          mov       D1,	[Dframe+32]
          mov       [D1],	D0
L1746:
L1741:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC READTERM ============================================================
ax_parse.readterm:
L4491:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	0
          mov       [ax_parse.exprlabeldef],	D0
          mov       D0,	0
          mov       [ax_parse.exprvalue],	D0
          mov       D0,	0
          mov       [ax_parse.exprtype],	D0
          mov       D0,	[ax_lex.lxsymbol]
          sub       D0,	7
          cmp       D0,	16
          jae       L1750
          jmp       [D0*8+L1749]
          isegment  
L1749:
          dq        L1766
          dq        L1761
          dq        L1750
          dq        L1750
          dq        L1750
          dq        L1750
          dq        L1750
          dq        L1759
          dq        L1760
          dq        L1750
          dq        L1756
          dq        L1755
          dq        L1751
          dq        L1751
          dq        L1753
          dq        L1751
          csegment  
L1751:
          mov       D0,	[ax_lex.lxsymptr]
          mov       [ax_parse.exprlabeldef],	D0
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	9
          cmp       D0,	D1
          jnz       L1752
          mov       D0,	L4492
          push      D0
          call      ax_lib.serror
L1752:
          jmp       L1748
L1753:
          mov       D0,	[ax_lex.lxsymptr]
          mov       [ax_parse.exprlabeldef],	D0
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	9
          cmp       D0,	D1
          jz        L1754
          mov       D0,	L4493
          push      D0
          call      ax_lib.serror
L1754:
          call      ax_lex.lex
          jmp       L1748
L1755:
          mov       D0,	[ax_lex.lxsymptr]
          mov       D0,	[D0+16]
          mov       D0,	[D0]
          mov       [ax_parse.exprlabeldef],	D0
          mov       D0,	[ax_lex.lxsymptr]
          mov       D0,	[D0+16]
          mov       D0,	[D0+8]
          mov       [ax_parse.exprvalue],	D0
          mov       D0,	[ax_lex.lxsymptr]
          mov       D0,	[D0+16]
          movzx     D0,	byte [D0+22]
          mov       [ax_parse.exprtype],	D0
          call      ax_lex.lex
          jmp       L1748
L1756:
          mov       D0,	[ax_lex.lxsymptr]
          mov       [Dframe+-8],	D0
          mov       [ax_parse.exprlabeldef],	D0
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	9
          cmp       D0,	D1
          jnz       L1757
          mov       D0,	21
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_lib.createlabel
          call      ax_lex.lex
          jmp       L1758
L1757:
          mov       D0,	19
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_lib.createlabel
L1758:
          jmp       L1748
L1759:
          mov       D0,	[ax_lex.lxvalue]
          mov       [ax_parse.exprvalue],	D0
          call      ax_lex.lex
          jmp       L1748
L1760:
          movq      XMM0,	[ax_lex.lxxvalue]
          movq      D0,	XMM0
          mov       [ax_parse.exprvalue],	D0
          mov       D0,	82
          mov       [ax_parse.exprtype],	D0
          call      ax_lex.lex
          jmp       L1748
L1761:
          call      ax_lex.lex
          call      ax_parse.readterm
          mov       D0,	[ax_parse.exprlabeldef]
          cmp       D0,	0
          jnz       L1762
          mov       D0,	[ax_parse.exprtype]
          cmp       D0,	0
          jnz       L1763
          mov       D0,	[ax_parse.exprvalue]
          neg       D0
          mov       [ax_parse.exprvalue],	D0
          jmp       L1764
L1763:
          mov       D0,	[ax_parse.exprvalue]
          movq      XMM0,	D0
          xorpd     XMM0,	[L4494]
          movq      [Dframe+-16],	XMM0
          movq      XMM0,	[Dframe+-16]
          movq      D0,	XMM0
          mov       [ax_parse.exprvalue],	D0
L1764:
          jmp       L1765
L1762:
          mov       D0,	L4495
          push      D0
          call      ax_lib.serror
L1765:
          jmp       L1748
L1766:
          call      ax_lex.lex
          call      ax_parse.readterm
          jmp       L1748
L1750:
          mov       D0,	L4496
          push      D0
          call      ax_lib.serror
L1748:
L1747:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC READEXPRESSION ============================================================
ax_parse.readexpression:
L4497:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          call      ax_parse.readterm
L1768:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	7
          cmp       D0,	D1
          jz        L1770
          mov       D1,	8
          cmp       D0,	D1
          jz        L1771
          jmp       L1772
L1770:
          mov       D0,	[ax_parse.exprlabeldef]
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_parse.exprvalue]
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_parse.exprtype]
          mov       [Dframe+-24],	D0
          call      ax_lex.lex
          call      ax_parse.readterm
          mov       D0,	[ax_parse.exprlabeldef]
          cmp       D0,	0
          jz        L1773
          mov       D0,	L4498
          push      D0
          call      ax_lib.serror
L1773:
          mov       D0,	[Dframe+-8]
          mov       [ax_parse.exprlabeldef],	D0
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jnz       L1775
          mov       D0,	[ax_parse.exprtype]
          cmp       D0,	0
          jz        L1774
L1775:
          mov       D0,	L4499
          push      D0
          call      ax_lib.serror
L1774:
          mov       D0,	[Dframe+-16]
          add       [ax_parse.exprvalue],	D0
          jmp       L1768
L1771:
          mov       D0,	[ax_parse.exprlabeldef]
          mov       [Dframe+-8],	D0
          mov       D0,	[ax_parse.exprvalue]
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_parse.exprtype]
          mov       [Dframe+-24],	D0
          call      ax_lex.lex
          call      ax_parse.readterm
          mov       D0,	[ax_parse.exprlabeldef]
          cmp       D0,	0
          jz        L1776
          mov       D0,	L4500
          push      D0
          call      ax_lib.serror
L1776:
          mov       D0,	[Dframe+-8]
          mov       [ax_parse.exprlabeldef],	D0
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jnz       L1778
          mov       D0,	[ax_parse.exprtype]
          cmp       D0,	0
          jz        L1777
L1778:
          mov       D0,	L4501
          push      D0
          call      ax_lib.serror
L1777:
          mov       D0,	[Dframe+-16]
          mov       D1,	[ax_parse.exprvalue]
          sub       D0,	D1
          mov       [ax_parse.exprvalue],	D0
          jmp       L1768
L1772:
          jmp       L1769
          jmp       L1768
L1769:
          mov       D0,	4
          push      D0
          push      word64 [ax_parse.exprtype]
          push      word64 [ax_parse.exprvalue]
          mov       D0,	[ax_parse.exprlabeldef]
          push      D0
          call      ax_lib.genimm_expr
L1767:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          ret       
;PROC READOPERAND ============================================================
ax_parse.readoperand:
L4502:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[ax_lex.lxsymbol]
          sub       D0,	5
          cmp       D0,	27
          jae       L1782
          jmp       [D0*8+L1781]
          isegment  
L1781:
          dq        L1784
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1783
          dq        L1785
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1782
          dq        L1786
          csegment  
L1783:
          lea       D0,	[ax_lib.regtable]
          mov       D1,	[ax_lex.lxsubcode]
          shl       D1,	6
          lea       D0,	[D0+D1-64]
          mov       D1,	[ax_lex.lxsymptr]
          movzx     D1,	byte [D1+39]
          mov       D0,	[D0+D1*8-8]
          mov       [Dframe+-8],	D0
          call      ax_lex.lex
          mov       D0,	[Dframe+-8]
          add       Dstack,	16
          pop       Dframe
          ret       
          jmp       L1780
L1784:
          call      ax_lex.lex
          mov       D0,	0
          push      D0
          call      ax_parse.readaddrmode
          add       Dstack,	16
          pop       Dframe
          ret       
          jmp       L1780
L1785:
          push      word64 [ax_lex.lxsubcode]
          call      ax_lib.genxreg
          mov       [Dframe+-8],	D0
          call      ax_lex.lex
          mov       D0,	[Dframe+-8]
          add       Dstack,	16
          pop       Dframe
          ret       
          jmp       L1780
L1786:
          mov       D0,	[ax_lex.lxsubcode]
          mov       [Dframe+-16],	D0
          call      ax_lex.lex
          mov       D0,	5
          push      D0
          call      ax_parse.checksymbol
          call      ax_lex.lex
          push      word64 [Dframe+-16]
          call      ax_parse.readaddrmode
          add       Dstack,	16
          pop       Dframe
          ret       
          jmp       L1780
L1782:
          call      ax_parse.readexpression
          add       Dstack,	16
          pop       Dframe
          ret       
L1780:
          mov       D0,	0
L1779:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC READCONDINSTR ============================================================
ax_parse.readcondinstr:
L4503:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	4
          push      D0
          push      word64 [ax_lex.lxsubcode]
          call      ax_lib.genint
          mov       [Dframe+-8],	D0
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1788
          mov       D0,	[Dframe+16]
          mov       D1,	13
          cmp       D0,	D1
          jnz       L1788
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          mov       D2,	6
          push      D0
          push      D1
          push      D2
          call      ax_lib.genmc
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-16],	D0
L1788:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          push      word64 [Dframe+16]
          call      ax_lib.genmc
L1787:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC READINSTR ============================================================
ax_parse.readinstr:
L4504:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[ax_lex.lxsubcode]
          mov       [Dframe+-8],	D0
          call      ax_lex.lex
          mov       D0,	[Dframe+-8]
          sub       D0,	8
          cmp       D0,	111
          jae       L1792
          jmp       [D0*8+L1791]
          isegment  
L1791:
          dq        L1807
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1804
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1805
          dq        L1805
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1792
          dq        L1793
          dq        L1793
          dq        L1793
          dq        L1793
          dq        L1793
          dq        L1800
          dq        L1801
          dq        L1802
          dq        L1803
          csegment  
L1793:
L1794:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	16
          cmp       D0,	D1
          jnz       L1796
          mov       D0,	[ax_lex.lxsvalue]
          push      D0
          call      ax_lib.genstrimm
          mov       [Dframe+-16],	D0
          call      ax_lex.lex
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          push      word64 [Dframe+-8]
          call      ax_lib.genmc
          jmp       L1797
L1796:
          call      ax_parse.readoperand
          mov       [Dframe+-16],	D0
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          push      word64 [Dframe+-8]
          call      ax_lib.genmc
L1797:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1798
          call      ax_lex.lex
          jmp       L1799
L1798:
          jmp       L1795
L1799:
          jmp       L1794
L1795:
          jmp       L1790
L1800:
          mov       D0,	32
          push      D0
          call      ax_parse.checksymbol
          mov       D0,	0
          mov       D1,	4
          push      D0
          push      D1
          push      word64 [ax_lex.lxsubcode]
          call      ax_lib.genint
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmc
          call      ax_lex.lex
          jmp       L1790
L1801:
          mov       D0,	0
          mov       D1,	4
          mov       D2,	2
          push      D0
          push      D1
          push      D2
          call      ax_lib.genint
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmc
          jmp       L1790
L1802:
          mov       D0,	0
          mov       D1,	4
          mov       D2,	3
          push      D0
          push      D1
          push      D2
          call      ax_lib.genint
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmc
          jmp       L1790
L1803:
          mov       D0,	0
          mov       D1,	4
          mov       D2,	1
          push      D0
          push      D1
          push      D2
          call      ax_lib.genint
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmc
          jmp       L1790
L1804:
          call      ax_parse.readoperand
          mov       [Dframe+-16],	D0
          mov       D0,	2
          push      D0
          call      ax_parse.checksymbol
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-24],	D0
          mov       D0,	2
          push      D0
          call      ax_parse.checksymbol
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-32],	D0
          mov       D0,	L4505
          push      D0
          call      ax_lib.serror
          jmp       L1790
L1805:
          call      ax_parse.readoperand
          mov       [Dframe+-16],	D0
          mov       D0,	2
          push      D0
          call      ax_parse.checksymbol
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-24],	D0
          mov       D0,	2
          push      D0
          call      ax_parse.checksymbol
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-32],	D0
          movzx     D0,	byte [D0+16]
          mov       D1,	2
          cmp       D0,	D1
          jz        L1806
          mov       D0,	L4506
          push      D0
          call      ax_lib.serror
L1806:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          push      word64 [Dframe+-8]
          call      ax_lib.genmc
          mov       D0,	[Dframe+-32]
          mov       D0,	[D0+8]
          mov       D1,	[ax_lib.mccodex]
          mov       [D1+26],	W0
          jmp       L1790
L1807:
L1808:
          call      ax_lex.lex
L1809:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	11
          cmp       D0,	D1
          jnz       L1808
L1810:
          jmp       L1790
L1792:
          mov       D0,	0
          mov       [Dframe+-24],	D0
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	11
          cmp       D0,	D1
          jz        L1811
          call      ax_parse.readoperand
          mov       [Dframe+-16],	D0
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L1812
          call      ax_lex.lex
          call      ax_parse.readoperand
          mov       [Dframe+-24],	D0
L1812:
L1811:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          push      word64 [Dframe+-8]
          call      ax_lib.genmc
L1790:
L1789:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          ret       
;PROC CHECKSYMBOL ============================================================
ax_parse.checksymbol:
L4507:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	272
;-------------------------------------------------
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	[Dframe+16]
          cmp       D0,	D1
          jz        L1814
          lea       D0,	[Dframe+-272]
          push      D0
          call      [L3697]	!print_startstr
          mov       D0,	L4508
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_lex.lxsymbol]
          mov       D1,	[D1*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-272]
          push      D0
          call      ax_lib.serror
L1814:
L1813:
;-------------------------------------------------
          add       Dstack,	272
          pop       Dframe
          retn      8
;PROC CHECKUNDEFINED ============================================================
ax_parse.checkundefined::
L4509:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[ax_decls.modulenamelist]
          mov       [Dframe+-16],	D0
          jmp       L1817
L1816:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0+36]
          mov       D1,	19
          cmp       D0,	D1
          jnz       L1819
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4510
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4511
          mov       D2,	20
          mov       D3,	[Dframe+-16]
          mov       D3,	[D3]
          push      D0
          push      D1
          push      D2
          push      D3
          call      mlib.padstr
          push      D0
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          inc       word64 [ax_decls.nundefined]
L1819:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0+52]
          mov       [Dframe+-16],	D0
L1817:
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jnz       L1816
L1818:
L1815:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC READMODULE ============================================================
ax_parse.readmodule::
L4512:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          lea       D0,	[ax_decls.moduletable]
          mov       D1,	[Dframe+16]
          imul2     D1,	24
          lea       D0,	[D0+D1-24]
          mov       D0,	[D0+16]
          push      D0
          call      ax_lex.initsourcefile
          mov       D0,	11
          mov       [ax_lex.lxsymbol],	D0
          mov       D0,	0
          mov       D1,	4
          mov       D2,	1
          push      D0
          push      D1
          push      D2
          call      ax_lib.genint
          mov       D1,	115
          push      D0
          push      D1
          call      ax_lib.genmc
          jmp       L1822
L1821:
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          sub       D0,	11
          cmp       D0,	20
          jae       L1826
          jmp       [D0*8+L1825]
          isegment  
L1825:
          dq        L1848
          dq        L1849
          dq        L1826
          dq        L1826
          dq        L1826
          dq        L1826
          dq        L1828
          dq        L1844
          dq        L1835
          dq        L1843
          dq        L1842
          dq        L1843
          dq        L1827
          dq        L1826
          dq        L1826
          dq        L1826
          dq        L1826
          dq        L1845
          dq        L1846
          dq        L1847
          csegment  
L1827:
          call      ax_parse.readinstr
          jmp       L1824
L1828:
          mov       D0,	[ax_lex.lxsymptr]
          mov       [Dframe+-8],	D0
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       [Dframe+-16],	D0
          mov       D1,	10
          cmp       D0,	D1
          jz        L1830
          mov       D1,	3
          cmp       D0,	D1
          jz        L1831
          mov       D1,	4
          cmp       D0,	D1
          jz        L1831
          jmp       L1832
L1830:
          call      ax_lex.lex
          call      ax_parse.readexpression
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_lib.createnamedconst
          jmp       L1829
L1831:
          mov       D0,	[Dframe+-16]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1833
          mov       D0,	20
          jmp       L1834
L1833:
          mov       D0,	22
L1834:
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      ax_lib.createlabel
          mov       D0,	0
          mov       D1,	4
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_lib.genlab
          mov       D1,	4
          push      D0
          push      D1
          call      ax_lib.genmc
          mov       D0,	1
          mov       D1,	[Dframe+-8]
          mov       [D1+41],	B0
          mov       D0,	11
          mov       [ax_lex.lxsymbol],	D0
          jmp       L1821
          jmp       L1829
L1832:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4513
          push      D0
          call      ax_lib.serror
L1829:
          jmp       L1824
L1835:
          mov       D0,	[ax_lex.lxsymptr]
          mov       [Dframe+-8],	D0
          call      ax_lex.lex
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	10
          cmp       D0,	D1
          jz        L1837
          mov       D1,	3
          cmp       D0,	D1
          jz        L1838
          mov       D1,	4
          cmp       D0,	D1
          jz        L1838
          jmp       L1839
L1837:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       D1,	L4514
          push      D0
          push      D1
          call      ax_lib.serror_s
          jmp       L1836
L1838:
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       [D1+8],	D0
          mov       D0,	0
          mov       D1,	4
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      ax_lib.genlab
          mov       D1,	4
          push      D0
          push      D1
          call      ax_lib.genmc
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	3
          cmp       D0,	D1
          jnz       L1840
          mov       D0,	20
          jmp       L1841
L1840:
          mov       D0,	22
L1841:
          mov       D1,	[Dframe+-8]
          mov       [D1+36],	B0
          mov       D0,	1
          mov       D1,	[Dframe+-8]
          mov       [D1+41],	B0
          mov       D0,	11
          mov       [ax_lex.lxsymbol],	D0
          jmp       L1821
          jmp       L1836
L1839:
          mov       D0,	L4515
          push      D0
          call      ax_lib.serror
L1836:
          jmp       L1824
L1842:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       D1,	L4516
          push      D0
          push      D1
          call      ax_lib.serror_s
          jmp       L1824
L1843:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       D1,	L4517
          push      D0
          push      D1
          call      ax_lib.serror_s
          jmp       L1824
L1844:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       D1,	L4518
          push      D0
          push      D1
          call      ax_lib.serror_s
          jmp       L1824
L1845:
          mov       D0,	23
          push      D0
          call      ax_parse.readcondinstr
          jmp       L1824
L1846:
          mov       D0,	55
          push      D0
          call      ax_parse.readcondinstr
          jmp       L1824
L1847:
          mov       D0,	13
          push      D0
          call      ax_parse.readcondinstr
          jmp       L1824
L1848:
          jmp       L1824
L1849:
          add       Dstack,	16
          pop       Dframe
          retn      8
          jmp       L1824
L1826:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4519
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_lex.lxsymbol]
          mov       D1,	[D1*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1824:
L1822:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	11
          cmp       D0,	D1
          jz        L1821
L1823:
          mov       D0,	L4520
          push      D0
          call      ax_lib.serror
L1820:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC MAKESTRING ============================================================
ax_lex.makestring:
L4521:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D2,	[Dframe+24]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	[Dframe+-8]
L1850:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC SKIPTOEOL ============================================================
ax_lex.skiptoeol::
L4522:
;-------------------------------------------------
L1852:
          call      ax_lex.lex
L1853:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	11
          cmp       D0,	D1
          jz        L1855
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	12
          cmp       D0,	D1
          jnz       L1852
L1855:
L1854:
L1851:
;-------------------------------------------------
          ret       
;PROC GETHASHVALUE ============================================================
ax_lex.gethashvalue:
L4523:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-16],	D0
          mov       [Dframe+-8],	D0
          jmp       L1858
L1857:
          mov       D0,	[Dframe+-24]
          add       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          shl       D0,	3
          mov       D1,	[Dframe+-16]
          add       D0,	D1
          mov       [Dframe+-8],	D0
L1858:
          lea       D0,	[Dframe+16]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-24],	D1
          cmp       D1,	0
          jnz       L1857
L1859:
          mov       D0,	[Dframe+-8]
          shl       D0,	5
          mov       D1,	[Dframe+-16]
          xor       D0,	D1
L1856:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      8
;PROC LXERROR ============================================================
ax_lex.lxerror::
L4524:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	L4525
          push      D0
          call      [L4116]	!print_setfmt
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[ax_decls.lxlineno]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L1860:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ADDNAMESTR ============================================================
ax_lex.addnamestr::
L4526:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lex.gethashvalue
          mov       [ax_lex.lxhashvalue],	D0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.pcm_copyheapstring
          push      D0
          call      ax_lex.lookuplex
          mov       D0,	[ax_lex.lxsymptr]
L1861:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC INITSOURCEFILE ============================================================
ax_lex.initsourcefile::
L4527:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       [ax_lex.lxsptr],	D0
          mov       [ax_lex.lxstart],	D0
          mov       D0,	1
          mov       [ax_decls.lxlineno],	D0
L1862:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC LOOKUPLEX ============================================================
ax_lex.lookuplex:
L4528:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1864
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+24],	D0
L1864:
          mov       D0,	[ax_lex.lxhashvalue]
          mov       D1,	65535
          and       D0,	D1
          mov       [Dframe+-16],	D0
          mov       [Dframe+-40],	D0
          mov       D0,	0
          mov       [Dframe+-24],	D0
L1865:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0*8+ax_decls.lexhashtable]
          mov       [ax_lex.lxsymptr],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1867
          jmp       L1866
L1867:
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+43]
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jnz       L1868
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[ax_lex.lxsymptr]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcmp*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1868
          mov       D0,	1
          add       Dstack,	40
          pop       Dframe
          retn      16
L1868:
          lea       D0,	[Dframe+-16]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	65536
          cmp       D1,	D0
          jle       L1869
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L1870
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4529
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	65536
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[ax_decls.lxlineno]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L1870:
          mov       D0,	1
          mov       [Dframe+-24],	D0
          mov       D0,	1
          mov       [Dframe+-16],	D0
L1869:
          jmp       L1865
L1866:
          mov       D0,	[Dframe+-32]
          cmp       D0,	0
          jz        L1871
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lex.makestring
          mov       [Dframe+16],	D0
L1871:
          mov       D0,	[ax_lex.lxsymptr]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1872
          mov       D0,	128
          push      D0
          call      mlib.pcm_allocz
          mov       [ax_lex.lxsymptr],	D0
          lea       D1,	[ax_decls.lexhashtable]
          mov       D2,	[Dframe+-16]
          mov       [D1+D2*8],	D0
L1872:
          mov       D0,	[Dframe+16]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+43],	B0
          mov       D0,	17
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+36],	B0
          mov       D0,	0
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+37],	B0
          mov       D0,	[Dframe+-16]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+72],	A0
          mov       D0,	[Dframe+-40]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+76],	A0
          mov       D0,	[ax_decls.currmoduleno]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+68],	A0
          mov       D0,	0
L1863:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      16
;PROC PRINTHASHTABLE ============================================================
ax_lex.printhashtable::
L4530:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4531
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	0
          mov       [Dframe+-16],	D0
L1874:
          mov       D0,	0
          mov       [Dframe+-24],	D0
          mov       D0,	65535
          mov       [Dframe+-32],	D0
L1875:
          mov       D0,	[Dframe+-24]
          mov       D0,	[D0*8+ax_decls.lexhashtable]
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jz        L1878
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          cmp       D0,	0
          jz        L1878
          mov       D0,	1
          add       [Dframe+-16],	D0
L1878:
L1876:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	[Dframe+-32]
          cmp       D0,	D1
          jle       L1875
L1877:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	L4532
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	65536
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1873:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC ADDRESERVEDWORD ============================================================
ax_lex.addreservedword:
L4533:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      ax_lex.gethashvalue
          mov       [ax_lex.lxhashvalue],	D0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      ax_lex.lookuplex
          cmp       D0,	0
          jz        L1880
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4534
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4535
          push      D0
          call      ax_lex.lxerror
L1880:
          mov       D0,	0
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+36],	B0
          mov       D0,	[Dframe+24]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+37],	B0
          mov       D0,	[Dframe+32]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+38],	B0
L1879:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC INITHASHTABLE ============================================================
ax_lex.inithashtable:
L4536:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	120
;-------------------------------------------------
          mov       D0,	65536
          mov       D1,	65536
          cmp       D0,	D1
          jle       L1882
L1882:
          call      ax_lex.clearhashtable
L1883:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	144
          mov       [Dframe+-48],	D0
L1884:
          push      word64 [Dframe+-40]
          mov       D0,	23
          mov       D1,	[Dframe+-40]
          mov       D1,	[D1*8+ax_tables.mclnames-8]
          mov       D2,	2
          add       D1,	D2
          push      D0
          push      D1
          call      ax_lex.addreservedword
L1885:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-48]
          cmp       D0,	D1
          jle       L1884
L1886:
L1887:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	136
          mov       [Dframe+-56],	D0
L1888:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+ax_tables.regindices-1]
          mov       D1,	24
          mov       D2,	[Dframe+-40]
          mov       D2,	[D2*8+ax_tables.dregnames-8]
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+ax_tables.regsizes-1]
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
L1889:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-56]
          cmp       D0,	D1
          jle       L1888
L1890:
L1891:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	16
          mov       [Dframe+-64],	D0
L1892:
          push      word64 [Dframe+-40]
          mov       D0,	25
          mov       D1,	[Dframe+-40]
          mov       D1,	[D1*8+ax_tables.xregnames-8]
          push      D0
          push      D1
          call      ax_lex.addreservedword
L1893:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-64]
          cmp       D0,	D1
          jle       L1892
L1894:
L1895:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	8
          mov       [Dframe+-72],	D0
L1896:
          push      word64 [Dframe+-40]
          mov       D0,	26
          mov       D1,	[Dframe+-40]
          mov       D1,	[D1*8+ax_tables.fregnames-8]
          push      D0
          push      D1
          call      ax_lex.addreservedword
L1897:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-72]
          cmp       D0,	D1
          jle       L1896
L1898:
L1899:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	8
          mov       [Dframe+-80],	D0
L1900:
          push      word64 [Dframe+-40]
          mov       D0,	27
          mov       D1,	[Dframe+-40]
          mov       D1,	[D1*8+ax_tables.mregnames-8]
          push      D0
          push      D1
          call      ax_lex.addreservedword
L1901:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-80]
          cmp       D0,	D1
          jle       L1900
L1902:
L1903:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	18
          mov       [Dframe+-88],	D0
L1904:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+ax_tables.jmpcccodes-1]
          mov       D1,	28
          mov       D2,	[Dframe+-40]
          mov       D2,	[D2*8+ax_tables.jmpccnames-8]
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
L1905:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-88]
          cmp       D0,	D1
          jle       L1904
L1906:
L1907:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	18
          mov       [Dframe+-96],	D0
L1908:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+ax_tables.setcccodes-1]
          mov       D1,	29
          mov       D2,	[Dframe+-40]
          mov       D2,	[D2*8+ax_tables.setccnames-8]
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
L1909:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-96]
          cmp       D0,	D1
          jle       L1908
L1910:
L1911:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	18
          mov       [Dframe+-104],	D0
L1912:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+ax_tables.cmovcccodes-1]
          mov       D1,	30
          mov       D2,	[Dframe+-40]
          mov       D2,	[D2*8+ax_tables.cmovccnames-8]
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
L1913:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-104]
          cmp       D0,	D1
          jle       L1912
L1914:
L1915:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	8
          mov       [Dframe+-112],	D0
L1916:
          mov       D0,	[Dframe+-40]
          movzx     D0,	byte [D0+ax_tables.prefixsizes-1]
          mov       D1,	31
          mov       D2,	[Dframe+-40]
          mov       D2,	[D2*8+ax_tables.prefixnames-8]
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
L1917:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-112]
          cmp       D0,	D1
          jle       L1916
L1918:
L1919:
          mov       D0,	1
          mov       [Dframe+-40],	D0
          mov       D0,	5
          mov       [Dframe+-120],	D0
L1920:
          mov       D0,	[Dframe+-40]
          mov       D0,	[D0*8+ax_tables.segmentnames-8]
          lea       D1,	[Dframe+-32]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[Dframe+-32]
          lea       D2,	[Dframe+-32]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	3
          sub       D0,	D1
          pop       D1
          pop       D2
          mov       [D1+D0-1],	B2
          push      word64 [Dframe+-40]
          mov       D0,	32
          lea       D1,	[Dframe+-32]
          push      D0
          push      D1
          call      mlib.pcm_copyheapstring
          push      D0
          call      ax_lex.addreservedword
L1921:
          mov       D0,	[Dframe+-40]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	[Dframe+-120]
          cmp       D0,	D1
          jle       L1920
L1922:
          mov       D0,	15
          mov       D1,	24
          mov       D2,	L4537
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	4
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
          mov       D0,	15
          mov       D1,	24
          mov       D2,	L4538
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	8
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
          mov       D0,	16
          mov       D1,	24
          mov       D2,	L4539
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	4
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
          mov       D0,	16
          mov       D1,	24
          mov       D2,	L4540
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	8
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
          mov       D0,	9
          mov       D1,	24
          mov       D2,	L4541
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	8
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
          mov       D0,	10
          mov       D1,	24
          mov       D2,	L4542
          push      D0
          push      D1
          push      D2
          call      ax_lex.addreservedword
          mov       D0,	8
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+39],	B0
L1881:
;-------------------------------------------------
          add       Dstack,	120
          pop       Dframe
          ret       
;PROC CLEARHASHTABLE ============================================================
ax_lex.clearhashtable:
L4543:
;-------------------------------------------------
L1923:
;-------------------------------------------------
          ret       
;PROC PRINTSYMBOL ============================================================
ax_lex.printsymbol::
L4544:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	264
;-------------------------------------------------
          mov       D0,	[ax_lex.lxsymbol]
          mov       D0,	[D0*8+ax_tables.symbolnames-8]
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[Dframe+-256]
          lea       D2,	[Dframe+-256]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	2
          sub       D0,	D1
          pop       D1
          pop       D2
          mov       [D1+D0-1],	B2
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
L1925:
          mov       D0,	14
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          pop       D1
          sub       D1,	D0
          mov       [Dframe+-264],	D1
          mov       D0,	[Dframe+-264]
          mov       D1,	0
          cmp       D0,	D1
          jle       L1928
L1926:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4545
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
L1927:
          dec       word64 [Dframe+-264]
          mov       D0,	[Dframe+-264]
          cmp       D0,	0
          jnz       L1926
L1928:
          mov       D0,	[ax_lex.lxsymbol]
          mov       D1,	17
          cmp       D0,	D1
          jz        L1930
          mov       D1,	14
          cmp       D0,	D1
          jz        L1931
          mov       D1,	15
          cmp       D0,	D1
          jz        L1932
          mov       D1,	16
          cmp       D0,	D1
          jz        L1933
          mov       D1,	1
          cmp       D0,	D1
          jz        L1934
          jmp       L1935
L1930:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[ax_lex.lxsymptr]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          jmp       L1929
L1931:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[ax_lex.lxvalue]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
          jmp       L1929
L1932:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          movq      XMM0,	[ax_lex.lxxvalue]
          push      D0
          movq      D13,	XMM0
          push      D13
          call      [L4546]	!print_r64
          call      [L3650]	!print_end
          jmp       L1929
L1933:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	L4547
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[ax_lex.lxsvalue]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4547
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          jmp       L1929
L1934:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[ax_lex.lxvalue]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
          jmp       L1929
L1935:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[ax_lex.lxsymbol]
          mov       D1,	[D1*8+ax_tables.symbolnames-8]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          mov       D0,	[ax_lex.lxsubcode]
          cmp       D0,	0
          jz        L1936
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4548
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	[ax_lex.lxsubcode]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3650]	!print_end
L1936:
L1929:
          mov       D0,	[Dframe+16]
          push      D0
          call      [L4339]	!print_startfile
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L1924:
;-------------------------------------------------
          add       Dstack,	264
          pop       Dframe
          retn      8
;PROC PS ============================================================
ax_lex.ps::
L4549:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4550
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          mov       D0,	0
          push      D0
          call      ax_lex.printsymbol
L1937:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC READHEX ============================================================
ax_lex.readhex:
L4551:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-8],	D0
          mov       D0,	0
          mov       [ax_lex.lxvalue],	D0
L1939:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-16],	D1
          sub       D1,	39
          cmp       D1,	64
          jae       L1942
          jmp       [D1*8+L1941]
          isegment  
L1941:
          dq        L1946
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1943
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1944
          dq        L1944
          dq        L1944
          dq        L1944
          dq        L1944
          dq        L1944
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1942
          dq        L1946
          dq        L1946
          dq        L1945
          dq        L1945
          dq        L1945
          dq        L1945
          dq        L1945
          dq        L1945
          csegment  
L1943:
          mov       D0,	[ax_lex.lxvalue]
          shl       D0,	4
          mov       D1,	[Dframe+-16]
          add       D0,	D1
          mov       D1,	48
          sub       D0,	D1
          mov       [ax_lex.lxvalue],	D0
          inc       word64 [Dframe+-8]
          jmp       L1939
L1944:
          mov       D0,	[ax_lex.lxvalue]
          shl       D0,	4
          mov       D1,	[Dframe+-16]
          mov       D2,	65
          sub       D1,	D2
          mov       D2,	10
          add       D1,	D2
          add       D0,	D1
          mov       [ax_lex.lxvalue],	D0
          inc       word64 [Dframe+-8]
          jmp       L1939
L1945:
          mov       D0,	[ax_lex.lxvalue]
          shl       D0,	4
          mov       D1,	[Dframe+-16]
          mov       D2,	97
          sub       D1,	D2
          mov       D2,	10
          add       D1,	D2
          add       D0,	D1
          mov       [ax_lex.lxvalue],	D0
          inc       word64 [Dframe+-8]
          jmp       L1939
L1946:
          jmp       L1939
L1942:
          dec       word64 [ax_lex.lxsptr]
          jmp       L1940
          jmp       L1939
L1940:
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1948
          mov       D0,	L4552
          push      D0
          call      ax_lex.lxerror
          jmp       L1947
L1948:
          mov       D0,	[Dframe+-8]
          mov       D1,	16
          cmp       D0,	D1
          jle       L1949
          mov       D0,	L4553
          push      D0
          call      ax_lex.lxerror
L1949:
L1947:
          mov       D0,	14
          mov       [ax_lex.lxsymbol],	D0
L1938:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC READBINARY ============================================================
ax_lex.readbinary:
L4554:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-8],	D0
          mov       D0,	0
          mov       [ax_lex.lxvalue],	D0
L1951:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          sub       D1,	39
          cmp       D1,	58
          jae       L1954
          jmp       [D1*8+L1953]
          isegment  
L1953:
          dq        L1958
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1955
          dq        L1956
          dq        L1957
          dq        L1957
          dq        L1957
          dq        L1957
          dq        L1957
          dq        L1957
          dq        L1957
          dq        L1957
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1954
          dq        L1958
          dq        L1958
          csegment  
L1955:
          mov       D0,	[ax_lex.lxvalue]
          shl       D0,	1
          mov       [ax_lex.lxvalue],	D0
          inc       word64 [Dframe+-8]
          jmp       L1951
L1956:
          mov       D0,	[ax_lex.lxvalue]
          shl       D0,	1
          mov       D1,	1
          add       D0,	D1
          mov       [ax_lex.lxvalue],	D0
          inc       word64 [Dframe+-8]
          jmp       L1951
L1957:
          mov       D0,	L4555
          push      D0
          call      ax_lex.lxerror
          jmp       L1951
L1958:
          jmp       L1951
L1954:
          dec       word64 [ax_lex.lxsptr]
          jmp       L1952
          jmp       L1951
L1952:
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1960
          mov       D0,	L4556
          push      D0
          call      ax_lex.lxerror
          jmp       L1959
L1960:
          mov       D0,	[Dframe+-8]
          mov       D1,	64
          cmp       D0,	D1
          jle       L1961
          mov       D0,	L4557
          push      D0
          call      ax_lex.lxerror
L1961:
L1959:
          mov       D0,	14
          mov       [ax_lex.lxsymbol],	D0
L1950:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC READNUMBER ============================================================
ax_lex.readnumber:
L4558:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	288
;-------------------------------------------------
          mov       D0,	[ax_lex.lxsptr]
          movzx     D0,	byte [D0]
          mov       [Dframe+-272],	D0
          mov       D1,	120
          cmp       D0,	D1
          jz        L1964
          mov       D1,	88
          cmp       D0,	D1
          jz        L1964
          jmp       L1965
L1964:
          mov       D0,	[Dframe+16]
          mov       D1,	48
          cmp       D0,	D1
          jz        L1967
          mov       D1,	50
          cmp       D0,	D1
          jz        L1968
          jmp       L1969
L1967:
          inc       word64 [ax_lex.lxsptr]
          call      ax_lex.readhex
          add       Dstack,	288
          pop       Dframe
          retn      8
          jmp       L1966
L1968:
          inc       word64 [ax_lex.lxsptr]
          call      ax_lex.readbinary
          add       Dstack,	288
          pop       Dframe
          retn      8
          jmp       L1966
L1969:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4559
          push      D0
          call      ax_lex.lxerror
L1966:
          jmp       L1963
L1965:
L1963:
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-256]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	1
          mov       [Dframe+-288],	D0
          mov       D0,	0
          mov       [Dframe+-280],	D0
L1970:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+16],	D1
          sub       D1,	39
          cmp       D1,	63
          jae       L1973
          jmp       [D1*8+L1972]
          isegment  
L1972:
          dq        L1975
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1976
          dq        L1973
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1974
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1977
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1975
          dq        L1975
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1973
          dq        L1977
          csegment  
L1974:
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-256]
          lea       D2,	[Dframe+-288]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3-1],	B0
          jmp       L1970
L1975:
          jmp       L1970
L1976:
          mov       D0,	[Dframe+-288]
          mov       [Dframe+-280],	D0
          jmp       L1970
L1977:
          mov       D0,	1
          push      D0
          push      word64 [Dframe+-280]
          push      word64 [Dframe+-288]
          lea       D0,	[Dframe+-256]
          push      D0
          call      ax_lex.readreal
          add       Dstack,	288
          pop       Dframe
          retn      8
          jmp       L1970
L1973:
          dec       word64 [ax_lex.lxsptr]
          jmp       L1971
          jmp       L1970
L1971:
          mov       D0,	[Dframe+-280]
          cmp       D0,	0
          jz        L1978
          mov       D0,	0
          push      D0
          push      word64 [Dframe+-280]
          push      word64 [Dframe+-288]
          lea       D0,	[Dframe+-256]
          push      D0
          call      ax_lex.readreal
          add       Dstack,	288
          pop       Dframe
          retn      8
L1978:
          mov       D0,	[Dframe+-288]
          mov       D1,	20
          cmp       D0,	D1
          jg        L1980
          mov       D0,	[Dframe+-288]
          mov       D1,	20
          cmp       D0,	D1
          jnz       L1979
          mov       D0,	L4560
          lea       D1,	[Dframe+-256]
          push      D0
          push      D1
          call      mlib.cmpstring
          mov       D1,	0
          cmp       D0,	D1
          jle       L1979
L1980:
          mov       D0,	L4561
          push      D0
          call      ax_lex.lxerror
L1979:
          mov       D0,	14
          mov       [ax_lex.lxsymbol],	D0
          mov       D0,	0
          mov       [ax_lex.lxvalue],	D0
L1981:
          mov       D0,	1
          mov       [Dframe+-264],	D0
          mov       D0,	[Dframe+-288]
          cmp       D0,	1
          jl        L1984
L1982:
          mov       D0,	[ax_lex.lxvalue]
          mov       D1,	10
          imul2     D0,	D1
          mov       D1,	[Dframe+-264]
          movzx     D1,	byte [Dframe+D1+-256-1]
          add       D0,	D1
          mov       D1,	48
          sub       D0,	D1
          mov       [ax_lex.lxvalue],	D0
L1983:
          mov       D0,	[Dframe+-264]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-264],	D0
          mov       D1,	[Dframe+-288]
          cmp       D0,	D1
          jle       L1982
L1984:
L1962:
;-------------------------------------------------
          add       Dstack,	288
          pop       Dframe
          retn      8
;PROC READREAL ============================================================
ax_lex.readreal:
L4562:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	72
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jz        L1987
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jnz       L1986
L1987:
          mov       D0,	0
          mov       [Dframe+-16],	D0
          jmp       L1988
L1986:
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+32]
          sub       D0,	D1
          mov       [Dframe+-16],	D0
L1988:
          mov       D0,	0
          mov       [Dframe+-24],	D0
          mov       D0,	0
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+40]
          cmp       D0,	0
          jz        L1989
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-40],	D1
          mov       D0,	43
          cmp       D1,	D0
          jz        L1991
          mov       D0,	45
          cmp       D1,	D0
          jz        L1992
          jmp       L1993
L1991:
          jmp       L1990
L1992:
          mov       D0,	1
          mov       [Dframe+-32],	D0
          jmp       L1990
L1993:
          dec       word64 [ax_lex.lxsptr]
L1990:
          mov       D0,	0
          mov       [Dframe+-48],	D0
L1994:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-40],	D1
          sub       D1,	48
          cmp       D1,	10
          jae       L1997
          jmp       [D1*8+L1996]
          isegment  
L1996:
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          dq        L1998
          csegment  
L1998:
          mov       D0,	[Dframe+-24]
          mov       D1,	10
          imul2     D0,	D1
          mov       D1,	[Dframe+-40]
          add       D0,	D1
          mov       D1,	48
          sub       D0,	D1
          mov       [Dframe+-24],	D0
          inc       word64 [Dframe+-48]
          jmp       L1994
L1997:
          dec       word64 [ax_lex.lxsptr]
          jmp       L1995
          jmp       L1994
L1995:
          mov       D0,	[Dframe+-48]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L1999
          mov       D0,	L4563
          push      D0
          call      ax_lex.lxerror
L1999:
          mov       D0,	[Dframe+-32]
          cmp       D0,	0
          jz        L2000
          mov       D0,	[Dframe+-24]
          neg       D0
          mov       [Dframe+-24],	D0
L2000:
L1989:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          sub       D0,	D1
          mov       [Dframe+-24],	D0
          movq      XMM0,	[L4564]
          movq      [ax_lex.lxxvalue],	XMM0
L2001:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          cmp       D0,	1
          jl        L2004
L2002:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          movzx     D0,	byte [D0+D1-1]
          mov       [Dframe+-40],	D0
          movq      XMM0,	[ax_lex.lxxvalue]
          movq      XMM1,	[L4565]
          mulsd     XMM0,	XMM1
          mov       D0,	[Dframe+-40]
          mov       D1,	48
          sub       D0,	D1
          cvtsi2sd  XMM1,	D0
          addsd     XMM0,	XMM1
          movq      [ax_lex.lxxvalue],	XMM0
L2003:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jle       L2002
L2004:
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jle       L2006
L2007:
          mov       D0,	[Dframe+-24]
          mov       [Dframe+-64],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2010
L2008:
          movq      XMM0,	[ax_lex.lxxvalue]
          movq      XMM1,	[L4566]
          mulsd     XMM0,	XMM1
          movq      [ax_lex.lxxvalue],	XMM0
L2009:
          dec       word64 [Dframe+-64]
          mov       D0,	[Dframe+-64]
          cmp       D0,	0
          jnz       L2008
L2010:
          jmp       L2005
L2006:
          mov       D0,	[Dframe+-24]
          mov       D1,	0
          cmp       D0,	D1
          jge       L2011
L2012:
          mov       D0,	[Dframe+-24]
          neg       D0
          mov       [Dframe+-72],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2015
L2013:
          movq      XMM0,	[ax_lex.lxxvalue]
          movq      XMM1,	[L4567]
          divsd     XMM0,	XMM1
          movq      [ax_lex.lxxvalue],	XMM0
L2014:
          dec       word64 [Dframe+-72]
          mov       D0,	[Dframe+-72]
          cmp       D0,	0
          jnz       L2013
L2015:
L2011:
L2005:
          mov       D0,	15
          mov       [ax_lex.lxsymbol],	D0
L1985:
;-------------------------------------------------
          add       Dstack,	72
          pop       Dframe
          retn      32
;PROC INITLEX ============================================================
ax_lex.initlex::
L4568:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	0
          mov       [ax_lex.lxsubcode],	D0
          mov       D0,	1
          mov       [ax_lex.lxsymbol],	D0
          mov       D0,	0
          mov       [ax_decls.lxlineno],	D0
L2017:
          mov       D0,	0
          mov       [Dframe+-8],	D0
L2018:
          mov       D0,	[Dframe+-8]
          sub       D0,	36
          cmp       D0,	87
          jae       L2023
          jmp       [D0*8+L2022]
          isegment  
L2022:
          dq        L2024
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2023
          dq        L2024
          dq        L2023
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          dq        L2024
          csegment  
L2024:
          mov       D0,	1
          lea       D1,	[ax_lex.alphamap]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2],	B0
          jmp       L2021
L2023:
L2021:
          mov       D0,	[Dframe+-8]
          sub       D0,	48
          cmp       D0,	10
          jae       L2027
          jmp       [D0*8+L2026]
          isegment  
L2026:
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          dq        L2028
          csegment  
L2028:
          mov       D0,	1
          lea       D1,	[ax_lex.digitmap]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2],	B0
          jmp       L2025
L2027:
L2025:
          mov       D0,	1
          lea       D1,	[ax_lex.commentmap]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2],	B0
L2019:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          cmp       D0,	255
          jle       L2018
L2020:
          mov       D0,	0
          lea       D1,	[ax_lex.commentmap]
          mov       D2,	0
          mov       [D1+D2],	B0
          mov       D0,	0
          lea       D1,	[ax_lex.commentmap]
          mov       D2,	10
          mov       [D1+D2],	B0
          call      ax_lex.inithashtable
L2016:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC LEX ============================================================
ax_lex.lex::
L4569:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          mov       D0,	0
          mov       [ax_lex.lxsubcode],	D0
L2030:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-16],	D1
          cmp       D1,	123
          jae       L2033
          jmp       [D1*8+L2032]
          isegment  
L2032:
          dq        L2095
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2092
          dq        L2094
          dq        L2033
          dq        L2033
          dq        L2093
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2095
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2092
          dq        L2057
          dq        L2084
          dq        L2057
          dq        L2034
          dq        L2033
          dq        L2033
          dq        L2072
          dq        L2033
          dq        L2033
          dq        L2070
          dq        L2068
          dq        L2062
          dq        L2069
          dq        L2034
          dq        L2033
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2047
          dq        L2063
          dq        L2057
          dq        L2033
          dq        L2071
          dq        L2033
          dq        L2033
          dq        L2033
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2046
          dq        L2066
          dq        L2033
          dq        L2067
          dq        L2033
          dq        L2034
          dq        L2048
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          dq        L2034
          csegment  
L2034:
          mov       D0,	[ax_lex.lxsptr]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-56],	D0
;doname
L2035:
          mov       D0,	[Dframe+-16]
          mov       [Dframe+-40],	D0
          mov       [Dframe+-32],	D0
L2036:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-16],	D1
          sub       D1,	36
          cmp       D1,	87
          jae       L2039
          jmp       [D1*8+L2038]
          isegment  
L2038:
          dq        L2040
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2040
          dq        L2039
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2041
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2039
          dq        L2040
          dq        L2039
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          dq        L2040
          csegment  
L2040:
          mov       D0,	[Dframe+-16]
          add       [Dframe+-40],	D0
          mov       D0,	[Dframe+-32]
          shl       D0,	3
          mov       D1,	[Dframe+-40]
          add       D0,	D1
          mov       [Dframe+-32],	D0
          jmp       L2036
L2041:
          mov       D0,	[Dframe+-16]
          mov       D1,	32
          add       D0,	D1
          mov       D1,	[ax_lex.lxsptr]
          mov       [D1-1],	B0
          mov       D0,	[Dframe+-16]
          mov       D1,	32
          add       D0,	D1
          add       [Dframe+-40],	D0
          mov       D0,	[Dframe+-32]
          shl       D0,	3
          mov       D1,	[Dframe+-40]
          add       D0,	D1
          mov       [Dframe+-32],	D0
          jmp       L2036
L2039:
          dec       word64 [ax_lex.lxsptr]
          jmp       L2037
          jmp       L2036
L2037:
          mov       D0,	[ax_lex.lxsptr]
          mov       D1,	[Dframe+-56]
          sub       D0,	D1
          mov       [ax_lex.lxlength],	D0
          mov       D0,	[Dframe+-32]
          shl       D0,	5
          mov       D1,	[Dframe+-40]
          xor       D0,	D1
          mov       [ax_lex.lxhashvalue],	D0
          push      word64 [ax_lex.lxlength]
          mov       D0,	[Dframe+-56]
          push      D0
          call      ax_lex.lookuplex
          cmp       D0,	0
          jz        L2042
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+37]
          cmp       D0,	0
          jz        L2043
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+37]
          mov       [ax_lex.lxsymbol],	D0
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+38]
          mov       [ax_lex.lxsubcode],	D0
          jmp       L2044
L2043:
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+36]
          mov       [ax_lex.lxsymbol],	D0
L2044:
          jmp       L2045
L2042:
          mov       D0,	17
          mov       [ax_lex.lxsymbol],	D0
L2045:
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2046:
          mov       D0,	[ax_lex.lxsptr]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-56],	D0
          movzx     D0,	byte [D0]
          mov       D1,	32
          add       D0,	D1
          mov       D1,	[Dframe+-56]
          mov       [D1],	B0
          movzx     D0,	B0
          mov       [Dframe+-16],	D0
          jmp       L2035
          jmp       L2030
L2047:
          push      word64 [Dframe+-16]
          call      ax_lex.readnumber
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2048:
          mov       D0,	[ax_lex.lxsptr]
          mov       [Dframe+-56],	D0
          mov       D0,	0
          mov       [Dframe+-40],	D0
          mov       [Dframe+-32],	D0
L2049:
          mov       D0,	[ax_lex.lxsptr]
          movzx     D0,	byte [D0]
          mov       [Dframe+-16],	D0
          sub       D0,	36
          cmp       D0,	87
          jae       L2052
          jmp       [D0*8+L2051]
          isegment  
L2051:
          dq        L2053
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2053
          dq        L2052
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2052
          dq        L2053
          dq        L2052
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          dq        L2053
          csegment  
L2053:
          inc       word64 [ax_lex.lxsptr]
          mov       D0,	[Dframe+-16]
          add       [Dframe+-40],	D0
          mov       D0,	[Dframe+-32]
          shl       D0,	3
          mov       D1,	[Dframe+-40]
          add       D0,	D1
          mov       [Dframe+-32],	D0
          jmp       L2049
L2052:
          jmp       L2050
          jmp       L2049
L2050:
          mov       D0,	17
          mov       [ax_lex.lxsymbol],	D0
          mov       D0,	[Dframe+-56]
          mov       D1,	[ax_lex.lxsptr]
          cmp       D0,	D1
          jnz       L2054
          mov       D0,	L4570
          push      D0
          call      ax_lex.lxerror
L2054:
          mov       D0,	[ax_lex.lxsptr]
          mov       D1,	[Dframe+-56]
          sub       D0,	D1
          mov       [ax_lex.lxlength],	D0
          mov       D0,	[Dframe+-32]
          shl       D0,	5
          mov       D1,	[Dframe+-40]
          xor       D0,	D1
          mov       [ax_lex.lxhashvalue],	D0
          push      word64 [ax_lex.lxlength]
          mov       D0,	[Dframe+-56]
          push      D0
          call      ax_lex.lookuplex
          cmp       D0,	0
          jz        L2055
          mov       D0,	[ax_lex.lxsymptr]
          movzx     D0,	byte [D0+36]
          mov       [ax_lex.lxsymbol],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2056
          mov       D0,	17
          mov       D1,	[ax_lex.lxsymptr]
          mov       [D1+36],	B0
          movzx     D0,	B0
          mov       [ax_lex.lxsymbol],	D0
L2056:
L2055:
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2057:
          jmp       L2059
L2058:
L2059:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          movzx     D1,	byte [D1+ax_lex.commentmap]
          cmp       D1,	0
          jnz       L2058
L2060:
          mov       D0,	[ax_lex.lxsptr]
          movzx     D0,	byte [D0-1]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2061
          dec       word64 [ax_lex.lxsptr]
L2061:
          inc       word64 [ax_decls.lxlineno]
          mov       D0,	11
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2062:
          mov       D0,	2
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2063:
          mov       D0,	[ax_lex.lxsptr]
          movzx     D0,	byte [D0]
          mov       D1,	58
          cmp       D0,	D1
          jnz       L2064
          mov       D0,	4
          mov       [ax_lex.lxsymbol],	D0
          inc       word64 [ax_lex.lxsptr]
          jmp       L2065
L2064:
          mov       D0,	3
          mov       [ax_lex.lxsymbol],	D0
L2065:
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2066:
          mov       D0,	5
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2067:
          mov       D0,	6
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2068:
          mov       D0,	7
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2069:
          mov       D0,	8
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2070:
          mov       D0,	9
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2071:
          mov       D0,	10
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2072:
          mov       D0,	[ax_lex.lxsptr]
          mov       [Dframe+-56],	D0
L2073:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          sub       D1,	10
          cmp       D1,	30
          jae       L2077
          jmp       [D1*8+L2076]
          isegment  
L2076:
          dq        L2079
          dq        L2077
          dq        L2077
          dq        L2079
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2077
          dq        L2078
          csegment  
L2078:
          jmp       L2074
          jmp       L2075
L2079:
          mov       D0,	L4571
          push      D0
          call      ax_lex.lxerror
          jmp       L2075
L2077:
L2075:
          jmp       L2073
L2074:
          mov       D0,	[ax_lex.lxsptr]
          mov       D1,	[Dframe+-56]
          sub       D0,	D1
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-48],	D0
          mov       D0,	0
          mov       [ax_lex.lxvalue],	D0
L2080:
          mov       D0,	[Dframe+-48]
          mov       [Dframe+-8],	D0
          mov       D1,	1
          cmp       D0,	D1
          jl        L2083
L2081:
          mov       D0,	[ax_lex.lxvalue]
          shl       D0,	8
          mov       D1,	[Dframe+-56]
          mov       D2,	[Dframe+-8]
          lea       D1,	[D1+D2]
          movzx     D1,	byte [D1-1]
          add       D0,	D1
          mov       [ax_lex.lxvalue],	D0
L2082:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-8],	D0
          cmp       D0,	1
          jge       L2081
L2083:
          mov       D0,	14
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2084:
          mov       D0,	[ax_lex.lxsptr]
          mov       [Dframe+-56],	D0
L2085:
          lea       D0,	[ax_lex.lxsptr]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          cmp       D1,	35
          jae       L2089
          jmp       [D1*8+L2088]
          isegment  
L2088:
          dq        L2091
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2091
          dq        L2089
          dq        L2089
          dq        L2091
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2091
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2089
          dq        L2090
          csegment  
L2090:
          mov       D0,	[Dframe+-56]
          mov       [ax_lex.lxsvalue],	D0
          mov       D0,	[ax_lex.lxsptr]
          mov       D1,	[Dframe+-56]
          sub       D0,	D1
          mov       D1,	1
          sub       D0,	D1
          mov       [ax_lex.lxlength],	D0
          mov       D0,	0
          mov       D1,	[ax_lex.lxsvalue]
          mov       D2,	[ax_lex.lxlength]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	16
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2087
L2091:
          mov       D0,	L4571
          push      D0
          call      ax_lex.lxerror
          jmp       L2087
L2089:
L2087:
          jmp       L2085
L2086:
          jmp       L2030
L2092:
          jmp       L2030
L2093:
          jmp       L2030
L2094:
          inc       word64 [ax_decls.lxlineno]
          mov       D0,	11
          mov       [ax_lex.lxsymbol],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2095:
          mov       D0,	12
          mov       [ax_lex.lxsymbol],	D0
          dec       word64 [ax_lex.lxsptr]
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2033:
          mov       D0,	1
          mov       [ax_lex.lxsymbol],	D0
          mov       D0,	[Dframe+-16]
          mov       [ax_lex.lxvalue],	D0
          add       Dstack,	56
          pop       Dframe
          ret       
          jmp       L2030
L2031:
L2029:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          ret       
;PROC OS_PEEK ============================================================
oswindows.os_peek::
L4572:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	112
;-------------------------------------------------
          mov       D0,	`GetTickCount*
          call      [L3654]	!callff_4
          movzx     D0,	A0
          mov       [Dframe+-8],	D0
          mov       D1,	[oswindows.os_peek.lastticks]
          sub       D0,	D1
          mov       D1,	1000
          cmp       D0,	D1
          jl        L2097
          mov       D0,	[Dframe+-8]
          mov       [oswindows.os_peek.lastticks],	D0
          mov       D0,	0
          mov       D1,	0
          mov       D2,	0
          mov       D3,	0
          lea       D4,	[Dframe+-112]
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          mov       D0,	`PeekMessageA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L4573]	!callff_5
L2097:
L2096:
;-------------------------------------------------
          add       Dstack,	112
          pop       Dframe
          ret       
;PROC OS_HPFREQUENCY ============================================================
oswindows.os_hpfrequency::
L4574:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          lea       D0,	[Dframe+-8]
          push      D0
          mov       D0,	`QueryPerformanceFrequency*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
L2098:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC OS_HPCOUNTER ============================================================
oswindows.os_hpcounter::
L4575:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          lea       D0,	[Dframe+-8]
          push      D0
          mov       D0,	`QueryPerformanceCounter*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
L2099:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC OS_MESSAGEBOX ============================================================
oswindows.os_messagebox::
L4576:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          mov       D3,	0
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`MessageBoxA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2100:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC OS_GETSYSTIME ============================================================
oswindows.os_getsystime::
L4577:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`GetLocalTime*
          pop       D10
          call      [L3654]	!callff_4
L2101:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC OS_FILELASTWRITETIME ============================================================
oswindows.os_filelastwritetime::
L4578:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2103
          mov       D0,	1
          add       Dstack,	32
          pop       Dframe
          retn      8
L2103:
          mov       D0,	0
          mov       D1,	3
          mov       D2,	3
          mov       D3,	0
          mov       D4,	1
          mov       D5,	2147483648
          mov       D6,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          push      D5
          push      D6
          mov       D0,	`CreateFileA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L4579]	!callff_7
          mov       [Dframe+-8],	D0
          mov       D1,	-1
          cmp       D0,	D1
          jnz       L2104
          mov       D0,	0
          add       Dstack,	32
          pop       Dframe
          retn      8
L2104:
          lea       D0,	[Dframe+-32]
          lea       D1,	[Dframe+-24]
          lea       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`GetFileTime*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
          push      D0
          mov       D0,	`CloseHandle*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-32]
L2102:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      8
;PROC OS_ISWINDOWS ============================================================
oswindows.os_iswindows::
L4580:
;-------------------------------------------------
          mov       D0,	1
L2105:
;-------------------------------------------------
          ret       
;PROC OS_GETCLOCKSPERSEC ============================================================
oswindows.os_getclockspersec::
L4581:
;-------------------------------------------------
          mov       D0,	1000
L2106:
;-------------------------------------------------
          ret       
;PROC OS_CLOCK ============================================================
oswindows.os_clock::
L4582:
;-------------------------------------------------
          mov       D0,	`clock*
          call      [L3654]	!callff_4
          movsx     D0,	A0
L2107:
;-------------------------------------------------
          ret       
;PROC OS_EXITPROCESS ============================================================
oswindows.os_exitprocess::
L4583:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      [L3674]	!stop
L2108:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC OS_GETMPATH ============================================================
oswindows.os_getmpath::
L4584:
;-------------------------------------------------
          mov       D0,	L4585
L2109:
;-------------------------------------------------
          ret       
;PROC OS_GETHOSTNAME ============================================================
oswindows.os_gethostname::
L4586:
;-------------------------------------------------
          mov       D0,	300
          lea       D1,	[oswindows.os_gethostname.name]
          mov       D2,	0
          push      D0
          push      D1
          push      D2
          mov       D0,	`GetModuleFileNameA*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	L4587
          lea       D1,	[oswindows.os_gethostname.name]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[oswindows.os_gethostname.name]
L2110:
;-------------------------------------------------
          ret       
;PROC OS_GETSTDOUT ============================================================
oswindows.os_getstdout::
L4588:
;-------------------------------------------------
          mov       D0,	L4589
          mov       D1,	L4590
          push      D0
          push      D1
          mov       D0,	`fopen*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2111:
;-------------------------------------------------
          ret       
;PROC OS_GETSTDIN ============================================================
oswindows.os_getstdin::
L4591:
;-------------------------------------------------
          mov       D0,	L4592
          mov       D1,	L4593
          push      D0
          push      D1
          mov       D0,	`fopen*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2112:
;-------------------------------------------------
          ret       
;PROC OS_SLEEP ============================================================
oswindows.os_sleep::
L4594:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	A0
          push      D0
          mov       D0,	`Sleep*
          pop       D10
          call      [L3654]	!callff_4
L2113:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC OS_SHELLEXEC ============================================================
oswindows.os_shellexec::
L4595:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          push      D0
          mov       D0,	`system*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
L2114:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC OS_GETHOSTSIZE ============================================================
oswindows.os_gethostsize::
L4596:
;-------------------------------------------------
          mov       D0,	64
L2115:
;-------------------------------------------------
          ret       
;PROC OS_GETOS ============================================================
oswindows.os_getos::
L4597:
;-------------------------------------------------
          mov       D0,	64
          mov       D1,	32
          cmp       D0,	D1
          jnz       L2117
          mov       D0,	L4598
          jmp       L2118
L2117:
          mov       D0,	L4599
L2118:
L2116:
;-------------------------------------------------
          ret       
;PROC OS_GETCHX ============================================================
oswindows.os_getchx::
L4600:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	64
;-------------------------------------------------
          mov       D0,	[oswindows.init_flag]
          cmp       D0,	0
          jnz       L2120
          call      oswindows.os_init
L2120:
          mov       D0,	[oswindows.keypending]
          cmp       D0,	0
          jz        L2121
          lea       D0,	[oswindows.lastkey]
          lea       D1,	[oswindows.pendkey]
          mov       D2,	[D1]
          mov       [D0],	D2
          mov       D2,	[D1+8]
          mov       [D0+8],	D2
          mov       A2,	[D1+16]
          mov       [D0+16],	A2
          mov       D0,	0
          mov       [oswindows.keypending],	D0
          jmp       L2122
L2121:
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word16 [D0+8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2123
L2124:
          mov       D0,	0
          mov       [Dframe+-8],	D0
          lea       D0,	[Dframe+-8]
          mov       D1,	1
          lea       D2,	[oswindows.lastkey]
          mov       D3,	[oswindows.hconsolein]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`ReadConsoleInputA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2125:
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word16 [D0]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L2124
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word32 [D0+4]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L2124
L2126:
L2123:
L2122:
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word32 [D0+16]
          mov       D1,	3
          and       D0,	D1
          cmp       D0,	0
          jz        L2127
          mov       D0,	1
          jmp       L2128
L2127:
          mov       D0,	0
L2128:
          mov       [Dframe+-40],	D0
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word32 [D0+16]
          mov       D1,	12
          and       D0,	D1
          cmp       D0,	0
          jz        L2129
          mov       D0,	1
          jmp       L2130
L2129:
          mov       D0,	0
L2130:
          mov       [Dframe+-48],	D0
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word32 [D0+16]
          mov       D1,	16
          and       D0,	D1
          cmp       D0,	0
          jz        L2131
          mov       D0,	1
          jmp       L2132
L2131:
          mov       D0,	0
L2132:
          mov       [Dframe+-56],	D0
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word32 [D0+16]
          mov       D1,	128
          and       D0,	D1
          cmp       D0,	0
          jz        L2133
          mov       D0,	1
          jmp       L2134
L2133:
          mov       D0,	0
L2134:
          mov       [Dframe+-64],	D0
          lea       D0,	[oswindows.lastkey]
          lea       D0,	[D0+8]
          dec       word16 [D0]
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	byte [D0+14]
          mov       [Dframe+-16],	D0
          lea       D0,	[oswindows.lastkey]
          movzx     D0,	word16 [D0+10]
          mov       D1,	255
          and       D0,	D1
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	0
          cmp       D0,	D1
          jge       L2135
          mov       D0,	[Dframe+-16]
          mov       D1,	-128
          cmp       D0,	D1
          jge       L2136
          mov       D0,	0
          mov       [Dframe+-16],	D0
          jmp       L2137
L2136:
          mov       D0,	256
          add       [Dframe+-16],	D0
L2137:
L2135:
          mov       D0,	[Dframe+-40]
          cmp       D0,	0
          jz        L2138
          mov       D0,	[Dframe+-48]
          cmp       D0,	0
          jz        L2138
          mov       D0,	[Dframe+-16]
          mov       D1,	166
          cmp       D0,	D1
          jnz       L2138
          mov       D0,	0
          mov       [Dframe+-48],	D0
          mov       [Dframe+-40],	D0
          jmp       L2139
L2138:
          mov       D0,	[Dframe+-40]
          cmp       D0,	0
          jnz       L2141
          mov       D0,	[Dframe+-48]
          cmp       D0,	0
          jz        L2140
L2141:
          mov       D0,	0
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-32]
          mov       D1,	65
          cmp       D0,	D1
          jl        L2142
          mov       D0,	[Dframe+-32]
          mov       D1,	90
          cmp       D0,	D1
          jg        L2142
          mov       D0,	[Dframe+-32]
          mov       D1,	64
          sub       D0,	D1
          mov       [Dframe+-16],	D0
L2142:
L2140:
L2139:
          mov       D0,	[Dframe+-64]
          shl       D0,	3
          mov       D1,	[Dframe+-40]
          shl       D1,	2
          or        D0,	D1
          mov       D1,	[Dframe+-48]
          shl       D1,	1
          or        D0,	D1
          mov       D1,	[Dframe+-56]
          or        D0,	D1
          mov       [Dframe+-24],	D0
          shl       D0,	24
          mov       D1,	[Dframe+-32]
          shl       D1,	16
          or        D0,	D1
          mov       D1,	[Dframe+-16]
          or        D0,	D1
L2119:
;-------------------------------------------------
          add       Dstack,	64
          pop       Dframe
          ret       
;PROC OS_SETMESSHANDLER ============================================================
oswindows.os_setmesshandler::
L4601:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       [oswindows.wndproc_callbackfn],	D0
L2143:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC TIMERPROC ============================================================
oswindows.timerproc:
L4602:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4603
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L2144:
;-------------------------------------------------
          pop       Dframe
          retn      32
;PROC MAINWNDPROC ============================================================
oswindows.mainwndproc::
L4604:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	72
          mov       [Dframe+16],	D10
          mov       [Dframe+24],	D11
          mov       [Dframe+32],	D12
          mov       [Dframe+40],	D13
          call      [L4605]	!pushcallback
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-48]
          mov       [D1],	D0
          mov       A0,	[Dframe+24]
          movzx     D0,	A0
          lea       D1,	[Dframe+-48]
          mov       [D1+8],	A0
          mov       D0,	[Dframe+32]
          lea       D1,	[Dframe+-48]
          mov       [D1+16],	D0
          mov       D0,	[Dframe+40]
          lea       D1,	[Dframe+-48]
          mov       [D1+24],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-48]
          mov       [D1+40],	A0
          mov       D0,	0
          lea       D1,	[Dframe+-48]
          mov       [D1+44],	A0
          mov       D0,	[oswindows.wndproc_callbackfn]
          cmp       D0,	0
          jz        L2146
          lea       D0,	[Dframe+-48]
          push      D0
          mov       D0,	[oswindows.wndproc_callbackfn]
          call      D0
          mov       [Dframe+-64],	D0
          jmp       L2147
L2146:
          mov       D0,	0
          mov       [Dframe+-64],	D0
L2147:
          lea       D0,	[Dframe+-48]
          movzx     D0,	word32 [D0+8]
          mov       D1,	2
          cmp       D0,	D1
          jnz       L2148
          mov       D0,	0
          add       Dstack,	72
          pop       Dframe
          call      [L4606]	!popcallback
          ret       
L2148:
          mov       D0,	[Dframe+-64]
          cmp       D0,	0
          jnz       L2149
          mov       D0,	[Dframe+40]
          mov       D1,	[Dframe+32]
          mov       A2,	[Dframe+24]
          movzx     D2,	A2
          mov       D3,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`DefWindowProcA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
          movzx     D0,	A0
          jmp       L2150
L2149:
          mov       D0,	0
L2150:
L2145:
;-------------------------------------------------
          add       Dstack,	72
          pop       Dframe
          call      [L4606]	!popcallback
          ret       
;PROC OS_GXREGISTERCLASS ============================================================
oswindows.os_gxregisterclass::
L4607:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	80
;-------------------------------------------------
          mov       B0,	[oswindows.os_gxregisterclass.registered]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2152
          add       Dstack,	80
          pop       Dframe
          retn      8
L2152:
          mov       D0,	80
          mov       D1,	0
          lea       D2,	[Dframe+-80]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	80
          lea       D1,	[Dframe+-80]
          mov       [D1],	A0
          mov       D0,	40
          lea       D1,	[Dframe+-80]
          mov       [D1+4],	A0
          lea       D0,	[oswindows.mainwndproc]
          lea       D1,	[Dframe+-80]
          mov       [D1+8],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-80]
          mov       [D1+24],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-80]
          mov       [D1+32],	D0
          mov       D0,	32512
          mov       D1,	0
          push      D0
          push      D1
          mov       D0,	`LoadCursorA*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D1,	[Dframe+-80]
          mov       [D1+40],	D0
          mov       D0,	16
          lea       D1,	[Dframe+-80]
          mov       [D1+48],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-80]
          mov       [D1+56],	D0
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-80]
          mov       [D1+64],	D0
          mov       D0,	0
          lea       D1,	[Dframe+-80]
          mov       [D1+72],	D0
          lea       D0,	[Dframe+-80]
          push      D0
          mov       D0,	`RegisterClassExA*
          pop       D10
          call      [L3654]	!callff_4
          movzx     D0,	A0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2153
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[`GetLastError*]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4608
          push      D0
          call      mlib.abortprogram
L2153:
          mov       D0,	1
          mov       [oswindows.os_gxregisterclass.registered],	B0
L2151:
;-------------------------------------------------
          add       Dstack,	80
          pop       Dframe
          retn      8
;PROC OS_INITWINDOWS ============================================================
oswindows.os_initwindows::
L4609:
;-------------------------------------------------
          call      oswindows.os_init
          mov       D0,	L4610
          push      D0
          call      oswindows.os_gxregisterclass
L2154:
;-------------------------------------------------
          ret       
;PROC OS_GETDLLPROCADDR ============================================================
oswindows.os_getdllprocaddr::
L4611:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`GetProcAddress*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2155:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC OS_GETDLLINST ============================================================
oswindows.os_getdllinst::
L4612:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`LoadLibraryA*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
L2156:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC OS_PROGINSTANCE ============================================================
oswindows.os_proginstance::
L4613:
;-------------------------------------------------
          mov       D0,	L4614
          push      D0
          call      mlib.abortprogram
          mov       D0,	0
L2157:
;-------------------------------------------------
          ret       
;PROC OS_GETCONSOLEOUT ============================================================
oswindows.os_getconsoleout::
L4615:
;-------------------------------------------------
          mov       D0,	[oswindows.hconsole]
L2158:
;-------------------------------------------------
          ret       
;PROC OS_GETCONSOLEIN ============================================================
oswindows.os_getconsolein::
L4616:
;-------------------------------------------------
          mov       D0,	[oswindows.hconsolein]
L2159:
;-------------------------------------------------
          ret       
;PROC OS_FLUSHKEYS ============================================================
oswindows.os_flushkeys::
L4617:
;-------------------------------------------------
          mov       D0,	[oswindows.hconsolein]
          push      D0
          mov       D0,	`FlushConsoleInputBuffer*
          pop       D10
          call      [L3654]	!callff_4
L2160:
;-------------------------------------------------
          ret       
;PROC OS_KBHIT ============================================================
oswindows.os_kbhit::
L4618:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[oswindows.init_flag]
          cmp       D0,	0
          jnz       L2162
          call      oswindows.os_init
L2162:
          lea       D0,	[Dframe+-8]
          mov       D1,	[oswindows.hconsolein]
          push      D0
          push      D1
          mov       D0,	`GetNumberOfConsoleInputEvents*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       A0,	[Dframe+-8]
          movzx     D0,	A0
          mov       D1,	1
          cmp       D0,	D1
          setg      B0
          movzx     A0,	B0
L2161:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC OS_GETCH ============================================================
oswindows.os_getch::
L4619:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          call      oswindows.os_getchx
          mov       D1,	255
          and       D0,	D1
          mov       [Dframe+-8],	D0
L2163:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC OS_EXECCMD ============================================================
oswindows.os_execcmd::
L4620:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	160
;-------------------------------------------------
          mov       D0,	104
          mov       D1,	0
          lea       D2,	[Dframe+-136]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	24
          mov       D1,	0
          lea       D2,	[Dframe+-160]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	104
          lea       D1,	[Dframe+-136]
          mov       [D1],	A0
          lea       D0,	[Dframe+-160]
          lea       D1,	[Dframe+-136]
          mov       D2,	0
          mov       D3,	0
          mov       D4,	32
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L2165
          mov       D0,	16
          jmp       L2166
L2165:
          mov       D0,	0
L2166:
          pop       D1
          or        D1,	D0
          movzx     D1,	A1
          mov       D0,	1
          mov       D2,	0
          mov       D3,	0
          mov       D4,	[Dframe+16]
          mov       D5,	0
          push      D1
          push      D0
          push      D2
          push      D3
          push      D4
          push      D5
          mov       D0,	`CreateProcessA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L4621]	!callff_10
          lea       D0,	[Dframe+-160]
          mov       D0,	[D0]
          push      D0
          mov       D0,	`CloseHandle*
          pop       D10
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-160]
          mov       D0,	[D0+8]
          push      D0
          mov       D0,	`CloseHandle*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	1
L2164:
;-------------------------------------------------
          add       Dstack,	160
          pop       Dframe
          retn      16
;PROC OS_EXECWAIT ============================================================
oswindows.os_execwait::
L4622:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	152
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-24],	D0
          mov       D0,	104
          mov       D1,	0
          lea       D2,	[Dframe+-128]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	24
          mov       D1,	0
          lea       D2,	[Dframe+-152]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+24]
          cmp       D0,	3
          jae       L2170
          jmp       [D0*8+L2169]
          isegment  
L2169:
          dq        L2171
          dq        L2172
          dq        L2173
          csegment  
L2171:
          mov       D0,	32
          mov       [Dframe+-24],	D0
          jmp       L2168
L2172:
          mov       D0,	48
          mov       [Dframe+-24],	D0
          jmp       L2168
L2173:
          mov       D0,	48
          mov       [Dframe+-24],	D0
          jmp       L2168
L2170:
L2168:
          mov       D0,	104
          lea       D1,	[Dframe+-128]
          mov       [D1],	A0
          lea       D0,	[Dframe+-152]
          lea       D1,	[Dframe+-128]
          mov       D2,	0
          mov       D3,	0
          mov       D4,	[Dframe+-24]
          movzx     D4,	A4
          mov       D5,	1
          mov       D6,	0
          mov       D7,	0
          mov       D8,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          push      D5
          push      D6
          push      D7
          push      D8
          mov       D0,	0
          push      D0
          mov       D0,	`CreateProcessA*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L4621]	!callff_10
          movzx     D0,	A0
          mov       [Dframe+-16],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2174
          mov       D0,	`GetLastError*
          call      [L3654]	!callff_4
          movzx     D0,	A0
          mov       [Dframe+-16],	D0
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4623
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	-1
          add       Dstack,	152
          pop       Dframe
          retn      24
L2174:
          mov       D0,	4294967295
          lea       D1,	[Dframe+-152]
          mov       D1,	[D1]
          push      D0
          push      D1
          mov       D0,	`WaitForSingleObject*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-8]
          lea       D1,	[Dframe+-152]
          mov       D1,	[D1]
          push      D0
          push      D1
          mov       D0,	`GetExitCodeProcess*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-152]
          mov       D0,	[D0]
          push      D0
          mov       D0,	`CloseHandle*
          pop       D10
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-152]
          mov       D0,	[D0+8]
          push      D0
          mov       D0,	`CloseHandle*
          pop       D10
          call      [L3654]	!callff_4
          mov       A0,	[Dframe+-8]
          movzx     D0,	A0
L2167:
;-------------------------------------------------
          add       Dstack,	152
          pop       Dframe
          retn      24
;PROC OS_INIT ============================================================
oswindows.os_init::
L4624:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	4294967285
          push      D0
          mov       D0,	`GetStdHandle*
          pop       D10
          call      [L3654]	!callff_4
          mov       [oswindows.hconsole],	D0
          mov       D0,	4294967286
          push      D0
          mov       D0,	`GetStdHandle*
          pop       D10
          call      [L3654]	!callff_4
          mov       [oswindows.hconsolein],	D0
          mov       D0,	0
          lea       D1,	[oswindows.lastkey]
          mov       [D1+8],	W0
          mov       D0,	0
          mov       [oswindows.keypending],	D0
          mov       D0,	1
          mov       D1,	0
          push      D0
          push      D1
          mov       D0,	`SetConsoleCtrlHandler*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	3
          mov       D1,	[oswindows.hconsole]
          push      D0
          push      D1
          mov       D0,	`SetConsoleMode*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	1
          mov       [oswindows.init_flag],	D0
L2175:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          ret       
;PROC CHECKPACKFILE ============================================================
mlib.checkpackfile::
L4625:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	480
;-------------------------------------------------
          call      oswindows.os_gethostname
          lea       D1,	[Dframe+-440]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4626
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[Dframe+-440]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          lea       D0,	[Dframe+-440]
          mov       D1,	1
          lea       D0,	[D0+D1-1]
          push      D0
          call      mlib.readfile
          mov       [Dframe+-448],	D0
          cmp       D0,	0
          jnz       L2177
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4627
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          lea       D1,	[Dframe+-440]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          mov       D0,	0
          lea       D1,	[Dframe+-448]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	0
          push      D0
          call      [L3674]	!stop
L2177:
          mov       D0,	[mlib.rfsize]
          mov       [Dframe+-456],	D0
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4628
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-456]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	[Dframe+-448]
          mov       D1,	[Dframe+-456]
          mov       D2,	4
          sub       D1,	D2
          lea       D0,	[D0+D1]
          movsx     D0,	word32 [D0]
          mov       [Dframe+-8],	D0
          mov       D1,	1262568272
          cmp       D0,	D1
          jz        L2178
          mov       D0,	[Dframe+-448]
          push      D0
          mov       D0,	`free*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       [Dframe+-480],	D0
          mov       D0,	0
          add       Dstack,	480
          pop       Dframe
          ret       
L2178:
          mov       D0,	[Dframe+-448]
          mov       D1,	[Dframe+-456]
          mov       D2,	8
          sub       D1,	D2
          lea       D0,	[D0+D1]
          movsx     D0,	word32 [D0]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-448]
          mov       D1,	[Dframe+-16]
          lea       D0,	[D0+D1]
          mov       [Dframe+-464],	D0
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	1
          add       D0,	D1
          add       [Dframe+-16],	D0
          mov       D0,	[Dframe+-448]
          mov       D1,	[Dframe+-16]
          lea       D0,	[D0+D1]
          movsx     D0,	word32 [D0]
          mov       [Dframe+-472],	D0
          mov       D0,	[Dframe+-448]
          mov       D1,	[Dframe+-16]
          lea       D0,	[D0+D1]
          mov       D1,	4
          add       D0,	D1
          mov       [Dframe+-480],	D0
L2176:
;-------------------------------------------------
          add       Dstack,	480
          pop       Dframe
          ret       
;PROC MRANDOMREAL1 ============================================================
mlib.mrandomreal1::
L4629:
;-------------------------------------------------
          call      mlib.mrandomp
          mov       D1,	9223372036854775807
          cqo       
          idiv      D1
          cvtsi2sd  XMM0,	D0
L2179:
;-------------------------------------------------
          ret       
;PROC MRANDOMREAL ============================================================
mlib.mrandomreal::
L4630:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2181:
          call      mlib.mrandomp
          cvtsi2sd  XMM0,	D0
          movq      XMM1,	[L4631]
          divsd     XMM0,	XMM1
          movq      [Dframe+-8],	XMM0
L2182:
          movq      XMM0,	[Dframe+-8]
          movq      XMM1,	[L4632]
          comisd    XMM0,	XMM1
          jz        L2181
L2183:
          movq      XMM0,	[Dframe+-8]
L2180:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC MRANDOMRANGE ============================================================
mlib.mrandomrange::
L4633:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          sub       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jg        L2185
          mov       D0,	0
          add       Dstack,	8
          pop       Dframe
          retn      16
L2185:
          call      mlib.mrandomp
          mov       D1,	[Dframe+-8]
          cqo       
          idiv      D1
          xchg      D0,	D11
          mov       D1,	[Dframe+16]
          add       D0,	D1
L2184:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC MRANDOMINT ============================================================
mlib.mrandomint::
L4634:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      mlib.mrandomp
          mov       D1,	[Dframe+16]
          cqo       
          idiv      D1
          xchg      D0,	D11
L2186:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC MRANDOMP ============================================================
mlib.mrandomp::
L4635:
;-------------------------------------------------
          call      mlib.mrandom
          mov       D1,	9223372036854775807
          and       D0,	D1
L2187:
;-------------------------------------------------
          ret       
;PROC MRANDOM ============================================================
mlib.mrandom::
L4636:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	1
          mov       D0,	[D0*8+mlib.seed-8]
          mov       [Dframe+-8],	D0
          mov       D0,	2
          mov       D0,	[D0*8+mlib.seed-8]
          mov       [Dframe+-16],	D0
          lea       D1,	[mlib.seed]
          mov       D2,	1
          mov       [D1+D2*8-8],	D0
          mov       D0,	[Dframe+-8]
          shl       D0,	23
          xor       [Dframe+-8],	D0
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-16]
          xor       D0,	D1
          mov       D1,	[Dframe+-8]
          shr       D1,	17
          xor       D0,	D1
          mov       D1,	[Dframe+-16]
          shr       D1,	26
          xor       D0,	D1
          lea       D1,	[mlib.seed]
          mov       D2,	2
          mov       [D1+D2*8-8],	D0
          mov       D0,	2
          mov       D0,	[D0*8+mlib.seed-8]
          mov       D1,	[Dframe+-16]
          add       D0,	D1
L2188:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          ret       
;PROC MSEED ============================================================
mlib.mseed::
L4637:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.seed]
          mov       D2,	1
          mov       [D1+D2*8-8],	D0
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L2190
          mov       D0,	[Dframe+24]
          lea       D1,	[mlib.seed]
          mov       D2,	2
          mov       [D1+D2*8-8],	D0
          jmp       L2191
L2190:
          lea       D0,	[mlib.seed]
          mov       D1,	2
          lea       D0,	[D0+D1*8-8]
          mov       D1,	[Dframe+16]
          xor       [D0],	D1
L2191:
L2189:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC EQBYTES ============================================================
mlib.eqbytes::
L4638:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcmp*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	0
          cmp       D0,	D1
          setz      B0
          movzx     A0,	B0
L2192:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC CMPBYTES ============================================================
mlib.cmpbytes::
L4639:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcmp*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L2195
          mov       D0,	-1
          jmp       L2194
L2195:
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jle       L2196
          mov       D0,	1
          jmp       L2194
L2196:
          mov       D0,	0
L2194:
L2193:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      24
;PROC EQSTRING ============================================================
mlib.eqstring::
L4640:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`strcmp*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	0
          cmp       D0,	D1
          setz      B0
          movzx     A0,	B0
L2197:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC CMPSTRINGN ============================================================
mlib.cmpstringn::
L4641:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strncmp*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L2200
          mov       D0,	-1
          jmp       L2199
L2200:
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jle       L2201
          mov       D0,	1
          jmp       L2199
L2201:
          mov       D0,	0
L2199:
L2198:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      24
;PROC CMPSTRING ============================================================
mlib.cmpstring::
L4642:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`strcmp*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jge       L2204
          mov       D0,	-1
          jmp       L2203
L2204:
          mov       D0,	[Dframe+-8]
          mov       D1,	0
          cmp       D0,	D1
          jle       L2205
          mov       D0,	1
          jmp       L2203
L2205:
          mov       D0,	0
L2203:
L2202:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC CHR ============================================================
mlib.chr::
L4643:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.chr.str]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	0
          lea       D1,	[mlib.chr.str]
          mov       D2,	2
          mov       [D1+D2-1],	B0
          lea       D0,	[mlib.chr.str]
L2206:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PADSTR ============================================================
mlib.padstr::
L4644:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.padstr.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+32]
          push      D0
          push      word64 [Dframe+24]
          lea       D0,	[mlib.padstr.str]
          push      D0
          call      mlib.ipadstr
          lea       D0,	[mlib.padstr.str]
L2207:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC IPADSTR ============================================================
mlib.ipadstr::
L4645:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
L2209:
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-8]
          sub       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2212
L2210:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2211:
          dec       word64 [Dframe+-16]
          mov       D0,	[Dframe+-16]
          cmp       D0,	0
          jnz       L2210
L2212:
L2208:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC READNEXTFILEITEM ============================================================
mlib.readnextfileitem:
L4646:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
;reenter
L2214:
L2215:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	32
          cmp       D0,	D1
          jz        L2218
          mov       D1,	9
          cmp       D0,	D1
          jz        L2218
          mov       D1,	13
          cmp       D0,	D1
          jz        L2218
          mov       D1,	10
          cmp       D0,	D1
          jz        L2218
          mov       D1,	26
          cmp       D0,	D1
          jz        L2219
          mov       D1,	0
          cmp       D0,	D1
          jz        L2219
          jmp       L2220
L2218:
          inc       word64 [Dframe+-8]
          jmp       L2217
L2219:
          mov       D0,	0
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L2217
L2220:
          jmp       L2216
L2217:
          jmp       L2215
L2216:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	33
          cmp       D0,	D1
          jz        L2222
          mov       D1,	35
          cmp       D0,	D1
          jz        L2222
          jmp       L2223
L2222:
          inc       word64 [Dframe+-8]
L2224:
          lea       D0,	[Dframe+-8]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       D0,	10
          cmp       D1,	D0
          jz        L2226
          mov       D0,	26
          cmp       D1,	D0
          jz        L2227
          mov       D0,	0
          cmp       D1,	D0
          jz        L2227
          jmp       L2228
L2226:
          jmp       L2214
          jmp       L2224
L2227:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          sub       D0,	D1
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	0
          add       Dstack,	32
          pop       Dframe
          retn      16
          jmp       L2224
L2228:
          jmp       L2224
L2225:
          jmp       L2221
L2223:
L2221:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	34
          cmp       D0,	D1
          jz        L2230
          jmp       L2231
L2230:
          lea       D0,	[Dframe+-8]
          inc       word64 [D0]
          mov       D0,	[D0]
          mov       [Dframe+-16],	D0
L2232:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2235
          mov       D1,	26
          cmp       D0,	D1
          jz        L2235
          mov       D1,	34
          cmp       D0,	D1
          jz        L2236
          jmp       L2237
L2235:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4647
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	8
          push      D0
          call      [L3674]	!stop
          jmp       L2234
L2236:
          lea       D0,	[Dframe+-8]
          mov       D1,	[D0]
          inc       word64 [D0]
          mov       [Dframe+-24],	D1
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	44
          cmp       D0,	D1
          jnz       L2238
          inc       word64 [Dframe+-8]
L2238:
          jmp       L2233
          jmp       L2234
L2237:
L2234:
          inc       word64 [Dframe+-8]
          jmp       L2232
L2233:
          jmp       L2229
L2231:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-16],	D0
L2239:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2242
          mov       D1,	26
          cmp       D0,	D1
          jz        L2242
          mov       D1,	32
          cmp       D0,	D1
          jz        L2243
          mov       D1,	9
          cmp       D0,	D1
          jz        L2243
          mov       D1,	44
          cmp       D0,	D1
          jz        L2243
          mov       D1,	13
          cmp       D0,	D1
          jz        L2243
          mov       D1,	10
          cmp       D0,	D1
          jz        L2243
          jmp       L2244
L2242:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-24],	D0
          jmp       L2240
          jmp       L2241
L2243:
          lea       D0,	[Dframe+-8]
          mov       D1,	[D0]
          inc       word64 [D0]
          mov       [Dframe+-24],	D1
          jmp       L2240
          jmp       L2241
L2244:
L2241:
          inc       word64 [Dframe+-8]
          jmp       L2239
L2240:
L2229:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          sub       D0,	D1
          mov       [Dframe+-32],	D0
          mov       D1,	256
          cmp       D0,	D1
          jl        L2245
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4648
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	9
          push      D0
          call      [L3674]	!stop
L2245:
          mov       D0,	[Dframe+-32]
          mov       D1,	[Dframe+-16]
          lea       D2,	[mlib.readnextfileitem.str]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[mlib.readnextfileitem.str]
          mov       D2,	[Dframe+-32]
          mov       D3,	1
          add       D2,	D3
          mov       [D1+D2-1],	B0
          lea       D0,	[mlib.readnextfileitem.str]
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	1
L2213:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC NEXTCMDPARAM ============================================================
mlib.nextcmdparam::
L4649:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
;reenter
L2247:
          mov       D0,	0
          mov       D1,	[Dframe+32]
          mov       [D1],	D0
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          mov       D0,	[mlib.nextcmdparam.infile]
          cmp       D0,	0
          jz        L2248
          lea       D0,	[Dframe+-16]
          lea       D1,	[mlib.nextcmdparam.fileptr]
          push      D0
          push      D1
          call      mlib.readnextfileitem
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2249
          mov       D0,	[mlib.nextcmdparam.filestart]
          push      D0
          mov       D0,	`free*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       [mlib.nextcmdparam.infile],	D0
          jmp       L2247
L2249:
          jmp       L2250
L2248:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	[msysnew.nsysparams]
          cmp       D0,	D1
          jle       L2251
          mov       D0,	0
          add       Dstack,	40
          pop       Dframe
          retn      32
L2251:
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D0,	[D0*8+msysnew.sysparams-8]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          inc       word64 [D0]
          mov       D0,	[Dframe+-16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-40],	D0
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	64
          cmp       D0,	D1
          jnz       L2252
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.readfile
          mov       [mlib.nextcmdparam.fileptr],	D0
          mov       [mlib.nextcmdparam.filestart],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2253
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4650
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	7
          push      D0
          call      [L3674]	!stop
L2253:
          mov       D0,	1
          mov       [mlib.nextcmdparam.infile],	D0
          jmp       L2247
L2252:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	58
          cmp       D0,	D1
          jnz       L2254
          mov       D0,	1
          mov       [mlib.nextcmdparam.colonseen],	B0
          mov       D0,	4
          add       Dstack,	40
          pop       Dframe
          retn      32
L2254:
L2250:
          mov       D0,	0
          mov       D1,	[Dframe+32]
          mov       [D1],	D0
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	45
          cmp       D0,	D1
          jnz       L2255
          mov       D0,	[Dframe+-16]
          push      D0
          mov       B0,	[mlib.nextcmdparam.colonseen]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2256
          mov       D0,	0
          jmp       L2257
L2256:
          mov       D0,	1
L2257:
          pop       D1
          lea       D1,	[D1+D0]
          mov       D0,	[Dframe+24]
          mov       [D0],	D1
          mov       D0,	58
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          mov       D0,	`strchr*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jnz       L2258
          mov       D0,	61
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          mov       D0,	`strchr*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
L2258:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jz        L2259
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+32]
          mov       [D1],	D0
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       [D1],	B0
L2259:
          mov       B0,	[mlib.nextcmdparam.colonseen]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2260
          mov       D0,	5
          jmp       L2261
L2260:
          mov       D0,	1
L2261:
          add       Dstack,	40
          pop       Dframe
          retn      32
L2255:
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          call      mlib.extractext
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
          mov       D0,	[Dframe+-24]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2263
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          lea       D1,	[mlib.nextcmdparam.str]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+40]
          cmp       D0,	0
          jz        L2264
          mov       B0,	[mlib.nextcmdparam.colonseen]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L2264
          mov       D0,	[Dframe+40]
          lea       D1,	[mlib.nextcmdparam.str]
          push      D0
          push      D1
          call      mlib.addext
          mov       D1,	[Dframe+24]
          mov       [D1],	D0
L2264:
          jmp       L2262
L2263:
          mov       D0,	L4651
          mov       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      mlib.eqstring
          cmp       D0,	0
          jz        L2265
          mov       B0,	[mlib.nextcmdparam.colonseen]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2266
          mov       D0,	5
          jmp       L2267
L2266:
          mov       D0,	3
L2267:
          add       Dstack,	40
          pop       Dframe
          retn      32
L2265:
L2262:
          mov       B0,	[mlib.nextcmdparam.colonseen]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2268
          mov       D0,	5
          jmp       L2269
L2268:
          mov       D0,	2
L2269:
L2246:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      32
;PROC GS_PRINTLN ============================================================
mlib.gs_println::
L4652:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          mov       D2,	[Dframe+16]
          movsx     D2,	word32 [D2+8]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2271
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4653
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          jmp       L2272
L2271:
          mov       D0,	[Dframe+24]
          push      D0
          call      [L4339]	!print_startfile
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	0
          mov       D1,	L4653
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L2272:
L2270:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GS_PADTO ============================================================
mlib.gs_padto::
L4654:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	2576
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          movsx     D1,	word32 [D1+8]
          sub       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jg        L2274
          add       Dstack,	2576
          pop       Dframe
          retn      24
L2274:
L2275:
          mov       D0,	1
          mov       [Dframe+-2576],	D0
          mov       D0,	[Dframe+-8]
          cmp       D0,	1
          jl        L2278
L2276:
          mov       D0,	[Dframe+32]
          lea       D1,	[Dframe+-2568]
          mov       D2,	[Dframe+-2576]
          mov       [D1+D2-1],	B0
L2277:
          mov       D0,	[Dframe+-2576]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-2576],	D0
          mov       D1,	[Dframe+-8]
          cmp       D0,	D1
          jle       L2276
L2278:
          mov       D0,	0
          lea       D1,	[Dframe+-2568]
          mov       D2,	[Dframe+-8]
          mov       D3,	1
          add       D2,	D3
          mov       [D1+D2-1],	B0
          lea       D0,	[Dframe+-2568]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.gs_str
L2273:
;-------------------------------------------------
          add       Dstack,	2576
          pop       Dframe
          retn      24
;PROC GS_LEFTINT ============================================================
mlib.gs_leftint::
L4655:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          push      word64 [Dframe+40]
          push      word64 [Dframe+32]
          mov       D0,	0
          push      D0
          push      word64 [Dframe+24]
          call      msysnew.strint
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.gs_leftstr
L2279:
;-------------------------------------------------
          pop       Dframe
          retn      32
;PROC GS_LEFTSTR ============================================================
mlib.gs_leftstr::
L4656:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	2592
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+8]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-2592]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+24]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+-32]
          sub       D0,	D1
          mov       [Dframe+-24],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2281
L2282:
          mov       D0,	1
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-24]
          cmp       D0,	1
          jl        L2285
L2283:
          mov       D0,	[Dframe+40]
          lea       D1,	[Dframe+-2592]
          mov       D2,	[Dframe+-32]
          mov       D3,	[Dframe+-16]
          add       D2,	D3
          mov       [D1+D2-1],	B0
L2284:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D1,	[Dframe+-24]
          cmp       D0,	D1
          jle       L2283
L2285:
          mov       D0,	0
          lea       D1,	[Dframe+-2592]
          mov       D2,	[Dframe+-32]
          mov       D3,	[Dframe+-24]
          add       D2,	D3
          mov       D3,	1
          add       D2,	D3
          mov       [D1+D2-1],	B0
L2281:
          lea       D0,	[Dframe+-2592]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.gs_str
L2280:
;-------------------------------------------------
          add       Dstack,	2592
          pop       Dframe
          retn      32
;PROC GS_GETCOL ============================================================
mlib.gs_getcol::
L4657:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+8]
L2286:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GS_LINE ============================================================
mlib.gs_line::
L4658:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	-1
          mov       D1,	L4659
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.strbuffer_add
L2287:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GS_STRSP ============================================================
mlib.gs_strsp::
L4660:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	L4661
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.gs_str
L2288:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GS_STRLN ============================================================
mlib.gs_strln::
L4662:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.gs_str
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.gs_line
L2289:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GS_STRINT ============================================================
mlib.gs_strint::
L4663:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	-1
          mov       D1,	0
          push      D0
          push      D1
          push      word64 [Dframe+24]
          call      msysnew.strint
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.strbuffer_add
L2290:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GS_STRVAR ============================================================
mlib.gs_strvar::
L4664:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	-1
          mov       D1,	[Dframe+24]
          mov       D1,	[D1]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.strbuffer_add
L2291:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GS_STRN ============================================================
mlib.gs_strn::
L4665:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.strbuffer_add
L2292:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC GS_CHAR ============================================================
mlib.gs_char::
L4666:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-16]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-16]
          mov       D2,	2
          mov       [D1+D2-1],	B0
          mov       D0,	1
          lea       D1,	[Dframe+-16]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.strbuffer_add
L2293:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC GS_STR ============================================================
mlib.gs_str::
L4667:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	-1
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.strbuffer_add
L2294:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC GS_FREE ============================================================
mlib.gs_free::
L4668:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+12]
          cmp       D0,	0
          jz        L2296
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+12]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          push      D0
          push      D1
          call      mlib.pcm_free
L2296:
L2295:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC GS_INIT ============================================================
mlib.gs_init::
L4669:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	16
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.pcm_clearmem
L2297:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC STRBUFFER_ADD ============================================================
mlib.strbuffer_add::
L4670:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2299
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4671
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L2299:
          mov       D0,	[Dframe+32]
          mov       D1,	-1
          cmp       D0,	D1
          jnz       L2300
          mov       D0,	[Dframe+24]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+32],	D0
L2300:
          mov       D0,	[Dframe+16]
          movsx     D0,	word32 [D0+8]
          mov       [Dframe+-16],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2301
          mov       D0,	[Dframe+32]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[mlib.allocbytes]
          mov       D1,	[Dframe+16]
          mov       [D1+12],	A0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       [D1+8],	A0
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          mov       D2,	[Dframe+32]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          add       Dstack,	24
          pop       Dframe
          retn      24
L2301:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+16]
          movsx     D1,	word32 [D1+12]
          cmp       D0,	D1
          jle       L2302
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          mov       D2,	[Dframe+-24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[mlib.allocbytes]
          mov       D1,	[Dframe+16]
          mov       [D1+12],	A0
L2302:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          mov       D2,	[D2]
          mov       D3,	[Dframe+-16]
          lea       D2,	[D2+D3]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D1,	[D1]
          mov       D2,	[Dframe+-8]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          mov       [D1+8],	A0
L2298:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      24
;PROC PCM_SMALLALLOC ============================================================
mlib.pcm_smallalloc::
L4672:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          mov       [mlib.alloccode],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2304
          mov       D0,	1
          mov       [mlib.alloccode],	D0
L2304:
          mov       D0,	[mlib.alloccode]
          mov       D0,	[D0*8+mlib.allocupper]
          mov       [mlib.allocbytes],	D0
          mov       D0,	[mlib.pcheapptr]
          mov       [Dframe+-8],	D0
          lea       D0,	[mlib.pcheapptr]
          mov       D1,	[mlib.allocbytes]
          add       [D0],	D1
          mov       D0,	[mlib.pcheapptr]
          mov       D1,	[mlib.pcheapend]
          cmp       D0,	D1
          jb        L2305
          push      word64 [mlib.allocbytes]
          call      mlib.pcm_newblock
          mov       [Dframe+-8],	D0
          add       Dstack,	8
          pop       Dframe
          retn      8
L2305:
          mov       D0,	[Dframe+-8]
L2303:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC PCM_SMALLALLOCZ ============================================================
mlib.pcm_smallallocz::
L4673:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          mov       [mlib.alloccode],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2307
          mov       D0,	1
          mov       [mlib.alloccode],	D0
L2307:
          mov       D0,	[mlib.alloccode]
          mov       D0,	[D0*8+mlib.allocupper]
          mov       [mlib.allocbytes],	D0
          mov       D0,	[mlib.pcheapptr]
          mov       [Dframe+-8],	D0
          lea       D0,	[mlib.pcheapptr]
          mov       D1,	[mlib.allocbytes]
          add       [D0],	D1
          mov       D0,	[mlib.pcheapptr]
          mov       D1,	[mlib.pcheapend]
          cmp       D0,	D1
          jb        L2308
          push      word64 [mlib.allocbytes]
          call      mlib.pcm_newblock
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	0
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
          add       Dstack,	8
          pop       Dframe
          retn      8
L2308:
          mov       D0,	[Dframe+16]
          mov       D1,	0
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
L2306:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC MYEOF ============================================================
mlib.myeof::
L4674:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`fgetc*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-8],	D0
          mov       D1,	-1
          cmp       D0,	D1
          jnz       L2310
          mov       D0,	1
          add       Dstack,	8
          pop       Dframe
          retn      8
L2310:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          movsx     D1,	A1
          push      D0
          push      D1
          mov       D0,	`ungetc*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	0
L2309:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC OUTWORD64 ============================================================
mlib.outword64::
L4675:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          mov       D2,	8
          lea       D3,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fwrite*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2311:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC OUTWORD ============================================================
mlib.outword::
L4676:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          mov       D2,	4
          lea       D3,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fwrite*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2312:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC OUTWORD16 ============================================================
mlib.outword16::
L4677:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          mov       D2,	2
          lea       D3,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fwrite*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2313:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC OUTBYTE ============================================================
mlib.outbyte::
L4678:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          mov       D2,	1
          lea       D3,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fwrite*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2314:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC PCM_FREE32 ============================================================
mlib.pcm_free32::
L4679:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	32
          sub       [mlib.smallmemtotal],	D0
          mov       D0,	0
          cmp       D0,	0
          jz        L2316
          mov       D0,	32
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.removefrommemalloc
L2316:
          mov       D0,	2
          mov       D0,	[D0*8+mlib.freelist]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.freelist]
          mov       D2,	2
          mov       [D1+D2*8],	D0
L2315:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PCM_ALLOC32 ============================================================
mlib.pcm_alloc32::
L4680:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	32
          mov       [mlib.allocbytes],	D0
          mov       D0,	32
          push      D0
          call      mlib.pcm_alloc
L2317:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          ret       
;PROC CHECKFREELISTS ============================================================
mlib.checkfreelists::
L4681:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
L2319:
          mov       D0,	2
          mov       [Dframe+-32],	D0
L2320:
          mov       D0,	[Dframe+-32]
          mov       D0,	[D0*8+mlib.freelist]
          mov       [Dframe+-8],	D0
          jmp       L2324
L2323:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-24],	D0
          mov       D1,	4294967295
          cmp       D0,	D1
          jg        L2327
          mov       D0,	[Dframe+-24]
          mov       D1,	100
          cmp       D0,	D1
          jge       L2326
L2327:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	L4682
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-32]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
L2326:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0]
          mov       [Dframe+-8],	D0
L2324:
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L2323
L2325:
L2321:
          mov       D0,	[Dframe+-32]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-32],	D0
          cmp       D0,	2
          jle       L2320
L2322:
L2318:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      8
;PROC ZALLOCTABLE ============================================================
mlib.zalloctable::
L4683:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          push      word64 [Dframe+24]
          push      word64 [Dframe+16]
          call      mlib.alloctable
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+24]
          imul2     D0,	D1
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.pcm_clearmem
          mov       D0,	[Dframe+-8]
L2328:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC ALLOCTABLE ============================================================
mlib.alloctable::
L4684:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+24]
          imul2     D0,	D1
          push      D0
          mov       D0,	`malloc*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jnz       L2330
          mov       D0,	L4685
          push      D0
          call      mlib.abortprogram
L2330:
          mov       D0,	[Dframe+-8]
L2329:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC ADDEXT ============================================================
mlib.addext::
L4686:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	1
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.extractext
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2332
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.changeext
          add       Dstack,	8
          pop       Dframe
          retn      16
L2332:
          mov       D0,	[Dframe+16]
L2331:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC EXTRACTBASEFILE ============================================================
mlib.extractbasefile::
L4687:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.extractfile
          mov       [Dframe+-8],	D0
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-32],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2334
          mov       D0,	L4688
          add       Dstack,	32
          pop       Dframe
          retn      8
L2334:
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          call      mlib.extractext
          mov       [Dframe+-16],	D0
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jz        L2335
          mov       D0,	[Dframe+-32]
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          pop       D1
          sub       D1,	D0
          mov       D0,	1
          sub       D1,	D0
          mov       [Dframe+-24],	D1
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-8]
          lea       D2,	[mlib.extractbasefile.str]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[mlib.extractbasefile.str]
          mov       D2,	[Dframe+-24]
          mov       [D1+D2],	B0
          lea       D0,	[mlib.extractbasefile.str]
          add       Dstack,	32
          pop       Dframe
          retn      8
L2335:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-32]
          lea       D0,	[D0+D1]
          movzx     D0,	byte [D0-1]
          mov       D1,	46
          cmp       D0,	D1
          jnz       L2336
          mov       D0,	[Dframe+-32]
          mov       D1,	1
          sub       D0,	D1
          mov       D1,	[Dframe+-8]
          lea       D2,	[mlib.extractbasefile.str]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[mlib.extractbasefile.str]
          mov       D2,	[Dframe+-32]
          mov       D3,	1
          sub       D2,	D3
          mov       [D1+D2],	B0
          lea       D0,	[mlib.extractbasefile.str]
          add       Dstack,	32
          pop       Dframe
          retn      8
L2336:
          mov       D0,	[Dframe+-8]
L2333:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      8
;PROC EXTRACTFILE ============================================================
mlib.extractfile::
L4689:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.extractpath
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2338
          mov       D0,	[Dframe+16]
          add       Dstack,	8
          pop       Dframe
          retn      8
L2338:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          pop       D1
          lea       D1,	[D1+D0]
          mov       D0,	D1
L2337:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC EXTRACTPATH ============================================================
mlib.extractpath::
L4690:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          pop       D1
          lea       D1,	[D1+D0]
          mov       D0,	1
          sub       D1,	D0
          mov       [Dframe+-8],	D1
          jmp       L2341
L2340:
          mov       D0,	[Dframe+-8]
          movzx     D0,	byte [D0]
          sub       D0,	47
          cmp       D0,	46
          jae       L2345
          jmp       [D0*8+L2344]
          isegment  
L2344:
          dq        L2346
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2346
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2345
          dq        L2346
          csegment  
L2346:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          sub       D0,	D1
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D1,	[Dframe+16]
          lea       D2,	[mlib.extractpath.str]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[mlib.extractpath.str]
          mov       D2,	[Dframe+-16]
          mov       [D1+D2],	B0
          lea       D0,	[mlib.extractpath.str]
          add       Dstack,	16
          pop       Dframe
          retn      8
          jmp       L2343
L2345:
L2343:
          dec       word64 [Dframe+-8]
L2341:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+16]
          cmp       D0,	D1
          jae       L2340
L2342:
          mov       D0,	L4688
L2339:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC EXTRACTEXT ============================================================
mlib.extractext::
L4691:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.extractfile
          mov       [Dframe+-8],	D0
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2348
          mov       D0,	L4688
          add       Dstack,	16
          pop       Dframe
          retn      16
L2348:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-8]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          pop       D1
          lea       D1,	[D1+D0]
          mov       D0,	1
          sub       D1,	D0
          mov       [Dframe+-16],	D1
          jmp       L2350
L2349:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	46
          cmp       D0,	D1
          jnz       L2352
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0+1]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2353
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L2354
          mov       D0,	L4692
          jmp       L2355
L2354:
          mov       D0,	L4693
L2355:
          add       Dstack,	16
          pop       Dframe
          retn      16
L2353:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          add       Dstack,	16
          pop       Dframe
          retn      16
L2352:
          dec       word64 [Dframe+-16]
L2350:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          cmp       D0,	D1
          jae       L2349
L2351:
          mov       D0,	L4693
L2347:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC CHANGEEXT ============================================================
mlib.changeext::
L4694:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	48
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.changeext.newfile]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2358
          mov       D1,	46
          cmp       D0,	D1
          jz        L2359
          jmp       L2360
L2358:
          mov       D0,	0
          lea       D1,	[Dframe+-32]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-32]
          mov       D2,	2
          mov       [D1+D2-1],	B0
          jmp       L2357
L2359:
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-32]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L2357
L2360:
          mov       D0,	L4695
          lea       D1,	[Dframe+-32]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-32]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2357:
          mov       D0,	1
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.extractext
          mov       [Dframe+-40],	D0
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2362
          mov       D1,	46
          cmp       D0,	D1
          jz        L2363
          jmp       L2364
L2362:
          lea       D0,	[Dframe+-32]
          mov       D1,	1
          lea       D0,	[D0+D1-1]
          lea       D1,	[mlib.changeext.newfile]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L2361
L2363:
          lea       D0,	[Dframe+-32]
          mov       D1,	2
          lea       D0,	[D0+D1-1]
          lea       D1,	[mlib.changeext.newfile]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          push      D0
          push      D1
          mov       D0,	`strcat*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L2361
L2364:
          mov       D0,	[Dframe+-40]
          mov       D1,	[Dframe+16]
          sub       D0,	D1
          mov       D1,	2
          sub       D0,	D1
          mov       [Dframe+-48],	D0
          lea       D0,	[Dframe+-32]
          mov       D1,	1
          lea       D0,	[D0+D1-1]
          lea       D1,	[mlib.changeext.newfile]
          mov       D2,	1
          lea       D1,	[D1+D2-1]
          mov       D2,	[Dframe+-48]
          lea       D1,	[D1+D2]
          mov       D2,	1
          add       D1,	D2
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2361:
          lea       D0,	[mlib.changeext.newfile]
          mov       D1,	1
          lea       D0,	[D0+D1-1]
L2356:
;-------------------------------------------------
          add       Dstack,	48
          pop       Dframe
          retn      16
;PROC CONVUCSTRING ============================================================
mlib.convucstring::
L4696:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          jmp       L2367
L2366:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`toupper*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2367:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L2366
L2368:
L2365:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC CONVLCSTRING ============================================================
mlib.convlcstring::
L4697:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          jmp       L2371
L2370:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`tolower*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2371:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L2370
L2372:
L2369:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ICONVUCN ============================================================
mlib.iconvucn::
L4698:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2374:
          mov       D0,	[Dframe+24]
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2377
L2375:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`toupper*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2376:
          dec       word64 [Dframe+-8]
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L2375
L2377:
L2373:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC ICONVLCN ============================================================
mlib.iconvlcn::
L4699:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2379:
          mov       D0,	[Dframe+24]
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2382
L2380:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`tolower*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2381:
          dec       word64 [Dframe+-8]
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L2380
L2382:
L2378:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC READLINEN ============================================================
mlib.readlinen::
L4700:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	136
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2384
          call      oswindows.os_getstdin
          mov       [Dframe+16],	D0
L2384:
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2385
          mov       D0,	0
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+24]
          mov       [Dframe+-16],	D0
L2386:
          mov       D0,	`getchar*
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-8],	D0
          mov       D1,	13
          cmp       D0,	D1
          jz        L2389
          mov       D0,	[Dframe+-8]
          mov       D1,	10
          cmp       D0,	D1
          jz        L2389
          mov       D0,	[Dframe+-8]
          mov       D1,	-1
          cmp       D0,	D1
          jnz       L2388
L2389:
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          mov       [D1],	B0
          add       Dstack,	136
          pop       Dframe
          retn      24
L2388:
          mov       D0,	[Dframe+-8]
          lea       D1,	[Dframe+-16]
          mov       D2,	[D1]
          inc       word64 [D1]
          mov       [D2],	B0
          inc       word64 [Dframe+-24]
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+32]
          mov       D2,	2
          sub       D1,	D2
          cmp       D0,	D1
          jl        L2390
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          mov       [D1],	B0
          add       Dstack,	136
          pop       Dframe
          retn      24
L2390:
          jmp       L2386
L2387:
L2385:
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+32]
          mov       D2,	2
          sub       D1,	D2
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fgets*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2391
          add       Dstack,	136
          pop       Dframe
          retn      24
L2391:
          mov       D0,	[Dframe+24]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-24],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2392
          add       Dstack,	136
          pop       Dframe
          retn      24
L2392:
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+-24]
          lea       D0,	[D0+D1]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D0,	0
          mov       [Dframe+-136],	B0
          jmp       L2394
L2393:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	13
          cmp       D0,	D1
          jz        L2397
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	10
          cmp       D0,	D1
          jnz       L2396
L2397:
          mov       D0,	1
          mov       [Dframe+-136],	B0
L2396:
          mov       D0,	0
          lea       D1,	[Dframe+-16]
          mov       D2,	[D1]
          dec       word64 [D1]
          mov       [D2],	B0
L2394:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jb        L2398
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	13
          cmp       D0,	D1
          jz        L2393
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	10
          cmp       D0,	D1
          jz        L2393
L2398:
L2395:
          mov       B0,	[Dframe+-136]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L2399
          mov       D0,	[Dframe+-24]
          mov       D1,	4
          add       D0,	D1
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jle       L2399
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+32]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[Dframe+-24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4701
          push      D0
          call      mlib.abortprogram
L2399:
L2383:
;-------------------------------------------------
          add       Dstack,	136
          pop       Dframe
          retn      24
;PROC CHECKFILE ============================================================
mlib.checkfile::
L4702:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	L4703
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`fopen*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jz        L2401
          mov       D0,	[Dframe+-8]
          push      D0
          mov       D0,	`fclose*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	1
          add       Dstack,	8
          pop       Dframe
          retn      8
L2401:
          mov       D0,	0
L2400:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC WRITEFILE ============================================================
mlib.writefile::
L4704:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	L4705
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`fopen*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2403
          mov       D0,	0
          add       Dstack,	16
          pop       Dframe
          retn      24
L2403:
          push      word64 [Dframe+32]
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      mlib.writerandom
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+-8]
          push      D0
          mov       D0,	`fclose*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-16]
L2402:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      24
;PROC READFILE ============================================================
mlib.readfile::
L4706:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	L4707
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`fopen*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2405
          mov       D0,	0
          add       Dstack,	32
          pop       Dframe
          retn      8
L2405:
          mov       D0,	[Dframe+-8]
          push      D0
          call      mlib.getfilesize
          mov       [Dframe+-16],	D0
          mov       [mlib.rfsize],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	4
          add       D0,	D1
          push      D0
          mov       D0,	`malloc*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-24],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2406
          mov       D0,	0
          add       Dstack,	32
          pop       Dframe
          retn      8
L2406:
          push      word64 [Dframe+-16]
          mov       D0,	0
          mov       D1,	[Dframe+-24]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          call      mlib.readrandom
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          lea       D0,	[D0+D1]
          mov       [Dframe+-32],	D0
          mov       D0,	0
          mov       D1,	[Dframe+-32]
          mov       [D1],	B0
          mov       D0,	26
          mov       D1,	[Dframe+-32]
          mov       [D1+1],	B0
          mov       D0,	0
          mov       D1,	[Dframe+-32]
          mov       [D1+2],	B0
          mov       D0,	[Dframe+-8]
          push      D0
          mov       D0,	`fclose*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-24]
L2404:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      8
;PROC GETFILEPOS ============================================================
mlib.getfilepos::
L4708:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`ftell*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
L2407:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC SETFILEPOS ============================================================
mlib.setfilepos::
L4709:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+24]
          movsx     D1,	A1
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fseek*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          movsx     D0,	A0
L2408:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC WRITERANDOM ============================================================
mlib.writerandom::
L4710:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+32]
          movsx     D1,	A1
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fseek*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+40]
          mov       D2,	1
          mov       D3,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fwrite*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2409:
;-------------------------------------------------
          pop       Dframe
          retn      32
;PROC READRANDOM ============================================================
mlib.readrandom::
L4711:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	0
          mov       D1,	[Dframe+32]
          movsx     D1,	A1
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fseek*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+40]
          mov       D2,	1
          mov       D3,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fread*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
L2410:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      32
;PROC GETFILESIZE ============================================================
mlib.getfilesize::
L4712:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`ftell*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-8],	A0
          mov       D0,	2
          mov       D1,	0
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fseek*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`ftell*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       [Dframe+-16],	A0
          mov       D0,	0
          mov       A1,	[Dframe+-8]
          movsx     D1,	A1
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fseek*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       A0,	[Dframe+-16]
          movzx     D0,	A0
L2411:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC ABORTPROGRAM ============================================================
mlib.abortprogram::
L4713:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4714
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3650]	!print_end
          call      oswindows.os_getch
          mov       D0,	5
          push      D0
          call      [L3674]	!stop
L2412:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC REALLOCMEM ============================================================
mlib.reallocmem::
L4715:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`realloc*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       [Dframe+16],	D0
          cmp       D0,	0
          jz        L2414
          mov       D0,	[Dframe+16]
          pop       Dframe
          retn      16
L2414:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4716
          push      D0
          call      mlib.abortprogram
          mov       D0,	0
L2413:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC ALLOCMEM ============================================================
mlib.allocmem::
L4717:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`malloc*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jz        L2416
          mov       D0,	[Dframe+-8]
          add       Dstack,	8
          pop       Dframe
          retn      8
L2416:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	[mlib.memtotal]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4718
          push      D0
          call      mlib.abortprogram
          mov       D0,	0
L2415:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC REMOVEFROMMEMALLOC ============================================================
mlib.removefrommemalloc:
L4719:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2418:
          mov       D0,	1
          mov       [Dframe+-8],	D0
L2419:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0*8+mlib.memalloctable-8]
          mov       D1,	[Dframe+16]
          cmp       D0,	D1
          jnz       L2422
          mov       D0,	[Dframe+-8]
          movsx     D0,	word32 [D0*4+mlib.memallocsize-4]
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jz        L2423
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4720
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          mov       D0,	0
          mov       D1,	L4721
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          mov       D0,	0
          mov       D1,	L4722
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          movsx     D1,	word32 [D1*4+mlib.memallocsize-4]
          movsx     D1,	A1
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4723
          push      D0
          call      mlib.abortprogram
L2423:
          mov       D0,	0
          lea       D1,	[mlib.memalloctable]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2*8-8],	D0
          add       Dstack,	8
          pop       Dframe
          retn      16
L2422:
L2420:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          cmp       D0,	500000
          jle       L2419
L2421:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4724
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          mov       D0,	0
          mov       D1,	L4725
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+24]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	L4726
          push      D0
          call      mlib.abortprogram
          mov       D0,	4
          push      D0
          call      [L3674]	!stop
L2417:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC ADDTOMEMALLOC ============================================================
mlib.addtomemalloc:
L4727:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2425:
          mov       D0,	1
          mov       [Dframe+-8],	D0
L2426:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0*8+mlib.memalloctable-8]
          mov       D1,	[Dframe+16]
          cmp       D0,	D1
          jnz       L2429
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4728
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L4045]	!print_ptr
          mov       D0,	0
          mov       D1,	L4729
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      [L3646]	!print_startcon
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	2
          push      D0
          call      [L3674]	!stop
L2429:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0*8+mlib.memalloctable-8]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2430
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.memalloctable]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2*8-8],	D0
          mov       D0,	[Dframe+24]
          lea       D1,	[mlib.memallocsize]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2*4-4],	A0
          add       Dstack,	8
          pop       Dframe
          retn      16
L2430:
L2427:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          cmp       D0,	500000
          jle       L2426
L2428:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4730
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          call      oswindows.os_getch
          mov       D0,	3
          push      D0
          call      [L3674]	!stop
L2424:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC PCM_COPYHEAPBLOCK ============================================================
mlib.pcm_copyheapblock::
L4731:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2432
          mov       D0,	0
          add       Dstack,	8
          pop       Dframe
          retn      16
L2432:
          push      word64 [Dframe+24]
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
L2431:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC PCM_COPYHEAPSTRINGN ============================================================
mlib.pcm_copyheapstringn::
L4732:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2434
          mov       D0,	0
          add       Dstack,	8
          pop       Dframe
          retn      16
L2434:
          mov       D0,	[Dframe+24]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D2,	[Dframe+24]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	[Dframe+-8]
L2433:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC PCM_COPYHEAPSTRING ============================================================
mlib.pcm_copyheapstring::
L4733:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2436
          mov       D0,	0
          add       Dstack,	16
          pop       Dframe
          retn      8
L2436:
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          push      word64 [Dframe+-16]
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
L2435:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC PCM_ALLOCZ ============================================================
mlib.pcm_allocz::
L4734:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          push      word64 [Dframe+16]
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	0
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
L2437:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC PCM_DIAGS ============================================================
mlib.pcm_diags::
L4735:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4736
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	16
          mov       [Dframe+-8],	D0
L2439:
          mov       D0,	1
          mov       [Dframe+-16],	D0
L2440:
          mov       D0,	[Dframe+-16]
          mov       D0,	[D0*8+mlib.freelist]
          push      D0
          push      word64 [Dframe+-8]
          call      mlib.pcm_printfreelist
          shl       word64 [Dframe+-8],	1
L2441:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-16],	D0
          cmp       D0,	8
          jle       L2440
L2442:
L2438:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC PCM_PRINTFREELIST ============================================================
mlib.pcm_printfreelist::
L4737:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4738
          push      D0
          push      D1
          call      [L3647]	!print_str
          mov       D0,	0
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      [L3658]	!print_i64
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          jmp       L2445
L2444:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4739
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3660]	!print_nogap
          mov       D0,	L4740
          push      D0
          mov       D0,	[Dframe+24]
          push      D0
          call      [L4045]	!print_ptr
          call      [L3650]	!print_end
          mov       D0,	[Dframe+24]
          mov       D0,	[D0]
          mov       [Dframe+24],	D0
L2445:
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jnz       L2444
L2446:
          mov       D0,	L4741
          push      D0
          mov       D0,	`puts*
          pop       D10
          call      [L3654]	!callff_4
L2443:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC PCM_ARRAY ============================================================
mlib.pcm_array::
L4742:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	2048
          cmp       D0,	D1
          jg        L2448
          push      word64 [Dframe+16]
          call      mlib.pcm_round
          jmp       L2449
L2448:
          mov       D0,	2048
          mov       [Dframe+-8],	D0
          jmp       L2451
L2450:
          shl       word64 [Dframe+-8],	1
L2451:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          cmp       D0,	D1
          jg        L2450
L2452:
          mov       D0,	[Dframe+-8]
L2449:
L2447:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC PCM_ROUND ============================================================
mlib.pcm_round::
L4743:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	2048
          cmp       D0,	D1
          jle       L2454
          mov       D0,	[Dframe+16]
          jmp       L2455
L2454:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          movsx     D0,	word32 [D0*4+mlib.pcm_round.allocbytes]
L2455:
L2453:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PCM_NEWBLOCK ============================================================
mlib.pcm_newblock::
L4744:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	2097152
          add       [mlib.pcm_newblock.totalheapsize],	D0
          mov       D0,	0
          mov       [mlib.alloccode],	D0
          mov       D0,	2097152
          push      D0
          call      mlib.allocmem
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2457
          mov       D0,	L4745
          push      D0
          call      mlib.abortprogram
L2457:
          mov       D0,	[Dframe+-8]
          mov       [mlib.pcheapptr],	D0
          mov       D0,	[Dframe+-8]
          mov       D1,	2097152
          add       D0,	D1
          mov       [mlib.pcheapend],	D0
          mov       D0,	[mlib.pcheapstart]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2458
          mov       D0,	[Dframe+-8]
          mov       [mlib.pcheapstart],	D0
L2458:
          lea       D0,	[mlib.pcheapptr]
          mov       D1,	[Dframe+16]
          add       [D0],	D1
          mov       D0,	[Dframe+-8]
L2456:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC PCM_GETAC ============================================================
mlib.pcm_getac::
L4746:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	2048
          cmp       D0,	D1
          jg        L2460
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          pop       Dframe
          retn      8
L2460:
          mov       D0,	[Dframe+16]
          mov       D1,	255
          add       D0,	D1
          sar       D0,	8
          mov       [Dframe+16],	D0
          mov       D1,	2048
          cmp       D0,	D1
          jg        L2461
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          mov       D1,	8
          add       D0,	D1
          pop       Dframe
          retn      8
L2461:
          mov       D0,	[Dframe+16]
          mov       D1,	63
          add       D0,	D1
          sar       D0,	6
          mov       [Dframe+16],	D0
          mov       D1,	2048
          cmp       D0,	D1
          jg        L2462
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          mov       D1,	14
          add       D0,	D1
          pop       Dframe
          retn      8
L2462:
          mov       D0,	[Dframe+16]
          mov       D1,	2048
          sub       D0,	D1
          mov       D1,	2047
          add       D0,	D1
          sar       D0,	11
          mov       D1,	22
          add       D0,	D1
          mov       [Dframe+16],	D0
L2459:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PCM_INIT ============================================================
mlib.pcm_init::
L4747:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          mov       B0,	[mlib.pcm_setup]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2464
          add       Dstack,	56
          pop       Dframe
          ret       
L2464:
          mov       D0,	0
          push      D0
          call      mlib.pcm_newblock
L2465:
          mov       D0,	1
          mov       [Dframe+-56],	D0
L2466:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	16
          mov       [Dframe+-16],	D0
          jmp       L2470
L2469:
          mov       D0,	[Dframe+-16]
          shl       D0,	1
          mov       [Dframe+-16],	D0
          inc       word64 [Dframe+-8]
L2470:
          mov       D0,	[Dframe+-56]
          mov       D1,	[Dframe+-16]
          cmp       D0,	D1
          jg        L2469
L2471:
          mov       D0,	[Dframe+-8]
          lea       D1,	[mlib.sizeindextable]
          mov       D2,	[Dframe+-56]
          mov       [D1+D2],	B0
L2467:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          cmp       D0,	2048
          jle       L2466
L2468:
          mov       D0,	16
          lea       D1,	[mlib.allocupper]
          mov       D2,	1
          mov       [D1+D2*8],	D0
          mov       D0,	16
          mov       [Dframe+-40],	D0
L2472:
          mov       D0,	2
          mov       [Dframe+-56],	D0
L2473:
          lea       D0,	[Dframe+-40]
          mov       D1,	2
          imul2     D1,	[D0]
          mov       [D0],	D1
          mov       D0,	[Dframe+-40]
          lea       D1,	[mlib.allocupper]
          mov       D2,	[Dframe+-56]
          mov       [D1+D2*8],	D0
          mov       D0,	[Dframe+-40]
          mov       D1,	33554432
          cmp       D0,	D1
          jl        L2476
          mov       D0,	[Dframe+-56]
          mov       [Dframe+-16],	D0
          jmp       L2475
L2476:
L2474:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          cmp       D0,	27
          jle       L2473
L2475:
L2477:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          mov       D0,	300
          mov       [Dframe+-48],	D0
          mov       D0,	[Dframe+-56]
          mov       D1,	[Dframe+-48]
          cmp       D0,	D1
          jg        L2480
L2478:
          mov       D0,	33554432
          add       [Dframe+-40],	D0
          mov       D0,	[Dframe+-40]
          mov       D1,	8589934592
          cmp       D0,	D1
          jge       L2481
          mov       D0,	[Dframe+-40]
          lea       D1,	[mlib.allocupper]
          mov       D2,	[Dframe+-56]
          mov       [D1+D2*8],	D0
          mov       D0,	[Dframe+-40]
          mov       [mlib.maxmemory],	D0
          jmp       L2482
L2481:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          sub       D0,	D1
          mov       [mlib.maxalloccode],	D0
          jmp       L2480
L2482:
L2479:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          mov       D1,	[Dframe+-48]
          cmp       D0,	D1
          jle       L2478
L2480:
          mov       D0,	1
          mov       [mlib.pcm_setup],	B0
L2463:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          ret       
;PROC PCM_CLEARMEM ============================================================
mlib.pcm_clearmem::
L4748:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memset*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
L2483:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC PCM_COPYMEM4 ============================================================
mlib.pcm_copymem4::
L4749:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
L2484:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC PCM_FREEAC ============================================================
mlib.pcm_freeac::
L4750:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D0,	[D0*8+mlib.allocupper]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.pcm_free
L2485:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC PCM_FREE ============================================================
mlib.pcm_free::
L4751:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2487
          add       Dstack,	8
          pop       Dframe
          retn      16
L2487:
          mov       D0,	[Dframe+24]
          mov       D1,	2048
          cmp       D0,	D1
          jle       L2488
          mov       D0,	0
          cmp       D0,	0
          jz        L2489
          push      word64 [Dframe+24]
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.removefrommemalloc
L2489:
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`free*
          pop       D10
          call      [L3654]	!callff_4
          add       Dstack,	8
          pop       Dframe
          retn      16
L2488:
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L2490
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          mov       [Dframe+-8],	D0
          mov       D0,	[D0*8+mlib.allocupper]
          sub       [mlib.smallmemtotal],	D0
          mov       D0,	0
          cmp       D0,	0
          jz        L2491
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0*8+mlib.allocupper]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.removefrommemalloc
L2491:
          mov       D0,	[Dframe+-8]
          mov       D0,	[D0*8+mlib.freelist]
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[Dframe+16]
          lea       D1,	[mlib.freelist]
          mov       D2,	[Dframe+-8]
          mov       [D1+D2*8],	D0
L2490:
L2486:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC PCM_FREESTR ============================================================
mlib.pcm_freestr::
L4752:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      mlib.pcm_free
L2492:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PCM_ALLOC ============================================================
mlib.pcm_alloc::
L4753:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       B0,	[mlib.pcm_setup]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L2494
          call      mlib.pcm_init
L2494:
          mov       D0,	[Dframe+16]
          mov       D1,	2048
          cmp       D0,	D1
          jle       L2495
          push      word64 [Dframe+16]
          call      mlib.pcm_getac
          mov       [mlib.alloccode],	D0
          mov       D0,	[D0*8+mlib.allocupper]
          mov       [mlib.allocbytes],	D0
          push      word64 [mlib.allocbytes]
          call      mlib.allocmem
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jnz       L2496
          mov       D0,	L4754
          push      D0
          call      mlib.abortprogram
L2496:
          mov       D0,	0
          cmp       D0,	0
          jz        L2497
          push      word64 [mlib.allocbytes]
          mov       D0,	[Dframe+-8]
          push      D0
          call      mlib.addtomemalloc
L2497:
          mov       D0,	[Dframe+-8]
          add       Dstack,	8
          pop       Dframe
          retn      8
L2495:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0+mlib.sizeindextable]
          mov       [mlib.alloccode],	D0
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2498
          mov       D0,	1
          mov       [mlib.alloccode],	D0
L2498:
          mov       D0,	[mlib.alloccode]
          mov       D0,	[D0*8+mlib.allocupper]
          mov       [mlib.allocbytes],	D0
          add       [mlib.smallmemtotal],	D0
          mov       D0,	[mlib.alloccode]
          mov       D0,	[D0*8+mlib.freelist]
          mov       [Dframe+-8],	D0
          cmp       D0,	0
          jz        L2499
          mov       D0,	0
          cmp       D0,	0
          jz        L2500
          push      word64 [mlib.allocbytes]
          mov       D0,	[Dframe+-8]
          push      D0
          call      mlib.addtomemalloc
L2500:
          mov       D0,	[mlib.alloccode]
          mov       D0,	[D0*8+mlib.freelist]
          mov       D0,	[D0]
          lea       D1,	[mlib.freelist]
          mov       D2,	[mlib.alloccode]
          mov       [D1+D2*8],	D0
          mov       D0,	[Dframe+-8]
          add       Dstack,	8
          pop       Dframe
          retn      8
L2499:
          mov       D0,	[mlib.pcheapptr]
          mov       [Dframe+-8],	D0
          lea       D0,	[mlib.pcheapptr]
          mov       D1,	[mlib.allocbytes]
          add       [D0],	D1
          mov       D0,	[mlib.pcheapptr]
          mov       D1,	[mlib.pcheapend]
          cmp       D0,	D1
          jb        L2501
          push      word64 [mlib.allocbytes]
          call      mlib.pcm_newblock
          mov       [Dframe+-8],	D0
          add       Dstack,	8
          pop       Dframe
          retn      8
L2501:
          mov       D0,	0
          cmp       D0,	0
          jz        L2502
          push      word64 [mlib.allocbytes]
          mov       D0,	[Dframe+-8]
          push      D0
          call      mlib.addtomemalloc
L2502:
          mov       D0,	[Dframe+-8]
L2493:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC M$ROUND ============================================================
msysnew.m$round::
L4755:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	L4756
          push      D0
          call      mlib.abortprogram
          movq      XMM0,	[L4757]
L2503:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$FRACT ============================================================
msysnew.m$fract::
L4758:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	L4759
          push      D0
          call      mlib.abortprogram
          movq      XMM0,	[L4760]
L2504:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$CEIL ============================================================
msysnew.m$ceil::
L4761:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`ceil*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2505:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$FLOOR ============================================================
msysnew.m$floor::
L4762:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`floor*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2506:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$EXP ============================================================
msysnew.m$exp::
L4763:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`exp*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2507:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$LOG ============================================================
msysnew.m$log::
L4764:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`log10*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2508:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$LN ============================================================
msysnew.m$ln::
L4765:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`log*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2509:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$ATAN ============================================================
msysnew.m$atan::
L4766:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`atan*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2510:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$ACOS ============================================================
msysnew.m$acos::
L4767:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`acos*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2511:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$ASIN ============================================================
msysnew.m$asin::
L4768:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`asin*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2512:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$TAN ============================================================
msysnew.m$tan::
L4769:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`tan*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2513:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$COS ============================================================
msysnew.m$cos::
L4770:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`cos*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2514:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$SIN ============================================================
msysnew.m$sin::
L4771:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          movq      XMM0,	[Dframe+16]
          movq      D13,	XMM0
          push      D13
          mov       D0,	`sin*
          movq      XMM0,	[Dstack]
          add       Dstack,	8
          call      [L3654]	!callff_4
L2515:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$POPDOTSLICE ============================================================
msysnew.m$popdotslice::
L4772:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D3,	[Dframe+32]
          mov       D4,	[Dframe+40]
          mov       D5,	[Dframe+24]
          mov       D10,	D5
          shl       D4,	B10
          mov       D10,	[Dframe+16]
          sub       D10,	D5
          inc       D10
          mov       D2,	-1
          shl       D2,	B10
          not       D2
          mov       D10,	D5
          shl       D2,	B10
          and       D4,	D2
          mov       D0,	[D3]
          not       D2
          and       D0,	D2
          or        D0,	D4
          mov       [D3],	D0
L2516:
;-------------------------------------------------
          pop       Dframe
          retn      32
;PROC M$POPDOTINDEX ============================================================
msysnew.m$popdotindex::
L4773:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D3,	[Dframe+24]
          mov       B10,	[Dframe+16]
          mov       D0,	[D3]
          mov       D1,	1
          shl       D1,	B10
          not       D1
          and       D0,	D1
          mov       D1,	[Dframe+32]
          and       D1,	1
          shl       D1,	B10
          or        D0,	D1
          mov       [D3],	D0
L2517:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC M$DOTSLICE ============================================================
msysnew.m$dotslice::
L4774:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          mov       D10,	[Dframe+24]
          shr       D0,	B10
          sub       D10,	[Dframe+16]
          neg       D10
          mov       D2,	-2
          shl       D2,	B10
          not       D2
          and       D0,	D2
L2518:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC M$DOTINDEX ============================================================
msysnew.m$dotindex::
L4775:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       B10,	[Dframe+16]
          shr       D0,	B10
          and       D0,	1
L2519:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC M$IDIV_I128 ============================================================
msysnew.m$idiv_i128::
L4776:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D2,	[Dframe+32]
          mov       D3,	[Dframe+32+8]
          mov       D4,	[Dframe+16]
          or        D4,	D4
          jz        L2521
          mov       D0,	D3
          xor       D11,	D11
          div       D4
          mov       D6,	D0
          mul       D4
          sub       D3,	D0
          mov       D0,	D2
          mov       D11,	D3
          div       D4
          mov       D1,	D6
          pop       Dframe
          retn      32
;divbyzero
L2521:
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4777
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	1
          push      D0
          call      [L3674]	!stop
L2520:
;-------------------------------------------------
          pop       Dframe
          retn      32
;PROC M$MUL_I128 ============================================================
msysnew.m$mul_i128::
L4778:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D2,	[Dframe+32]
          mov       D3,	[Dframe+32+8]
          mov       D4,	[Dframe+16]
          mov       D5,	[Dframe+16+8]
          mov       D0,	D2
          imul2     D0,	D5
          mov       D6,	D0
          mov       D0,	D3
          imul2     D0,	D4
          mov       D7,	D0
          mov       D0,	D2
          mul       D4
          add       D11,	D6
          add       D11,	D7
          mov       D1,	D11
L2522:
;-------------------------------------------------
          pop       Dframe
          retn      32
;PROC M$INTOVERFLOW ============================================================
msysnew.m$intoverflow::
L4779:
;-------------------------------------------------
          mov       D0,	L4780
          push      D0
          call      mlib.abortprogram
L2523:
;-------------------------------------------------
          ret       
;PROC M$POWER_I64 ============================================================
msysnew.m$power_i64::
L4781:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jge       L2526
          mov       D0,	0
          jmp       L2525
L2526:
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2527
          mov       D0,	1
          jmp       L2525
L2527:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          cmp       D0,	D1
          jnz       L2528
          mov       D0,	[Dframe+24]
          jmp       L2525
L2528:
          mov       D0,	[Dframe+16]
          mov       D1,	1
          and       D0,	D1
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2529
          mov       D0,	[Dframe+24]
          imul2     D0,	D0
          mov       D1,	[Dframe+16]
          sar       D1,	1
          push      D0
          push      D1
          call      msysnew.m$power_i64
          jmp       L2525
L2529:
          mov       D0,	[Dframe+24]
          imul2     D0,	D0
          mov       D1,	[Dframe+16]
          mov       D2,	1
          sub       D1,	D2
          sar       D1,	1
          push      D0
          push      D1
          call      msysnew.m$power_i64
          mov       D1,	[Dframe+24]
          imul2     D0,	D1
L2525:
L2524:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC M$UFLOAT_R32U64 ============================================================
msysnew.m$ufloat_r32u64::
L4782:
;-------------------------------------------------
          cmp       D10,	0
          jl        L2531
          cvtsi2ss  XMM15,	D10
          ret       
;fl2
L2531:
          and       D10,	[msysnew.mask63]
          cvtsi2ss  XMM15,	D10
          addss     XMM15,	[msysnew.offset32]
          ret       
L2530:
;-------------------------------------------------
          ret       
;PROC M$UFLOAT_R32U32 ============================================================
msysnew.m$ufloat_r32u32::
L4783:
;-------------------------------------------------
          mov       D10,	D10
          cvtsi2ss  XMM15,	D10
          ret       
L2532:
;-------------------------------------------------
          ret       
;PROC M$UFLOAT_R64U32 ============================================================
msysnew.m$ufloat_r64u32::
L4784:
;-------------------------------------------------
          mov       D10,	D10
          cvtsi2sd  XMM15,	D10
          ret       
L2533:
;-------------------------------------------------
          ret       
;PROC M$UFLOAT_R64U64 ============================================================
msysnew.m$ufloat_r64u64::
L4785:
;-------------------------------------------------
          cmp       D10,	0
          jl        L2535
          cvtsi2sd  XMM15,	D10
          ret       
;fl1
L2535:
          and       D10,	[msysnew.mask63]
          cvtsi2sd  XMM15,	D10
          addsd     XMM15,	[msysnew.offset64]
          ret       
L2534:
;-------------------------------------------------
          ret       
;PROC CONVUCSTRING ============================================================
msysnew.convucstring:
L4786:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          jmp       L2538
L2537:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`toupper*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2538:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L2537
L2539:
L2536:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC CONVLCSTRING ============================================================
msysnew.convlcstring:
L4787:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          jmp       L2542
L2541:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`tolower*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2542:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L2541
L2543:
L2540:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC ICONVUCN ============================================================
msysnew.iconvucn:
L4788:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2545:
          mov       D0,	[Dframe+24]
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2548
L2546:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`toupper*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2547:
          dec       word64 [Dframe+-8]
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L2546
L2548:
L2544:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC ICONVLCN ============================================================
msysnew.iconvlcn:
L4789:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
L2550:
          mov       D0,	[Dframe+24]
          mov       [Dframe+-8],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2553
L2551:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`tolower*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          inc       word64 [Dframe+16]
L2552:
          dec       word64 [Dframe+-8]
          mov       D0,	[Dframe+-8]
          cmp       D0,	0
          jnz       L2551
L2553:
L2549:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC VALREAL ============================================================
msysnew.valreal::
L4790:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          call      msysnew.initreadbuffer
          mov       D0,	[msysnew.rd_pos]
          mov       [Dframe+-8],	D0
          mov       D0,	[msysnew.rd_lastpos]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	0
          push      D0
          call      msysnew.m$read_r64
          movq      [Dframe+-24],	XMM0
          mov       D0,	[Dframe+-8]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	[Dframe+-16]
          mov       [msysnew.rd_lastpos],	D0
          movq      XMM0,	[Dframe+-24]
L2554:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      8
;PROC VALINT ============================================================
msysnew.valint::
L4791:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          call      msysnew.initreadbuffer
          mov       D0,	[msysnew.rd_pos]
          mov       [Dframe+-8],	D0
          mov       D0,	[msysnew.rd_lastpos]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          mov       [msysnew.rd_pos],	D0
          push      word64 [Dframe+24]
          call      msysnew.m$read_i64
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-8]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	[Dframe+-16]
          mov       [msysnew.rd_lastpos],	D0
          mov       D0,	[Dframe+-24]
L2555:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      16
;PROC REREAD ============================================================
msysnew.reread::
L4792:
;-------------------------------------------------
          mov       D0,	[msysnew.rd_lastpos]
          mov       [msysnew.rd_pos],	D0
L2556:
;-------------------------------------------------
          ret       
;PROC REREADLN ============================================================
msysnew.rereadln::
L4793:
;-------------------------------------------------
          mov       D0,	[msysnew.rd_buffer]
          mov       [msysnew.rd_pos],	D0
          mov       [msysnew.rd_lastpos],	D0
L2557:
;-------------------------------------------------
          ret       
;PROC READSTR ============================================================
msysnew.readstr::
L4794:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          push      word64 [Dframe+24]
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+16]
          push      D0
          call      msysnew.m$read_strold
L2558:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC M$READ_STR ============================================================
msysnew.m$read_str::
L4795:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	0
          mov       [msysnew.itemerror],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	76
          cmp       D0,	D1
          jz        L2561
          mov       D0,	[Dframe+16]
          mov       D1,	108
          cmp       D0,	D1
          jnz       L2560
L2561:
          mov       D0,	[msysnew.rd_pos]
          mov       [Dframe+-16],	D0
          mov       D0,	[msysnew.rd_buffer]
          mov       D1,	[msysnew.rd_length]
          lea       D0,	[D0+D1]
          mov       D1,	[msysnew.rd_pos]
          sub       D0,	D1
          mov       [Dframe+-24],	D0
          jmp       L2562
L2560:
          lea       D0,	[Dframe+-24]
          push      D0
          call      msysnew.readitem
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	78
          cmp       D0,	D1
          jz        L2564
          mov       D0,	[Dframe+16]
          mov       D1,	110
          cmp       D0,	D1
          jnz       L2563
L2564:
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+-16]
          push      D0
          call      msysnew.iconvlcn
L2563:
L2562:
          mov       D0,	[Dframe+-24]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D2,	[Dframe+-24]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	[Dframe+-8]
L2559:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      8
;PROC M$READ_STROLD ============================================================
msysnew.m$read_strold::
L4796:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	0
          mov       [msysnew.itemerror],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	76
          cmp       D0,	D1
          jz        L2567
          mov       D0,	[Dframe+32]
          mov       D1,	108
          cmp       D0,	D1
          jnz       L2566
L2567:
          mov       D0,	[msysnew.rd_pos]
          mov       [Dframe+-8],	D0
          mov       D0,	[msysnew.rd_buffer]
          mov       D1,	[msysnew.rd_length]
          lea       D0,	[D0+D1]
          mov       D1,	[msysnew.rd_pos]
          sub       D0,	D1
          mov       [Dframe+-16],	D0
          jmp       L2568
L2566:
          lea       D0,	[Dframe+-16]
          push      D0
          call      msysnew.readitem
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	78
          cmp       D0,	D1
          jz        L2570
          mov       D0,	[Dframe+32]
          mov       D1,	110
          cmp       D0,	D1
          jnz       L2569
L2570:
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+-8]
          push      D0
          call      msysnew.iconvlcn
L2569:
L2568:
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jle       L2571
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+24]
          cmp       D0,	D1
          jl        L2572
          mov       D0,	[Dframe+24]
          mov       D1,	1
          sub       D0,	D1
          mov       [Dframe+-16],	D0
          mov       D0,	1
          mov       [msysnew.itemerror],	D0
L2572:
L2571:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-8]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-16]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
L2565:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      24
;PROC M$READ_R64 ============================================================
msysnew.m$read_r64::
L4797:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	544
;-------------------------------------------------
          lea       D0,	[Dframe+-528]
          push      D0
          call      msysnew.readitem
          mov       [Dframe+-520],	D0
          mov       D0,	[Dframe+-528]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2575
          mov       D0,	[Dframe+-528]
          mov       D1,	512
          cmp       D0,	D1
          jl        L2574
L2575:
          movq      XMM0,	[L4798]
          add       Dstack,	544
          pop       Dframe
          retn      8
L2574:
          mov       D0,	[Dframe+-528]
          mov       D1,	[Dframe+-520]
          lea       D2,	[Dframe+-512]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[Dframe+-512]
          mov       D2,	[Dframe+-528]
          mov       D3,	1
          add       D2,	D3
          mov       [D1+D2-1],	B0
          mov       D0,	0
          mov       [msysnew.itemerror],	D0
          lea       D0,	[Dframe+-536]
          lea       D1,	[Dframe+-544]
          mov       D2,	L4799
          lea       D3,	[Dframe+-512]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`sscanf*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	0
          cmp       D0,	D1
          jz        L2577
          mov       A0,	[Dframe+-536]
          movsx     D0,	A0
          mov       D1,	[Dframe+-528]
          cmp       D0,	D1
          jz        L2576
L2577:
          movq      XMM0,	[L4800]
          movq      [Dframe+-544],	XMM0
          mov       D0,	1
          mov       [msysnew.itemerror],	D0
L2576:
          movq      XMM0,	[Dframe+-544]
L2573:
;-------------------------------------------------
          add       Dstack,	544
          pop       Dframe
          retn      8
;PROC M$READ_I64 ============================================================
msysnew.m$read_i64::
L4801:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	67
          cmp       D0,	D1
          jz        L2580
          mov       D1,	99
          cmp       D0,	D1
          jz        L2580
          mov       D1,	84
          cmp       D0,	D1
          jz        L2581
          mov       D1,	116
          cmp       D0,	D1
          jz        L2581
          mov       D1,	69
          cmp       D0,	D1
          jz        L2582
          mov       D1,	101
          cmp       D0,	D1
          jz        L2582
          jmp       L2583
L2580:
          mov       D0,	[msysnew.rd_pos]
          mov       [msysnew.rd_lastpos],	D0
          mov       D0,	[msysnew.rd_pos]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jz        L2584
          lea       D0,	[msysnew.rd_pos]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       D0,	D1
          add       Dstack,	32
          pop       Dframe
          retn      8
          jmp       L2585
L2584:
          mov       D0,	0
          add       Dstack,	32
          pop       Dframe
          retn      8
L2585:
          jmp       L2579
L2581:
          mov       D0,	[msysnew.termchar]
          add       Dstack,	32
          pop       Dframe
          retn      8
          jmp       L2579
L2582:
          mov       D0,	[msysnew.itemerror]
          add       Dstack,	32
          pop       Dframe
          retn      8
          jmp       L2579
L2583:
L2579:
          lea       D0,	[Dframe+-16]
          push      D0
          call      msysnew.readitem
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2587
          mov       D1,	73
          cmp       D0,	D1
          jz        L2587
          mov       D1,	105
          cmp       D0,	D1
          jz        L2587
          mov       D1,	66
          cmp       D0,	D1
          jz        L2588
          mov       D1,	98
          cmp       D0,	D1
          jz        L2588
          mov       D1,	72
          cmp       D0,	D1
          jz        L2589
          mov       D1,	104
          cmp       D0,	D1
          jz        L2589
          jmp       L2590
L2587:
          mov       D0,	10
          push      D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+-8]
          push      D0
          call      msysnew.strtoint
          add       Dstack,	32
          pop       Dframe
          retn      8
          jmp       L2586
L2588:
          mov       D0,	2
          push      D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+-8]
          push      D0
          call      msysnew.strtoint
          add       Dstack,	32
          pop       Dframe
          retn      8
          jmp       L2586
L2589:
          mov       D0,	16
          push      D0
          push      word64 [Dframe+-16]
          mov       D0,	[Dframe+-8]
          push      D0
          call      msysnew.strtoint
          add       Dstack,	32
          pop       Dframe
          retn      8
          jmp       L2586
L2590:
L2586:
          mov       D0,	0
L2578:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      8
;PROC STRTOINT ============================================================
msysnew.strtoint::
L4802:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	0
          mov       [msysnew.itemerror],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	-1
          cmp       D0,	D1
          jnz       L2592
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+24],	D0
L2592:
          mov       D0,	0
          mov       [Dframe+-8],	B0
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L2594
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	45
          cmp       D0,	D1
          jnz       L2594
          mov       D0,	1
          mov       [Dframe+-8],	B0
          inc       word64 [Dframe+16]
          dec       word64 [Dframe+24]
          jmp       L2593
L2594:
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L2595
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	43
          cmp       D0,	D1
          jnz       L2595
          inc       word64 [Dframe+16]
          dec       word64 [Dframe+24]
L2595:
L2593:
          mov       D0,	0
          mov       [Dframe+-16],	D0
          jmp       L2597
L2596:
          lea       D0,	[Dframe+16]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-24],	B1
          dec       word64 [Dframe+24]
          mov       B0,	[Dframe+-24]
          movzx     D0,	B0
          sub       D0,	39
          cmp       D0,	64
          jae       L2601
          jmp       [D0*8+L2600]
          isegment  
L2600:
          dq        L2605
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2604
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2602
          dq        L2602
          dq        L2602
          dq        L2602
          dq        L2602
          dq        L2602
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2601
          dq        L2605
          dq        L2601
          dq        L2603
          dq        L2603
          dq        L2603
          dq        L2603
          dq        L2603
          dq        L2603
          csegment  
L2602:
          mov       B0,	[Dframe+-24]
          movzx     D0,	B0
          mov       D1,	65
          sub       D0,	D1
          mov       D1,	10
          add       D0,	D1
          mov       [Dframe+-32],	B0
          jmp       L2599
L2603:
          mov       B0,	[Dframe+-24]
          movzx     D0,	B0
          mov       D1,	97
          sub       D0,	D1
          mov       D1,	10
          add       D0,	D1
          mov       [Dframe+-32],	B0
          jmp       L2599
L2604:
          mov       B0,	[Dframe+-24]
          movzx     D0,	B0
          mov       D1,	48
          sub       D0,	D1
          mov       [Dframe+-32],	B0
          jmp       L2599
L2605:
          jmp       L2597
          jmp       L2599
L2601:
          mov       D0,	1
          mov       [msysnew.itemerror],	D0
          jmp       L2598
L2599:
          mov       B0,	[Dframe+-32]
          movzx     D0,	B0
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jl        L2606
          mov       D0,	1
          mov       [msysnew.itemerror],	D0
          jmp       L2598
L2606:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          imul2     D0,	D1
          mov       B1,	[Dframe+-32]
          movzx     D1,	B1
          add       D0,	D1
          mov       [Dframe+-16],	D0
L2597:
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jnz       L2596
L2598:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2607
          mov       D0,	[Dframe+-16]
          neg       D0
          jmp       L2608
L2607:
          mov       D0,	[Dframe+-16]
L2608:
L2591:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      24
;PROC READITEM ============================================================
msysnew.readitem:
L4803:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	40
;-------------------------------------------------
          mov       D0,	[msysnew.rd_buffer]
          cmp       D0,	0
          jnz       L2610
          call      msysnew.initreadbuffer
L2610:
          mov       D0,	[msysnew.rd_pos]
          mov       [Dframe+-16],	D0
          jmp       L2612
L2611:
          inc       word64 [Dframe+-16]
L2612:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	32
          cmp       D0,	D1
          jz        L2611
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	9
          cmp       D0,	D1
          jz        L2611
L2613:
          mov       D0,	[Dframe+-16]
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-16]
          mov       [msysnew.rd_pos],	D0
          mov       [msysnew.rd_lastpos],	D0
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2614
          mov       D0,	0
          mov       [msysnew.termchar],	D0
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[Dframe+-16]
          add       Dstack,	40
          pop       Dframe
          retn      8
L2614:
          mov       D0,	0
          mov       [Dframe+-32],	B0
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	34
          cmp       D0,	D1
          jnz       L2616
          mov       D0,	34
          mov       [Dframe+-32],	B0
          inc       word64 [Dframe+-16]
          jmp       L2615
L2616:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	39
          cmp       D0,	D1
          jnz       L2617
          mov       D0,	39
          mov       [Dframe+-32],	B0
          inc       word64 [Dframe+-16]
L2617:
L2615:
          mov       D0,	[Dframe+-16]
          mov       [Dframe+-24],	D0
          mov       [Dframe+-8],	D0
          jmp       L2619
L2618:
          lea       D0,	[Dframe+-16]
          mov       D1,	[D0]
          inc       word64 [D0]
          movzx     D1,	byte [D1]
          mov       [Dframe+-40],	B1
          mov       B0,	[Dframe+-40]
          movzx     D0,	B0
          sub       D0,	9
          cmp       D0,	53
          jae       L2623
          jmp       [D0*8+L2622]
          isegment  
L2622:
          dq        L2624
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2624
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2624
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2623
          dq        L2624
          csegment  
L2624:
          mov       B0,	[Dframe+-32]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L2626
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-16]
          cmp       D0,	D1
          jnz       L2625
L2626:
          jmp       L2627
L2625:
          mov       B0,	[Dframe+-40]
          movzx     D0,	B0
          mov       [msysnew.termchar],	D0
          jmp       L2620
          jmp       L2621
L2623:
;normalchar
L2627:
          mov       B0,	[Dframe+-40]
          movzx     D0,	B0
          mov       B1,	[Dframe+-32]
          movzx     D1,	B1
          cmp       D0,	D1
          jnz       L2628
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       B1,	[Dframe+-32]
          movzx     D1,	B1
          cmp       D0,	D1
          jnz       L2629
          mov       B0,	[Dframe+-40]
          movzx     D0,	B0
          mov       D1,	[Dframe+-8]
          mov       [D1],	B0
          inc       word64 [Dframe+-16]
          inc       word64 [Dframe+-8]
          jmp       L2630
L2629:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       [msysnew.termchar],	D0
          mov       D1,	44
          cmp       D0,	D1
          jz        L2632
          mov       D0,	[msysnew.termchar]
          mov       D1,	61
          cmp       D0,	D1
          jnz       L2631
L2632:
          inc       word64 [Dframe+-16]
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       [msysnew.termchar],	D0
L2631:
          jmp       L2620
L2630:
          jmp       L2633
L2628:
          mov       B0,	[Dframe+-40]
          movzx     D0,	B0
          mov       D1,	[Dframe+-8]
          mov       [D1],	B0
          inc       word64 [Dframe+-8]
L2633:
L2621:
L2619:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L2618
L2620:
          mov       D0,	[Dframe+-16]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2634
          mov       D0,	0
          mov       [msysnew.termchar],	D0
L2634:
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+-24]
          sub       D0,	D1
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          mov       D0,	[Dframe+-16]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	[Dframe+-24]
L2609:
;-------------------------------------------------
          add       Dstack,	40
          pop       Dframe
          retn      8
;PROC M$READ_STRLINE ============================================================
msysnew.m$read_strline::
L4804:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          call      msysnew.initreadbuffer
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          mov       D1,	16384
          cmp       D0,	D1
          jge       L2636
          mov       D0,	[Dframe+16]
          mov       D1,	[msysnew.rd_buffer]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L2637
L2636:
          mov       D0,	16383
          mov       D1,	[Dframe+16]
          mov       D2,	[msysnew.rd_buffer]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[msysnew.rd_buffer]
          mov       D2,	16384
          add       D1,	D2
          mov       [D1-1],	B0
L2637:
          mov       D0,	[Dframe+-8]
          mov       [msysnew.rd_length],	D0
          mov       D0,	[msysnew.rd_buffer]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	0
          mov       [msysnew.rd_lastpos],	D0
L2635:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC M$READ_FILELINE ============================================================
msysnew.m$read_fileline::
L4805:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      msysnew.initreadbuffer
          mov       D0,	16384
          mov       D1,	[msysnew.rd_buffer]
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      mlib.readlinen
          mov       D0,	[msysnew.rd_buffer]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [msysnew.rd_length],	D0
          mov       D0,	[msysnew.rd_buffer]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	0
          mov       [msysnew.rd_lastpos],	D0
L2638:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$READ_CONLINE ============================================================
msysnew.m$read_conline::
L4806:
;-------------------------------------------------
          call      msysnew.initreadbuffer
          mov       D0,	16384
          mov       D1,	[msysnew.rd_buffer]
          mov       D2,	0
          push      D0
          push      D1
          push      D2
          call      mlib.readlinen
          mov       D0,	[msysnew.rd_buffer]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [msysnew.rd_length],	D0
          mov       D0,	[msysnew.rd_buffer]
          mov       [msysnew.rd_pos],	D0
          mov       D0,	0
          mov       [msysnew.rd_lastpos],	D0
L2639:
;-------------------------------------------------
          ret       
;PROC INITREADBUFFER ============================================================
msysnew.initreadbuffer:
L4807:
;-------------------------------------------------
          mov       D0,	[msysnew.rd_buffer]
          cmp       D0,	0
          jz        L2641
          ret       
L2641:
          mov       D0,	16384
          push      D0
          call      mlib.pcm_alloc
          mov       [msysnew.rd_buffer],	D0
          mov       D0,	0
          mov       D1,	[msysnew.rd_buffer]
          mov       [D1],	B0
          mov       D0,	[msysnew.rd_buffer]
          mov       [msysnew.rd_lastpos],	D0
          mov       [msysnew.rd_pos],	D0
L2640:
;-------------------------------------------------
          ret       
;PROC GETSTR ============================================================
msysnew.getstr:
L4808:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+13]
          cmp       D0,	0
          jz        L2643
          mov       D0,	[Dframe+16]
          push      D0
          call      mlib.pcm_copyheapstring
          jmp       L2644
L2643:
          mov       D0,	[Dframe+16]
L2644:
L2642:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC STRREAL ============================================================
msysnew.strreal::
L4809:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          lea       D0,	[msysnew.strreal.str]
          push      D0
          call      msysnew.m$print_startstr
          mov       D0,	[Dframe+24]
          push      D0
          call      msysnew.getfmt
          mov       [Dframe+-8],	D0
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_r64
          call      msysnew.m$print_end
          mov       D0,	[Dframe+-8]
          lea       D1,	[msysnew.strreal.str]
          push      D0
          push      D1
          call      msysnew.getstr
L2645:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC STRWORD ============================================================
msysnew.strword::
L4810:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          lea       D0,	[msysnew.strword.str]
          push      D0
          call      msysnew.m$print_startstr
          mov       D0,	[Dframe+24]
          push      D0
          call      msysnew.getfmt
          mov       [Dframe+-8],	D0
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_u64
          call      msysnew.m$print_end
          mov       D0,	[Dframe+-8]
          lea       D1,	[msysnew.strword.str]
          push      D0
          push      D1
          call      msysnew.getstr
L2646:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GETSTRINT ============================================================
msysnew.getstrint::
L4811:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          push      D0
          call      msysnew.m$print_startstr
          mov       D0,	0
          push      D0
          call      msysnew.getfmt
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_i64
          call      msysnew.m$print_end
L2647:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC STRINT ============================================================
msysnew.strint::
L4812:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          lea       D0,	[msysnew.strint.str]
          push      D0
          call      msysnew.m$print_startstr
          mov       D0,	[Dframe+24]
          push      D0
          call      msysnew.getfmt
          mov       [Dframe+-8],	D0
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_i64
          call      msysnew.m$print_end
          mov       D0,	[Dframe+-8]
          lea       D1,	[msysnew.strint.str]
          push      D0
          push      D1
          call      msysnew.getstr
L2648:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC GETFMT ============================================================
msysnew.getfmt::
L4813:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L2650
          lea       D0,	[msysnew.getfmt.fmt]
          mov       D1,	-1
          mov       D2,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          lea       D0,	[msysnew.getfmt.fmt]
          jmp       L2651
L2650:
          lea       D0,	[msysnew.defaultfmt]
L2651:
L2649:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC TOSTR_STR ============================================================
msysnew.tostr_str:
L4814:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-8],	D0
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+3]
          cmp       D0,	0
          jnz       L2654
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+-16]
          cmp       D0,	D1
          jg        L2654
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+8]
          cmp       D0,	0
          jnz       L2654
          mov       D0,	[Dframe+24]
          movsx     D0,	byte [D0+1]
          cmp       D0,	0
          jz        L2653
L2654:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+3]
          cmp       D0,	0
          jz        L2655
          mov       D0,	2
          add       [Dframe+-16],	D0
L2655:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+-16]
          cmp       D0,	D1
          jle       L2656
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0]
          mov       [Dframe+-16],	D0
L2656:
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          push      D0
          call      mlib.pcm_alloc
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+24]
          push      D0
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+-32]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      msysnew.strtostrfmt
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+24]
          movsx     D0,	byte [D0+1]
          cmp       D0,	0
          jz        L2657
          lea       D0,	[Dframe+-24]
          mov       D1,	[Dframe+24]
          movsx     D1,	byte [D1+1]
          cmp       [D0],	D1
          jle       L4815
          mov       [D0],	D1
L4815:
L2657:
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+-32]
          push      D0
          call      msysnew.printstr_n
          mov       D0,	[Dframe+-16]
          mov       D1,	1
          add       D0,	D1
          mov       D1,	[Dframe+-32]
          push      D0
          push      D1
          call      mlib.pcm_free
          jmp       L2658
L2653:
          push      word64 [Dframe+-8]
          mov       D0,	[Dframe+16]
          push      D0
          call      msysnew.printstr_n
L2658:
L2652:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      16
;PROC TOSTR_R64 ============================================================
msysnew.tostr_r64:
L4816:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	744
;-------------------------------------------------
          mov       D0,	37
          lea       D1,	[Dframe+-736]
          mov       D2,	0
          mov       [D1+D2],	B0
          mov       D0,	[Dframe+24]
          movsx     D0,	byte [D0+1]
          cmp       D0,	0
          jz        L2660
          mov       D0,	46
          lea       D1,	[Dframe+-736]
          mov       D2,	1
          mov       [D1+D2],	B0
          mov       D0,	42
          lea       D1,	[Dframe+-736]
          mov       D2,	2
          mov       [D1+D2],	B0
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+5]
          lea       D1,	[Dframe+-736]
          mov       D2,	3
          mov       [D1+D2],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-736]
          mov       D2,	4
          mov       [D1+D2],	B0
          movq      XMM0,	[Dframe+16]
          mov       D0,	[Dframe+24]
          movsx     D0,	byte [D0+1]
          lea       D1,	[Dframe+-736]
          lea       D2,	[Dframe+-360]
          movq      D13,	XMM0
          push      D13
          push      D0
          push      D1
          push      D2
          mov       D0,	`sprintf*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          movq      XMM3,	D13
          call      [L3654]	!callff_4
          jmp       L2661
L2660:
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+5]
          lea       D1,	[Dframe+-736]
          mov       D2,	1
          mov       [D1+D2],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-736]
          mov       D2,	2
          mov       [D1+D2],	B0
          movq      XMM0,	[Dframe+16]
          lea       D0,	[Dframe+-736]
          lea       D1,	[Dframe+-360]
          movq      D13,	XMM0
          push      D13
          push      D0
          push      D1
          mov       D0,	`sprintf*
          pop       D10
          pop       D11
          pop       D12
          movq      XMM2,	D12
          call      [L3654]	!callff_4
L2661:
          lea       D0,	[Dframe+-360]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-744],	D0
          mov       D1,	[Dframe+24]
          movzx     D1,	byte [D1]
          cmp       D0,	D1
          jge       L2662
          mov       D0,	[Dframe+24]
          push      D0
          push      word64 [Dframe+-744]
          lea       D0,	[Dframe+-720]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          call      msysnew.expandstr
          mov       [Dframe+-744],	D0
          lea       D0,	[Dframe+-720]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2662:
          push      word64 [Dframe+-744]
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.printstr_n
L2659:
;-------------------------------------------------
          add       Dstack,	744
          pop       Dframe
          retn      16
;PROC TOSTR_U128 ============================================================
msysnew.tostr_u128:
L4817:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	368
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+12]
          mov       D1,	68
          cmp       D0,	D1
          jz        L2665
          mov       D1,	100
          cmp       D0,	D1
          jz        L2665
          mov       D1,	67
          cmp       D0,	D1
          jz        L2666
          mov       D1,	99
          cmp       D0,	D1
          jz        L2666
          jmp       L2667
L2665:
          mov       D0,	[Dframe+32]
          lea       D1,	[Dframe+-360]
          mov       D2,	8
          lea       D3,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          push      D3
          call      msysnew.domultichar
          mov       [Dframe+-368],	D0
          jmp       L2664
L2666:
          mov       D0,	[Dframe+16]
          push      D0
          call      msysnew.printchar
          add       Dstack,	368
          pop       Dframe
          retn      32
          jmp       L2664
L2667:
          mov       D0,	[Dframe+40]
          cmp       D0,	0
          jz        L2668
          mov       D0,	45
          lea       D1,	[Dframe+-360]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	[Dframe+32]
          lea       D1,	[Dframe+-360]
          mov       D2,	2
          lea       D1,	[D1+D2-1]
          mov       D2,	[Dframe+16]
          mov       D3,	[Dframe+16+8]
          push      D0
          push      D1
          push      D3
          push      D2
          call      msysnew.u128tostrfmt
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-368],	D0
          jmp       L2669
L2668:
          mov       D0,	[Dframe+32]
          lea       D1,	[Dframe+-360]
          mov       D2,	[Dframe+16]
          mov       D3,	[Dframe+16+8]
          push      D0
          push      D1
          push      D3
          push      D2
          call      msysnew.u128tostrfmt
          mov       [Dframe+-368],	D0
L2669:
L2664:
          push      word64 [Dframe+-368]
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.printstr_n
L2663:
;-------------------------------------------------
          add       Dstack,	368
          pop       Dframe
          retn      32
;PROC TOSTR_U64 ============================================================
msysnew.tostr_u64:
L4818:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	368
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+12]
          mov       D1,	68
          cmp       D0,	D1
          jz        L2672
          mov       D1,	100
          cmp       D0,	D1
          jz        L2672
          mov       D1,	67
          cmp       D0,	D1
          jz        L2673
          mov       D1,	99
          cmp       D0,	D1
          jz        L2673
          jmp       L2674
L2672:
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-360]
          mov       D2,	8
          lea       D3,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          push      D3
          call      msysnew.domultichar
          mov       [Dframe+-368],	D0
          jmp       L2671
L2673:
          push      word64 [Dframe+16]
          call      msysnew.printchar
          add       Dstack,	368
          pop       Dframe
          retn      16
          jmp       L2671
L2674:
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          push      word64 [Dframe+16]
          call      msysnew.u64tostrfmt
          mov       [Dframe+-368],	D0
L2671:
          push      word64 [Dframe+-368]
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.printstr_n
L2670:
;-------------------------------------------------
          add       Dstack,	368
          pop       Dframe
          retn      16
;PROC TOSTR_I64 ============================================================
msysnew.tostr_i64:
L4819:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	368
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movzx     D0,	byte [D0+12]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2677
          mov       D1,	68
          cmp       D0,	D1
          jz        L2678
          mov       D1,	100
          cmp       D0,	D1
          jz        L2678
          jmp       L2679
L2677:
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          push      word64 [Dframe+16]
          call      msysnew.i64tostrfmt
          mov       [Dframe+-368],	D0
          jmp       L2676
L2678:
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-360]
          mov       D2,	8
          lea       D3,	[Dframe+16]
          push      D0
          push      D1
          push      D2
          push      D3
          call      msysnew.domultichar
          mov       [Dframe+-368],	D0
          jmp       L2676
L2679:
          push      word64 [Dframe+16]
          call      msysnew.printchar
          add       Dstack,	368
          pop       Dframe
          retn      16
L2676:
          push      word64 [Dframe+-368]
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.printstr_n
L2675:
;-------------------------------------------------
          add       Dstack,	368
          pop       Dframe
          retn      16
;PROC STRTOSTRFMT ============================================================
msysnew.strtostrfmt:
L4820:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	288
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-288],	D0
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+3]
          cmp       D0,	0
          jnz       L2682
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+8]
          cmp       D0,	0
          jz        L2681
L2682:
          mov       D0,	[Dframe+32]
          mov       D1,	256
          cmp       D0,	D1
          jge       L2683
          lea       D0,	[Dframe+-272]
          mov       [Dframe+-8],	D0
          jmp       L2684
L2683:
          mov       D0,	[Dframe+32]
          mov       D1,	3
          add       D0,	D1
          mov       [Dframe+-288],	D0
          push      word64 [Dframe+-288]
          call      mlib.pcm_alloc
          mov       [Dframe+-8],	D0
L2684:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+3]
          cmp       D0,	0
          jz        L2685
          mov       D0,	[Dframe+-8]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+3]
          mov       D1,	[Dframe+-16]
          mov       [D1],	B0
          inc       word64 [Dframe+-16]
          mov       D0,	[Dframe+32]
          cmp       D0,	0
          jz        L2686
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-16]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          add       [D0],	D1
L2686:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+3]
          mov       D1,	[Dframe+-16]
          mov       [D1],	B0
          inc       word64 [Dframe+-16]
          mov       D0,	0
          mov       D1,	[Dframe+-16]
          mov       [D1],	B0
          mov       D0,	2
          add       [Dframe+32],	D0
          jmp       L2687
L2685:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
L2687:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+8]
          sub       D0,	65
          cmp       D0,	33
          jae       L2690
          jmp       [D0*8+L2689]
          isegment  
L2689:
          dq        L2692
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2690
          dq        L2691
          csegment  
L2691:
          mov       D0,	[Dframe+-8]
          push      D0
          call      msysnew.convlcstring
          jmp       L2688
L2692:
          mov       D0,	[Dframe+-8]
          push      D0
          call      msysnew.convucstring
          jmp       L2688
L2690:
L2688:
          mov       D0,	[Dframe+-8]
          mov       [Dframe+16],	D0
L2681:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0]
          mov       [Dframe+-280],	D0
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jle       L2693
          mov       D0,	[Dframe+40]
          push      D0
          push      word64 [Dframe+32]
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      msysnew.expandstr
          mov       [Dframe+32],	D0
          jmp       L2694
L2693:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
L2694:
          mov       D0,	[Dframe+-288]
          cmp       D0,	0
          jz        L2695
          push      word64 [Dframe+-288]
          mov       D0,	[Dframe+-8]
          push      D0
          call      mlib.pcm_free
L2695:
          mov       D0,	[Dframe+32]
L2680:
;-------------------------------------------------
          add       Dstack,	288
          pop       Dframe
          retn      32
;PROC I64MINTOSTR ============================================================
msysnew.i64mintostr:
L4821:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	400
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          sub       D0,	2
          cmp       D0,	15
          jae       L2699
          jmp       [D0*8+L2698]
          isegment  
L2698:
          dq        L2702
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2700
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2699
          dq        L2701
          csegment  
L2700:
          mov       D0,	L4822
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          lea       D1,	[D1+D2]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	3
          mov       [Dframe+-376],	D0
          jmp       L2697
L2701:
          mov       D0,	L4823
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          lea       D1,	[D1+D2]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	1
          mov       [Dframe+-376],	D0
          jmp       L2697
L2702:
          mov       D0,	L4824
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          lea       D1,	[D1+D2]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	7
          mov       [Dframe+-376],	D0
          jmp       L2697
L2699:
          mov       D0,	L4825
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          lea       D1,	[D1+D2]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
L2697:
          lea       D0,	[Dframe+-360]
          mov       D1,	0
          lea       D0,	[D0+D1]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+-368],	D0
          lea       D0,	[Dframe+16]
          mov       D1,	[Dframe+-368]
          add       [D0],	D1
          mov       D0,	[Dframe+32]
          cmp       D0,	0
          jz        L2703
          lea       D0,	[Dframe+16]
          mov       D1,	[Dframe+-376]
          add       [D0],	D1
L2703:
          mov       D0,	0
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          mov       D0,	0
          mov       [Dframe+-384],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	10
          cmp       D0,	D1
          jnz       L2704
          mov       D0,	3
          jmp       L2705
L2704:
          mov       D0,	4
L2705:
          mov       [Dframe+-392],	D0
          jmp       L2707
L2706:
          dec       word64 [Dframe+16]
          lea       D0,	[Dframe+-368]
          mov       D1,	[D0]
          dec       word64 [D0]
          mov       D0,	1
          sub       D1,	D0
          movzx     D1,	byte [Dframe+D1+-360]
          mov       D0,	[Dframe+16]
          mov       [D0],	B1
          mov       D0,	[Dframe+32]
          cmp       D0,	0
          jz        L2709
          mov       D0,	[Dframe+-368]
          cmp       D0,	0
          jz        L2709
          lea       D0,	[Dframe+-384]
          inc       word64 [D0]
          mov       D1,	[D0]
          mov       D0,	[Dframe+-392]
          cmp       D1,	D0
          jnz       L2709
          dec       word64 [Dframe+16]
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       [D1],	B0
          mov       D0,	0
          mov       [Dframe+-384],	D0
L2709:
L2707:
          mov       D0,	[Dframe+-368]
          cmp       D0,	0
          jnz       L2706
L2708:
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
L2696:
;-------------------------------------------------
          add       Dstack,	400
          pop       Dframe
          retn      24
;PROC U128TOSTRFMT ============================================================
msysnew.u128tostrfmt:
L4826:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	400
;-------------------------------------------------
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+7]
          mov       D1,	[Dframe+40]
          movzx     D1,	byte [D1+2]
          lea       D2,	[Dframe+-360]
          mov       D3,	[Dframe+16]
          mov       D4,	[Dframe+16+8]
          push      D0
          push      D1
          push      D2
          push      D4
          push      D3
          call      msysnew.u128tostr
          mov       [Dframe+-392],	D0
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+10]
          cmp       D0,	0
          jz        L2711
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+10]
          lea       D1,	[Dframe+-360]
          mov       D2,	[Dframe+-392]
          mov       [D1+D2],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-360]
          lea       D2,	[Dframe+-392]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
L2711:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+2]
          mov       D1,	10
          cmp       D0,	D1
          jg        L2713
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+10]
          cmp       D0,	0
          jz        L2712
L2713:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+8]
          mov       D1,	97
          cmp       D0,	D1
          jnz       L2712
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.convlcstring
L2712:
          mov       D0,	[Dframe+40]
          push      D0
          push      word64 [Dframe+-392]
          mov       D0,	[Dframe+32]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          call      msysnew.expandstr
L2710:
;-------------------------------------------------
          add       Dstack,	400
          pop       Dframe
          retn      32
;PROC U64TOSTRFMT ============================================================
msysnew.u64tostrfmt:
L4827:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	400
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+7]
          mov       D1,	[Dframe+32]
          movzx     D1,	byte [D1+2]
          lea       D2,	[Dframe+-360]
          push      D0
          push      D1
          push      D2
          push      word64 [Dframe+16]
          call      msysnew.u64tostr
          mov       [Dframe+-392],	D0
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+10]
          cmp       D0,	0
          jz        L2715
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+10]
          lea       D1,	[Dframe+-360]
          mov       D2,	[Dframe+-392]
          mov       [D1+D2],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-360]
          lea       D2,	[Dframe+-392]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
L2715:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+2]
          mov       D1,	10
          cmp       D0,	D1
          jg        L2717
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+10]
          cmp       D0,	0
          jz        L2716
L2717:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+8]
          mov       D1,	97
          cmp       D0,	D1
          jnz       L2716
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.convlcstring
L2716:
          mov       D0,	[Dframe+32]
          push      D0
          push      word64 [Dframe+-392]
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          call      msysnew.expandstr
L2714:
;-------------------------------------------------
          add       Dstack,	400
          pop       Dframe
          retn      24
;PROC I64TOSTRFMT ============================================================
msysnew.i64tostrfmt:
L4828:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	408
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-408],	D0
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+11]
          cmp       D0,	0
          jz        L2719
          mov       D0,	1
          mov       [Dframe+-408],	D0
L2719:
          mov       D0,	[Dframe+16]
          mov       D1,	[msysnew.i64tostrfmt.mindint]
          cmp       D0,	D1
          jnz       L2720
          mov       D0,	[Dframe+-408]
          cmp       D0,	0
          jnz       L2720
          mov       D0,	45
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          mov       [D1+D2],	B0
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+7]
          mov       D1,	[Dframe+32]
          movzx     D1,	byte [D1+2]
          lea       D2,	[Dframe+-360]
          mov       D3,	1
          lea       D2,	[D2+D3]
          push      D0
          push      D1
          push      D2
          call      msysnew.i64mintostr
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-392],	D0
          jmp       L2721
L2720:
          mov       D0,	[Dframe+-408]
          cmp       D0,	0
          jnz       L2724
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jl        L2723
L2724:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+6]
          cmp       D0,	0
          jz        L2722
L2723:
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jge       L2725
          mov       D0,	[Dframe+16]
          neg       D0
          mov       [Dframe+16],	D0
          mov       D0,	45
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          mov       [D1+D2],	B0
          jmp       L2726
L2725:
          mov       D0,	43
          lea       D1,	[Dframe+-360]
          mov       D2,	0
          mov       [D1+D2],	B0
L2726:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+7]
          mov       D1,	[Dframe+32]
          movzx     D1,	byte [D1+2]
          lea       D2,	[Dframe+-360]
          mov       D3,	1
          lea       D2,	[D2+D3]
          push      D0
          push      D1
          push      D2
          push      word64 [Dframe+16]
          call      msysnew.u64tostr
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-392],	D0
          jmp       L2727
L2722:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+7]
          mov       D1,	[Dframe+32]
          movzx     D1,	byte [D1+2]
          lea       D2,	[Dframe+-360]
          push      D0
          push      D1
          push      D2
          push      word64 [Dframe+16]
          call      msysnew.u64tostr
          mov       [Dframe+-392],	D0
L2727:
L2721:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+10]
          cmp       D0,	0
          jz        L2728
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+10]
          lea       D1,	[Dframe+-360]
          mov       D2,	[Dframe+-392]
          mov       [D1+D2],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-360]
          lea       D2,	[Dframe+-392]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
L2728:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+2]
          mov       D1,	10
          cmp       D0,	D1
          jg        L2730
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+10]
          cmp       D0,	0
          jz        L2729
L2730:
          mov       D0,	[Dframe+32]
          movzx     D0,	byte [D0+8]
          mov       D1,	97
          cmp       D0,	D1
          jnz       L2729
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.convlcstring
L2729:
          mov       D0,	[Dframe+32]
          push      D0
          push      word64 [Dframe+-392]
          mov       D0,	[Dframe+24]
          lea       D1,	[Dframe+-360]
          push      D0
          push      D1
          call      msysnew.expandstr
L2718:
;-------------------------------------------------
          add       Dstack,	408
          pop       Dframe
          retn      24
;PROC XDIVREM128 ============================================================
msysnew.xdivrem128:
L4829:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16+8]
          mov       D2,	[Dframe+32]
          xor       D3,	D3
          push      D1
          push      D0
          push      D3
          push      D2
          call      [L4830]	!idiv_i128
          mov       [Dframe+-16],	D0
          mov       [Dframe+-16+8],	D1
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16+8]
          mov       D2,	[Dframe+-16]
          mov       D3,	[Dframe+-16+8]
          mov       D4,	[Dframe+32]
          xor       D5,	D5
          push      D1
          push      D0
          push      D3
          push      D2
          push      D5
          push      D4
          call      [L4831]	!mul_i128
          pop       D2
          pop       D3
          sub       D2,	D0
          sbb       D3,	D1
          mov       [Dframe+-48],	D2
          mov       [Dframe+-48+8],	D3
          mov       D0,	[Dframe+-48]
          mov       [Dframe+-56],	D0
          mov       D0,	[Dframe+-56]
          mov       D1,	[Dframe+40]
          mov       [D1],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+-16+8]
L2731:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          retn      32
;PROC U128TOSTR ============================================================
msysnew.u128tostr:
L4832:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	216
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-176],	D0
          mov       D0,	0
          mov       [Dframe+-192],	D0
          mov       D0,	[Dframe+40]
          mov       D1,	10
          cmp       D0,	D1
          jnz       L2733
          mov       D0,	3
          jmp       L2734
L2733:
          mov       D0,	4
L2734:
          mov       [Dframe+-200],	D0
L2735:
          lea       D0,	[Dframe+-168]
          push      D0
          push      word64 [Dframe+40]
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16+8]
          push      D1
          push      D0
          call      msysnew.xdivrem128
          mov       [Dframe+16],	D0
          mov       [Dframe+16+8],	D1
          mov       D0,	[Dframe+-168]
          movzx     D0,	byte [D0+msysnew.digits]
          lea       D1,	[Dframe+-160]
          lea       D2,	[Dframe+-176]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
          inc       word64 [Dframe+-192]
          mov       D0,	[Dframe+48]
          cmp       D0,	0
          jz        L2738
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16+8]
          mov       D2,	0
          mov       D3,	0
          cmp       D0,	D2
          jnz       L4833
          cmp       D1,	D3
          jz        L2738
L4833:
          mov       D0,	[Dframe+-192]
          mov       D1,	[Dframe+-200]
          cmp       D0,	D1
          jnz       L2738
          mov       D0,	[Dframe+48]
          lea       D1,	[Dframe+-160]
          lea       D2,	[Dframe+-176]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
          mov       D0,	0
          mov       [Dframe+-192],	D0
L2738:
L2736:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16+8]
          mov       D2,	0
          mov       D3,	0
          cmp       D0,	D2
          jnz       L2735
          cmp       D1,	D3
          jnz       L2735
L2737:
          mov       D0,	[Dframe+-176]
          mov       [Dframe+-184],	D0
          mov       D0,	[Dframe+32]
          mov       [Dframe+-216],	D0
          jmp       L2740
L2739:
          lea       D0,	[Dframe+-176]
          mov       D1,	[D0]
          dec       word64 [D0]
          movzx     D1,	byte [Dframe+D1+-160]
          mov       D0,	[Dframe+32]
          mov       [D0],	B1
          inc       word64 [Dframe+32]
L2740:
          mov       D0,	[Dframe+-176]
          cmp       D0,	0
          jnz       L2739
L2741:
          mov       D0,	0
          mov       D1,	[Dframe+32]
          mov       [D1],	B0
          mov       D0,	[Dframe+-184]
L2732:
;-------------------------------------------------
          add       Dstack,	216
          pop       Dframe
          retn      40
;PROC U64TOSTR ============================================================
msysnew.u64tostr:
L4835:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	424
;-------------------------------------------------
          mov       D0,	0
          mov       [Dframe+-376],	D0
          mov       D0,	0
          mov       [Dframe+-392],	D0
          mov       D0,	[Dframe+32]
          mov       D1,	10
          cmp       D0,	D1
          jnz       L2743
          mov       D0,	3
          jmp       L2744
L2743:
          mov       D0,	4
L2744:
          mov       [Dframe+-400],	D0
L2745:
          sub       Dstack,	8
          sub       Dstack,	8
          push      word64 [Dframe+32]
          push      word64 [Dframe+16]
          call      msysnew.mdivrem
          pop       D0
          mov       [Dframe+16],	D0
          pop       D0
          mov       [Dframe+-368],	D0
          movzx     D0,	byte [D0+msysnew.digits]
          lea       D1,	[Dframe+-360]
          lea       D2,	[Dframe+-376]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
          inc       word64 [Dframe+-392]
          mov       D0,	[Dframe+40]
          cmp       D0,	0
          jz        L2748
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jz        L2748
          mov       D0,	[Dframe+-392]
          mov       D1,	[Dframe+-400]
          cmp       D0,	D1
          jnz       L2748
          mov       D0,	[Dframe+40]
          lea       D1,	[Dframe+-360]
          lea       D2,	[Dframe+-376]
          inc       word64 [D2]
          mov       D3,	[D2]
          mov       [D1+D3],	B0
          mov       D0,	0
          mov       [Dframe+-392],	D0
L2748:
L2746:
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2745
L2747:
          mov       D0,	[Dframe+-376]
          mov       [Dframe+-384],	D0
          mov       D0,	[Dframe+24]
          mov       [Dframe+-424],	D0
          jmp       L2750
L2749:
          lea       D0,	[Dframe+-376]
          mov       D1,	[D0]
          dec       word64 [D0]
          movzx     D1,	byte [Dframe+D1+-360]
          mov       D0,	[Dframe+24]
          mov       [D0],	B1
          inc       word64 [Dframe+24]
L2750:
          mov       D0,	[Dframe+-376]
          cmp       D0,	0
          jnz       L2749
L2751:
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          mov       D0,	[Dframe+-384]
L2742:
;-------------------------------------------------
          add       Dstack,	424
          pop       Dframe
          retn      32
;PROC MDIVREM ============================================================
msysnew.mdivrem:
L4836:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;GENFRAMEDEF
;-------------------------------------------------
          xor       D11,	D11
          mov       D0,	[Dframe+16]
          div       word64 [Dframe+24]
          mov       [Dframe+-8],	D0
          mov       [Dframe+-16],	D11
          mov       D0,	[Dframe+-8]
          mov       [Dframe+32],	D0
          mov       D0,	[Dframe+-16]
          mov       [Dframe+40],	D0
L2752:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC EXPANDSTR ============================================================
msysnew.expandstr:
L4837:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	64
;-------------------------------------------------
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0]
          mov       [Dframe+-16],	D0
          mov       D1,	0
          cmp       D0,	D1
          jz        L2755
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jg        L2754
L2755:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strncpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+32]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
          mov       D0,	[Dframe+32]
          add       Dstack,	64
          pop       Dframe
          retn      32
L2754:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+9]
          mov       D1,	76
          cmp       D0,	D1
          jnz       L2757
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strncpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+24]
          mov       D1,	[Dframe+32]
          add       [D0],	D1
L2758:
          mov       D0,	1
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          sub       D0,	D1
          mov       [Dframe+-32],	D0
          cmp       D0,	1
          jl        L2761
L2759:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+4]
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          inc       word64 [Dframe+24]
L2760:
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-8],	D0
          mov       D1,	[Dframe+-32]
          cmp       D0,	D1
          jle       L2759
L2761:
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          jmp       L2756
L2757:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+9]
          mov       D1,	82
          cmp       D0,	D1
          jnz       L2762
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+4]
          mov       D1,	48
          cmp       D0,	D1
          jnz       L2763
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+2]
          cmp       D0,	0
          jz        L2763
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	45
          cmp       D0,	D1
          jz        L2764
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	43
          cmp       D0,	D1
          jnz       L2763
L2764:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          inc       word64 [Dframe+24]
L2765:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          sub       D0,	D1
          mov       [Dframe+-40],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2768
L2766:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+4]
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          inc       word64 [Dframe+24]
L2767:
          dec       word64 [Dframe+-40]
          mov       D0,	[Dframe+-40]
          cmp       D0,	0
          jnz       L2766
L2768:
          mov       D0,	[Dframe+32]
          mov       D1,	1
          sub       D0,	D1
          mov       D1,	[Dframe+16]
          mov       D2,	1
          add       D1,	D2
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strncpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+32]
          lea       D1,	[D1+D2]
          mov       [D1-1],	B0
          jmp       L2769
L2763:
L2770:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          sub       D0,	D1
          mov       [Dframe+-48],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2773
L2771:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+4]
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          inc       word64 [Dframe+24]
L2772:
          dec       word64 [Dframe+-48]
          mov       D0,	[Dframe+-48]
          cmp       D0,	0
          jnz       L2771
L2773:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strncpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       D2,	[Dframe+32]
          lea       D1,	[D1+D2]
          mov       [D1],	B0
L2769:
          jmp       L2756
L2762:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          sub       D0,	D1
          mov       D1,	1
          add       D0,	D1
          sar       D0,	1
          mov       [Dframe+-24],	D0
L2774:
          mov       D0,	[Dframe+-24]
          mov       [Dframe+-56],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2777
L2775:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+4]
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          inc       word64 [Dframe+24]
L2776:
          dec       word64 [Dframe+-56]
          mov       D0,	[Dframe+-56]
          cmp       D0,	0
          jnz       L2775
L2777:
          mov       D0,	[Dframe+32]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          mov       D0,	`strncpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+24]
          mov       D1,	[Dframe+32]
          add       [D0],	D1
L2778:
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+32]
          sub       D0,	D1
          mov       D1,	[Dframe+-24]
          sub       D0,	D1
          mov       [Dframe+-64],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2781
L2779:
          mov       D0,	[Dframe+40]
          movzx     D0,	byte [D0+4]
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
          inc       word64 [Dframe+24]
L2780:
          dec       word64 [Dframe+-64]
          mov       D0,	[Dframe+-64]
          cmp       D0,	0
          jnz       L2779
L2781:
          mov       D0,	0
          mov       D1,	[Dframe+24]
          mov       [D1],	B0
L2756:
          mov       D0,	[Dframe+-16]
L2753:
;-------------------------------------------------
          add       Dstack,	64
          pop       Dframe
          retn      32
;PROC DOMULTICHAR ============================================================
msysnew.domultichar:
L4838:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          lea       D0,	[Dframe+-24]
          mov       [Dframe+-32],	D0
          mov       D0,	[Dframe+24]
          mov       [Dframe+-48],	D0
L2783:
          mov       D0,	[Dframe+24]
          mov       [Dframe+-56],	D0
          mov       D1,	0
          cmp       D0,	D1
          jle       L2786
L2784:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2787
          jmp       L2786
L2787:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+-32]
          mov       [D1],	B0
          inc       word64 [Dframe+-32]
          inc       word64 [Dframe+16]
L2785:
          dec       word64 [Dframe+-56]
          mov       D0,	[Dframe+-56]
          cmp       D0,	0
          jnz       L2784
L2786:
          mov       D0,	0
          mov       D1,	[Dframe+-32]
          mov       [D1],	B0
          mov       D0,	[Dframe+40]
          lea       D1,	[Dframe+-24]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       D1,	[Dframe+32]
          lea       D2,	[Dframe+-24]
          push      D0
          push      D1
          push      D2
          call      msysnew.expandstr
L2782:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          retn      32
;PROC STRTOFMT ============================================================
msysnew.strtofmt::
L4839:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	128
;-------------------------------------------------
          mov       D0,	[Dframe+32]
          lea       D1,	[msysnew.defaultfmt]
          mov       D2,	[D1]
          mov       [D0],	D2
          mov       D2,	[D1+8]
          mov       [D0+8],	D2
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2789
          add       Dstack,	128
          pop       Dframe
          retn      24
L2789:
          mov       D0,	[Dframe+24]
          mov       D1,	-1
          cmp       D0,	D1
          jnz       L2790
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+24],	D0
L2790:
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          lea       D2,	[Dframe+-128]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	0
          lea       D1,	[Dframe+-128]
          mov       D2,	[Dframe+24]
          mov       [D1+D2],	B0
          lea       D0,	[Dframe+-128]
          mov       [Dframe+16],	D0
          mov       D0,	0
          mov       [Dframe+-16],	B0
          jmp       L2792
L2791:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       [Dframe+-8],	B0
          inc       word64 [Dframe+16]
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          sub       D0,	42
          cmp       D0,	85
          jae       L2796
          jmp       [D0*8+L2795]
          isegment  
L2795:
          dq        L2832
          dq        L2827
          dq        L2826
          dq        L2796
          dq        L2825
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2812
          dq        L2797
          dq        L2829
          dq        L2828
          dq        L2822
          dq        L2823
          dq        L2824
          dq        L2798
          dq        L2796
          dq        L2810
          dq        L2796
          dq        L2796
          dq        L2830
          dq        L2796
          dq        L2799
          dq        L2817
          dq        L2808
          dq        L2796
          dq        L2815
          dq        L2819
          dq        L2796
          dq        L2831
          dq        L2821
          dq        L2800
          dq        L2796
          dq        L2814
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2826
          dq        L2796
          dq        L2813
          dq        L2797
          dq        L2829
          dq        L2828
          dq        L2822
          dq        L2823
          dq        L2824
          dq        L2798
          dq        L2796
          dq        L2810
          dq        L2796
          dq        L2796
          dq        L2830
          dq        L2796
          dq        L2799
          dq        L2817
          dq        L2808
          dq        L2796
          dq        L2815
          dq        L2819
          dq        L2796
          dq        L2831
          dq        L2821
          dq        L2800
          dq        L2796
          dq        L2814
          dq        L2796
          dq        L2796
          dq        L2796
          dq        L2809
          csegment  
L2797:
          mov       D0,	2
          mov       D1,	[Dframe+32]
          mov       [D1+2],	B0
          jmp       L2794
L2798:
          mov       D0,	16
          mov       D1,	[Dframe+32]
          mov       [D1+2],	B0
          jmp       L2794
L2799:
          mov       D0,	8
          mov       D1,	[Dframe+32]
          mov       [D1+2],	B0
          jmp       L2794
L2800:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       [Dframe+-8],	B0
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2801
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          sub       D0,	48
          cmp       D0,	55
          jae       L2804
          jmp       [D0*8+L2803]
          isegment  
L2803:
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2805
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2806
          dq        L2806
          dq        L2806
          dq        L2806
          dq        L2806
          dq        L2806
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2804
          dq        L2807
          dq        L2807
          dq        L2807
          dq        L2807
          dq        L2807
          dq        L2807
          csegment  
L2805:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	48
          sub       D0,	D1
          mov       [Dframe+-8],	B0
          jmp       L2802
L2806:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	65
          sub       D0,	D1
          mov       D1,	10
          add       D0,	D1
          mov       [Dframe+-8],	B0
          jmp       L2802
L2807:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	97
          sub       D0,	D1
          mov       D1,	10
          add       D0,	D1
          mov       [Dframe+-8],	B0
          jmp       L2802
L2804:
          mov       D0,	10
          mov       [Dframe+-8],	B0
L2802:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	[Dframe+32]
          mov       [D1+2],	B0
          inc       word64 [Dframe+16]
L2801:
          jmp       L2794
L2808:
          mov       D0,	34
          mov       D1,	[Dframe+32]
          mov       [D1+3],	B0
          jmp       L2794
L2809:
          mov       D0,	126
          mov       D1,	[Dframe+32]
          mov       [D1+3],	B0
          jmp       L2794
L2810:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          movsx     D0,	A0
          push      D0
          mov       D0,	`toupper*
          pop       D10
          call      [L3654]	!callff_4
          movsx     D0,	A0
          mov       D1,	[Dframe+32]
          mov       [D1+9],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jz        L2811
          inc       word64 [Dframe+16]
L2811:
          jmp       L2794
L2812:
          mov       D0,	65
          mov       D1,	[Dframe+32]
          mov       [D1+8],	B0
          jmp       L2794
L2813:
          mov       D0,	97
          mov       D1,	[Dframe+32]
          mov       [D1+8],	B0
          jmp       L2794
L2814:
          mov       D0,	48
          mov       D1,	[Dframe+32]
          mov       [D1+4],	B0
          jmp       L2794
L2815:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+32]
          mov       [D1+7],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jz        L2816
          inc       word64 [Dframe+16]
L2816:
          jmp       L2794
L2817:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+32]
          mov       [D1+4],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jz        L2818
          inc       word64 [Dframe+16]
L2818:
          jmp       L2794
L2819:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	[Dframe+32]
          mov       [D1+10],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jz        L2820
          inc       word64 [Dframe+16]
L2820:
          jmp       L2794
L2821:
          mov       D0,	87
          mov       D1,	[Dframe+32]
          mov       [D1+11],	B0
          jmp       L2794
L2822:
          mov       D0,	101
          mov       D1,	[Dframe+32]
          mov       [D1+5],	B0
          jmp       L2794
L2823:
          mov       D0,	102
          mov       D1,	[Dframe+32]
          mov       [D1+5],	B0
          jmp       L2794
L2824:
          mov       D0,	103
          mov       D1,	[Dframe+32]
          mov       [D1+5],	B0
          jmp       L2794
L2825:
          mov       D0,	1
          mov       [Dframe+-16],	B0
          jmp       L2794
L2826:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	[Dframe+32]
          mov       [D1+7],	B0
          jmp       L2794
L2827:
          mov       D0,	43
          mov       D1,	[Dframe+32]
          mov       [D1+6],	B0
          jmp       L2794
L2828:
          mov       D0,	68
          mov       D1,	[Dframe+32]
          mov       [D1+12],	B0
          jmp       L2794
L2829:
          mov       D0,	67
          mov       D1,	[Dframe+32]
          mov       [D1+12],	B0
          jmp       L2794
L2830:
          mov       D0,	77
          mov       D1,	[Dframe+32]
          mov       [D1+13],	B0
          jmp       L2794
L2831:
          mov       D0,	86
          mov       D1,	[Dframe+32]
          mov       [D1+14],	B0
          jmp       L2794
L2832:
          mov       D0,	[msysnew.fmtparam]
          mov       [Dframe+-24],	D0
          jmp       L2833
          jmp       L2794
L2796:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	48
          cmp       D0,	D1
          jb        L2834
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	57
          cmp       D0,	D1
          ja        L2834
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	48
          sub       D0,	D1
          mov       [Dframe+-24],	D0
L2835:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       [Dframe+-8],	B0
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2837
          jmp       L2836
L2837:
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	48
          cmp       D0,	D1
          jb        L2838
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          mov       D1,	57
          cmp       D0,	D1
          ja        L2838
          inc       word64 [Dframe+16]
          mov       D0,	[Dframe+-24]
          mov       D1,	10
          imul2     D0,	D1
          mov       B1,	[Dframe+-8]
          movzx     D1,	B1
          add       D0,	D1
          mov       D1,	48
          sub       D0,	D1
          mov       [Dframe+-24],	D0
          jmp       L2839
L2838:
          jmp       L2836
L2839:
          jmp       L2835
L2836:
;gotwidth
L2833:
          mov       B0,	[Dframe+-16]
          movzx     D0,	B0
          cmp       D0,	0
          jnz       L2840
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+32]
          mov       [D1],	B0
          mov       D0,	1
          mov       [Dframe+-16],	B0
          jmp       L2841
L2840:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+32]
          mov       [D1+1],	B0
L2841:
L2834:
L2794:
L2792:
          mov       D0,	[Dframe+16]
          movzx     D0,	byte [D0]
          cmp       D0,	0
          jnz       L2791
L2793:
L2788:
;-------------------------------------------------
          add       Dstack,	128
          pop       Dframe
          retn      24
;PROC NEXTFMTCHARS ============================================================
msysnew.nextfmtchars::
L4840:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[msysnew.fmtstr]
          cmp       D0,	0
          jnz       L2843
          mov       D0,	[msysnew.needgap]
          cmp       D0,	0
          jz        L2844
          mov       D0,	32
          push      D0
          call      msysnew.printchar
L2844:
          mov       D0,	0
          mov       [msysnew.needgap],	D0
          add       Dstack,	24
          pop       Dframe
          retn      8
L2843:
          mov       D0,	[msysnew.fmtstr]
          mov       [Dframe+-16],	D0
          mov       D0,	0
          mov       [Dframe+-24],	D0
          jmp       L2846
L2845:
          mov       D0,	[msysnew.fmtstr]
          movzx     D0,	byte [D0]
          mov       [Dframe+-8],	B0
          movzx     D0,	B0
          cmp       D0,	127
          jae       L2850
          jmp       [D0*8+L2849]
          isegment  
L2849:
          dq        L2855
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2851
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2850
          dq        L2859
          csegment  
L2851:
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L2852
          jmp       L2853
L2852:
          inc       word64 [msysnew.fmtstr]
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L2854
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+-16]
          push      D0
          call      msysnew.printstr_n
L2854:
          add       Dstack,	24
          pop       Dframe
          retn      8
          jmp       L2848
L2855:
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L2857
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+-16]
          push      D0
          call      msysnew.printstr_n
          jmp       L2856
L2857:
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jnz       L2858
L2858:
L2856:
          add       Dstack,	24
          pop       Dframe
          retn      8
          jmp       L2848
L2859:
          mov       D0,	[Dframe+-24]
          cmp       D0,	0
          jz        L2860
          push      word64 [Dframe+-24]
          mov       D0,	[Dframe+-16]
          push      D0
          call      msysnew.printstr_n
          mov       D0,	0
          mov       [Dframe+-24],	D0
L2860:
          inc       word64 [msysnew.fmtstr]
          mov       D0,	[msysnew.fmtstr]
          movzx     D0,	byte [D0]
          mov       [Dframe+-8],	B0
          movzx     D0,	B0
          cmp       D0,	0
          jz        L2861
          inc       word64 [msysnew.fmtstr]
          mov       B0,	[Dframe+-8]
          movzx     D0,	B0
          push      D0
          call      msysnew.printchar
L2861:
          mov       D0,	[msysnew.fmtstr]
          mov       [Dframe+-16],	D0
          jmp       L2848
L2850:
;skip
L2853:
          inc       word64 [Dframe+-24]
          inc       word64 [msysnew.fmtstr]
L2848:
L2846:
          mov       D0,	1
          cmp       D0,	0
          jnz       L2845
L2847:
L2842:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      8
;PROC PRINTCHAR ============================================================
msysnew.printchar:
L4841:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[msysnew.outdev]
          mov       D1,	1
          cmp       D0,	D1
          jz        L2864
          mov       D1,	2
          cmp       D0,	D1
          jz        L2865
          mov       D1,	3
          cmp       D0,	D1
          jz        L2866
          jmp       L2867
L2864:
          mov       D0,	[Dframe+16]
          mov       D1,	L4842
          push      D0
          push      D1
          mov       D0,	`printf*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L2863
L2865:
          mov       D0,	[Dframe+16]
          mov       D1,	L4842
          mov       D2,	[msysnew.outchan]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fprintf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          jmp       L2863
L2866:
          mov       D0,	[msysnew.outchan]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1]
          mov       [D1],	B0
          mov       D0,	[Dframe+-8]
          mov       D1,	1
          add       [D0],	D1
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1]
          mov       [D1],	B0
          jmp       L2863
L2867:
L2863:
L2862:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC PRINTSTRN_APP ============================================================
msysnew.printstrn_app::
L4843:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          cmp       D0,	0
          jz        L2869
          mov       D0,	[Dframe+32]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2870
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       D2,	L4844
          push      D0
          push      D1
          push      D2
          mov       D0,	`printf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          jmp       L2871
L2870:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       D2,	L4844
          mov       D3,	[Dframe+32]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fprintf*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
L2871:
L2869:
L2868:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC PRINTSTR_N ============================================================
msysnew.printstr_n::
L4845:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	-1
          cmp       D0,	D1
          jz        L2874
          mov       D1,	0
          cmp       D0,	D1
          jz        L2875
          jmp       L2876
L2874:
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          mov       [Dframe+24],	D0
          jmp       L2873
L2875:
          add       Dstack,	8
          pop       Dframe
          retn      16
          jmp       L2873
L2876:
L2873:
          mov       D0,	[msysnew.outdev]
          mov       D1,	3
          cmp       D0,	D1
          jz        L2878
          mov       D1,	2
          cmp       D0,	D1
          jz        L2879
          mov       D1,	1
          cmp       D0,	D1
          jz        L2880
          jmp       L2881
L2878:
          mov       D0,	[msysnew.outchan]
          mov       [Dframe+-8],	D0
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+16]
          mov       D2,	[Dframe+-8]
          mov       D2,	[D2]
          push      D0
          push      D1
          push      D2
          mov       D0,	`memcpy*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-8]
          mov       D1,	[Dframe+24]
          add       [D0],	D1
          mov       D0,	0
          mov       D1,	[Dframe+-8]
          mov       D1,	[D1]
          mov       [D1],	B0
          jmp       L2877
L2879:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       D2,	L4844
          mov       D3,	[msysnew.outchan]
          push      D0
          push      D1
          push      D2
          push      D3
          mov       D0,	`fprintf*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L3654]	!callff_4
          jmp       L2877
L2880:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          mov       D2,	L4844
          push      D0
          push      D1
          push      D2
          mov       D0,	`printf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          jmp       L2877
L2881:
L2877:
L2872:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      16
;PROC PRINTSTR ============================================================
msysnew.printstr::
L4846:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	[msysnew.outdev]
          mov       D1,	1
          cmp       D0,	D1
          jz        L2884
          mov       D1,	2
          cmp       D0,	D1
          jz        L2885
          mov       D1,	3
          cmp       D0,	D1
          jz        L2886
          jmp       L2887
L2884:
          mov       D0,	[Dframe+16]
          mov       D1,	L4847
          push      D0
          push      D1
          mov       D0,	`printf*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          jmp       L2883
L2885:
          mov       D0,	[Dframe+16]
          mov       D1,	L4847
          mov       D2,	[msysnew.outchan]
          push      D0
          push      D1
          push      D2
          mov       D0,	`fprintf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          jmp       L2883
L2886:
          mov       D0,	[msysnew.outchan]
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+-16]
          mov       D1,	[D1]
          push      D0
          push      D1
          mov       D0,	`strcpy*
          pop       D10
          pop       D11
          call      [L3654]	!callff_4
          mov       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
          pop       D1
          add       [D1],	D0
          jmp       L2883
L2887:
L2883:
L2882:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      8
;PROC M$PRINT_NOGAP ============================================================
msysnew.m$print_nogap::
L4848:
;-------------------------------------------------
          mov       D0,	0
          mov       [msysnew.needgap],	D0
L2888:
;-------------------------------------------------
          ret       
;PROC M$PRINT_NEWLINE ============================================================
msysnew.m$print_newline::
L4849:
;-------------------------------------------------
          mov       D0,	0
          mov       [msysnew.needgap],	D0
          mov       D0,	1
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	L4850
          push      D0
          call      msysnew.printstr
L2889:
;-------------------------------------------------
          ret       
;PROC M$PRINT_STR ============================================================
msysnew.m$print_str::
L4851:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	16
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2891
          mov       D0,	[Dframe+16]
          push      D0
          call      msysnew.printstr
          jmp       L2892
L2891:
          lea       D0,	[Dframe+-16]
          mov       D1,	-1
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          lea       D0,	[Dframe+-16]
          mov       D1,	[Dframe+16]
          push      D0
          push      D1
          call      msysnew.tostr_str
L2892:
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2890:
;-------------------------------------------------
          add       Dstack,	16
          pop       Dframe
          retn      16
;PROC M$PRINT_C8 ============================================================
msysnew.m$print_c8::
L4852:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	64
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	[Dframe+16]
          lea       D1,	[Dframe+-40]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	0
          lea       D1,	[Dframe+-40]
          mov       D2,	2
          mov       [D1+D2-1],	B0
          lea       D0,	[Dframe+-40]
          push      D0
          call      msysnew.printstr
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2893:
;-------------------------------------------------
          add       Dstack,	64
          pop       Dframe
          retn      16
;PROC M$PRINT_R32 ============================================================
msysnew.m$print_r32::
L4853:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          movd      XMM0,	[Dframe+16]
          cvtss2sd  XMM0,	XMM0
          push      D0
          movq      D13,	XMM0
          push      D13
          call      msysnew.m$print_r64
L2894:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC M$PRINT_R64 ============================================================
msysnew.m$print_r64::
L4854:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	376
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2896
          movq      XMM0,	[Dframe+16]
          mov       D0,	L4855
          lea       D1,	[Dframe+-360]
          movq      D13,	XMM0
          push      D13
          push      D0
          push      D1
          mov       D0,	`sprintf*
          pop       D10
          pop       D11
          pop       D12
          movq      XMM2,	D12
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-360]
          push      D0
          call      msysnew.printstr
          jmp       L2897
L2896:
          lea       D0,	[Dframe+-376]
          mov       D1,	-1
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          lea       D0,	[Dframe+-376]
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_r64
L2897:
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2895:
;-------------------------------------------------
          add       Dstack,	376
          pop       Dframe
          retn      16
;PROC M$PRINT_U128 ============================================================
msysnew.m$print_u128::
L4856:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          lea       D0,	[Dframe+-56]
          mov       D1,	-1
          mov       D2,	[Dframe+32]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          mov       D0,	0
          lea       D1,	[Dframe+-56]
          mov       D2,	[Dframe+16]
          mov       D3,	[Dframe+16+8]
          push      D0
          push      D1
          push      D3
          push      D2
          call      msysnew.tostr_u128
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2898:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          retn      24
;PROC M$PRINT_I128 ============================================================
msysnew.m$print_i128::
L4857:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          lea       D0,	[Dframe+-56]
          mov       D1,	-1
          mov       D2,	[Dframe+32]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+16+8]
          mov       D2,	0
          mov       D3,	0
          sub       D0,	D2
          sbb       D1,	D3
          cmp       D1,	0
          jl        L2900
          mov       D0,	0
          lea       D1,	[Dframe+-56]
          mov       D2,	[Dframe+16]
          mov       D3,	[Dframe+16+8]
          push      D0
          push      D1
          push      D3
          push      D2
          call      msysnew.tostr_u128
          jmp       L2901
L2900:
          mov       D0,	1
          lea       D1,	[Dframe+-56]
          mov       D2,	[Dframe+16]
          mov       D3,	[Dframe+16+8]
          xor       D4,	D4
          xor       D5,	D5
          sub       D4,	D2
          sbb       D5,	D3
          push      D0
          push      D1
          push      D5
          push      D4
          call      msysnew.tostr_u128
L2901:
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2899:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          retn      24
;PROC M$PRINT_U64 ============================================================
msysnew.m$print_u64::
L4859:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2903
          mov       D0,	[Dframe+16]
          mov       D1,	L4860
          lea       D2,	[Dframe+-40]
          push      D0
          push      D1
          push      D2
          mov       D0,	`sprintf*
          pop       D10
          pop       D11
          pop       D12
          call      [L3654]	!callff_4
          lea       D0,	[Dframe+-40]
          push      D0
          call      msysnew.printstr
          jmp       L2904
L2903:
          lea       D0,	[Dframe+-56]
          mov       D1,	-1
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          lea       D0,	[Dframe+-56]
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_u64
L2904:
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2902:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          retn      16
;PROC M$PRINT_I64 ============================================================
msysnew.m$print_i64::
L4861:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	64
;-------------------------------------------------
          mov       D0,	0
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2906
          mov       D0,	[Dframe+16]
          mov       D1,	0
          cmp       D0,	D1
          jl        L2907
          mov       D0,	0
          mov       D1,	10
          lea       D2,	[Dframe+-40]
          push      D0
          push      D1
          push      D2
          push      word64 [Dframe+16]
          call      msysnew.u64tostr
          mov       [Dframe+-64],	D0
          jmp       L2908
L2907:
          mov       D0,	45
          lea       D1,	[Dframe+-40]
          mov       D2,	1
          mov       [D1+D2-1],	B0
          mov       D0,	0
          mov       D1,	10
          lea       D2,	[Dframe+-40]
          mov       D3,	2
          lea       D2,	[D2+D3-1]
          mov       D3,	[Dframe+16]
          neg       D3
          push      D0
          push      D1
          push      D2
          push      D3
          call      msysnew.u64tostr
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-64],	D0
L2908:
          push      word64 [Dframe+-64]
          lea       D0,	[Dframe+-40]
          push      D0
          call      msysnew.printstr_n
          jmp       L2909
L2906:
          lea       D0,	[Dframe+-56]
          mov       D1,	-1
          mov       D2,	[Dframe+24]
          push      D0
          push      D1
          push      D2
          call      msysnew.strtofmt
          lea       D0,	[Dframe+-56]
          movzx     D0,	byte [D0+14]
          mov       D1,	86
          cmp       D0,	D1
          jnz       L2910
          mov       D0,	[Dframe+16]
          mov       [msysnew.fmtparam],	D0
          mov       D0,	0
          mov       [msysnew.needgap],	D0
          jmp       L2911
L2910:
          lea       D0,	[Dframe+-56]
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.tostr_i64
L2911:
L2909:
          mov       D0,	1
          mov       [msysnew.needgap],	D0
L2905:
;-------------------------------------------------
          add       Dstack,	64
          pop       Dframe
          retn      16
;PROC M$PRINT_PTR ============================================================
msysnew.m$print_ptr::
L4862:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	24
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2913
          mov       D0,	L4863
          mov       [Dframe+24],	D0
L2913:
          mov       D0,	[Dframe+24]
          push      D0
          push      word64 [Dframe+16]
          call      msysnew.m$print_u64
L2912:
;-------------------------------------------------
          add       Dstack,	24
          pop       Dframe
          retn      16
;PROC M$PRINT_END ============================================================
msysnew.m$print_end::
L4864:
;-------------------------------------------------
          mov       D0,	0
          mov       [msysnew.needgap],	D0
          mov       D0,	1
          push      D0
          call      msysnew.nextfmtchars
          mov       D0,	[msysnew.niostack]
          mov       D1,	0
          cmp       D0,	D1
          jnz       L2915
          ret       
L2915:
          mov       D0,	[msysnew.niostack]
          mov       D0,	[D0*8+msysnew.outchan_stack-8]
          mov       [msysnew.outchan],	D0
          mov       D0,	[msysnew.niostack]
          mov       D0,	[D0*8+msysnew.outdev_stack-8]
          mov       [msysnew.outdev],	D0
          mov       D0,	[msysnew.niostack]
          mov       D0,	[D0*8+msysnew.fmtstr_stack-8]
          mov       [msysnew.fmtstr],	D0
          mov       D0,	[msysnew.niostack]
          movzx     D0,	byte [D0+msysnew.needgap_stack-1]
          mov       [msysnew.needgap],	D0
          dec       word64 [msysnew.niostack]
L2914:
;-------------------------------------------------
          ret       
;PROC M$PRINT_SETFMT ============================================================
msysnew.m$print_setfmt::
L4865:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       [msysnew.fmtstr],	D0
L2916:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$PRINT_STARTCON ============================================================
msysnew.m$print_startcon::
L4866:
;-------------------------------------------------
          call      msysnew.pushio
          mov       D0,	1
          mov       [msysnew.outdev],	D0
L2917:
;-------------------------------------------------
          ret       
;PROC M$PRINT_STARTPTR ============================================================
msysnew.m$print_startptr::
L4867:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      msysnew.pushio
          mov       D0,	[Dframe+16]
          mov       [msysnew.outchan],	D0
          mov       D0,	3
          mov       [msysnew.outdev],	D0
L2918:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$PRINT_STARTSTR ============================================================
msysnew.m$print_startstr::
L4868:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          call      msysnew.pushio
          mov       D0,	[Dframe+16]
          lea       D1,	[msysnew.ptr_stack]
          mov       D2,	[msysnew.niostack]
          mov       [D1+D2*8-8],	D0
          lea       D0,	[msysnew.ptr_stack]
          mov       D1,	[msysnew.niostack]
          lea       D0,	[D0+D1*8-8]
          mov       [Dframe+-8],	D0
          mov       [msysnew.outchan],	D0
          mov       D0,	3
          mov       [msysnew.outdev],	D0
L2919:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      8
;PROC M$PRINT_STARTFILE ============================================================
msysnew.m$print_startfile::
L4869:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          call      msysnew.pushio
          mov       D0,	[Dframe+16]
          mov       [msysnew.outchan],	D0
          mov       D0,	[Dframe+16]
          cmp       D0,	0
          jz        L2921
          mov       D0,	2
          mov       [msysnew.outdev],	D0
          jmp       L2922
L2921:
          mov       D0,	1
          mov       [msysnew.outdev],	D0
L2922:
L2920:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC PUSHIO ============================================================
msysnew.pushio:
L4870:
;-------------------------------------------------
          mov       D0,	[msysnew.niostack]
          mov       D1,	10
          cmp       D0,	D1
          jl        L2924
          mov       D0,	L4871
          push      D0
          mov       D0,	`printf*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	53
          push      D0
          call      [L3674]	!stop
L2924:
          inc       word64 [msysnew.niostack]
          mov       D0,	[msysnew.outchan]
          lea       D1,	[msysnew.outchan_stack]
          mov       D2,	[msysnew.niostack]
          mov       [D1+D2*8-8],	D0
          mov       D0,	[msysnew.outdev]
          lea       D1,	[msysnew.outdev_stack]
          mov       D2,	[msysnew.niostack]
          mov       [D1+D2*8-8],	D0
          mov       D0,	[msysnew.fmtstr]
          lea       D1,	[msysnew.fmtstr_stack]
          mov       D2,	[msysnew.niostack]
          mov       [D1+D2*8-8],	D0
          mov       D0,	[msysnew.needgap]
          lea       D1,	[msysnew.needgap_stack]
          mov       D2,	[msysnew.niostack]
          mov       [D1+D2-1],	B0
          mov       D0,	0
          mov       [msysnew.needgap],	D0
          mov       D0,	0
          mov       [msysnew.fmtstr],	D0
          mov       D0,	0
          mov       [msysnew.outchan],	D0
L2923:
;-------------------------------------------------
          ret       
;PROC M$GET_PROCEXPORT ============================================================
msysnew.m$get_procexport::
L4872:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;-------------------------------------------------
          lea       D0,	[L4873]
          mov       D1,	[Dframe+16]
          shl       D1,	1
          lea       D0,	[D0+D1*8-16]
L2925:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$GET_NEXPORTS ============================================================
msysnew.m$get_nexports::
L4874:
;-------------------------------------------------
          mov       D0,	[L4875]
L2926:
;-------------------------------------------------
          ret       
;PROC M$GET_PROCADDR ============================================================
msysnew.m$get_procaddr:
L4876:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;-------------------------------------------------
          lea       D0,	[L4877]
          mov       D1,	[Dframe+16]
          mov       D0,	[D0+D1*8-8]
L2927:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$GET_PROCNAME ============================================================
msysnew.m$get_procname:
L4878:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;-------------------------------------------------
          lea       D0,	[L4879]
          mov       D1,	[Dframe+16]
          mov       D0,	[D0+D1*8-8]
L2928:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$GET_NPROCS ============================================================
msysnew.m$get_nprocs:
L4880:
;-------------------------------------------------
          mov       D0,	[L4881]
L2929:
;-------------------------------------------------
          ret       
;PROC M$SETDOTSLICE ============================================================
msysnew.m$setdotslice::
L4882:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	32
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jle       L2931
          call      [L3646]	!print_startcon
          mov       D0,	0
          mov       D1,	L4883
          push      D0
          push      D1
          call      [L3647]	!print_str
          call      [L3649]	!print_newline
          call      [L3650]	!print_end
          mov       D0,	52
          push      D0
          call      [L3674]	!stop
L2931:
          mov       D0,	[Dframe+32]
          mov       D1,	32
          cmp       D0,	D1
          jl        L2932
          mov       D0,	-1
          mov       D1,	[Dframe+32]
          mov       D2,	[Dframe+24]
          sub       D1,	D2
          mov       D2,	1
          add       D1,	D2
          xchg      D1,	D10
          shl       D0,	B10
          not       D0
          mov       D1,	[Dframe+24]
          xchg      D1,	D10
          shl       D0,	B10
          mov       [Dframe+-16],	D0
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	[Dframe+-16]
          not       D1
          and       D0,	D1
          mov       D1,	[Dframe+40]
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          or        D0,	D1
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          jmp       L2933
L2932:
          mov       D0,	[Dframe+16]
          mov       [Dframe+-32],	D0
          mov       D0,	-1
          mov       D1,	[Dframe+32]
          mov       D2,	[Dframe+24]
          sub       D1,	D2
          mov       D2,	1
          add       D1,	D2
          xchg      D1,	D10
          shl       D0,	B10
          not       D0
          mov       D1,	[Dframe+24]
          xchg      D1,	D10
          shl       D0,	B10
          mov       [Dframe+-24],	D0
          mov       D0,	[Dframe+-32]
          movzx     D0,	word32 [D0]
          mov       D1,	[Dframe+-24]
          not       D1
          and       D0,	D1
          mov       D1,	[Dframe+40]
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          or        D0,	D1
          mov       D1,	[Dframe+-32]
          mov       [D1],	A0
L2933:
L2930:
;-------------------------------------------------
          add       Dstack,	32
          pop       Dframe
          retn      32
;PROC M$GETDOTSLICE ============================================================
msysnew.m$getdotslice::
L4884:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	[Dframe+32]
          cmp       D0,	D1
          jl        L2935
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+32]
          xchg      D1,	D10
          shr       D0,	B10
          mov       D1,	-1
          mov       D2,	[Dframe+24]
          mov       D3,	[Dframe+32]
          sub       D2,	D3
          mov       D3,	1
          add       D2,	D3
          xchg      D2,	D10
          shl       D1,	B10
          not       D1
          and       D0,	D1
          jmp       L2936
L2935:
          mov       D0,	[Dframe+16]
          mov       D1,	[Dframe+24]
          xchg      D1,	D10
          shr       D0,	B10
          mov       D1,	-1
          mov       D2,	[Dframe+32]
          mov       D3,	[Dframe+24]
          sub       D2,	D3
          mov       D3,	1
          add       D2,	D3
          xchg      D2,	D10
          shl       D1,	B10
          not       D1
          and       D0,	D1
L2936:
L2934:
;-------------------------------------------------
          pop       Dframe
          retn      24
;PROC M$SETDOTINDEX ============================================================
msysnew.m$setdotindex::
L4885:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	8
;-------------------------------------------------
          mov       D0,	[Dframe+24]
          mov       D1,	32
          cmp       D0,	D1
          jl        L2938
          mov       D0,	[Dframe+16]
          mov       D0,	[D0]
          mov       D1,	1
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          not       D1
          and       D0,	D1
          mov       D1,	[Dframe+32]
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          or        D0,	D1
          mov       D1,	[Dframe+16]
          mov       [D1],	D0
          jmp       L2939
L2938:
          mov       D0,	[Dframe+16]
          mov       [Dframe+-8],	D0
          movzx     D0,	word32 [D0]
          mov       D1,	1
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          not       D1
          and       D0,	D1
          mov       D1,	[Dframe+32]
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          or        D0,	D1
          mov       D1,	[Dframe+-8]
          mov       [D1],	A0
L2939:
L2937:
;-------------------------------------------------
          add       Dstack,	8
          pop       Dframe
          retn      24
;PROC M$GETDOTINDEX ============================================================
msysnew.m$getdotindex::
L4886:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          mov       D1,	1
          mov       D2,	[Dframe+24]
          xchg      D2,	D10
          shl       D1,	B10
          and       D0,	D1
          mov       D1,	[Dframe+24]
          xchg      D1,	D10
          sar       D0,	B10
L2940:
;-------------------------------------------------
          pop       Dframe
          retn      16
;PROC M$LENSTR_STRINGZ ============================================================
msysnew.m$lenstr_stringz::
L4887:
          push      Dframe
          mov       Dframe,	Dstack
;-------------------------------------------------
          mov       D0,	[Dframe+16]
          push      D0
          mov       D0,	`strlen*
          pop       D10
          call      [L3654]	!callff_4
L2941:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$POPCALLBACK ============================================================
msysnew.m$popcallback::
L4888:
;-------------------------------------------------
          mov       A4,	[msysnew.ncallbacks]
          shl       A4,	6
          lea       D4,	[D4+msysnew.callbackstack]
          mov       D4,	[D4]
          mov       D5,	[D4+8]
          mov       D3,	[D4+16]
          mov       D6,	[D4+24]
          mov       D7,	[D4+32]
          mov       D8,	[D4+40]
          mov       D9,	[D4+48]
          dec       word32 [msysnew.ncallbacks]
L2942:
;-------------------------------------------------
          ret       
;PROC M$PUSHCALLBACK ============================================================
msysnew.m$pushcallback::
L4889:
;-------------------------------------------------
          inc       word32 [msysnew.ncallbacks]
          mov       A4,	[msysnew.ncallbacks]
          shl       A4,	6
          lea       D4,	[D4+msysnew.callbackstack]
          mov       [D4],	D4
          mov       [D4+8],	D5
          mov       [D4+16],	D3
          mov       [D4+24],	D6
          mov       [D4+32],	D7
          mov       [D4+40],	D8
          mov       [D4+48],	D9
L2943:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_14 ============================================================
msysnew.m$callff_14::
L4890:
;-------------------------------------------------
          test      Astack,	8
          jz        L2946
;unaligned
L2945:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          pop       D8
          pop       D9
          pop       word64 [msysnew.m$callff_14.p13]
          pop       word64 [msysnew.m$callff_14.p14]
          push      D1
          sub       Dstack,	8
          push      word64 [msysnew.m$callff_14.p14]
          push      word64 [msysnew.m$callff_14.p13]
          push      D9
          push      D8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	120
          ret       
;aligned
L2946:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          pop       D8
          pop       D9
          pop       word64 [msysnew.m$callff_14.p13]
          pop       word64 [msysnew.m$callff_14.p14]
          push      D1
          push      word64 [msysnew.m$callff_14.p14]
          push      word64 [msysnew.m$callff_14.p13]
          push      D9
          push      D8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	112
          ret       
L2944:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_12 ============================================================
msysnew.m$callff_12::
L4891:
;-------------------------------------------------
          test      Astack,	8
          jz        L2949
;unaligned
L2948:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          pop       D8
          pop       D9
          push      D1
          sub       Dstack,	8
          push      D9
          push      D8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	104
          ret       
;aligned
L2949:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          pop       D8
          pop       D9
          push      D1
          push      D9
          push      D8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	96
          ret       
L2947:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_11 ============================================================
msysnew.m$callff_11::
L4892:
;-------------------------------------------------
          test      Astack,	8
          jz        L2952
;unaligned
L2951:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          pop       D8
          push      D1
          sub       Dstack,	8
          push      D8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	96
          ret       
;aligned
L2952:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          pop       D8
          push      D1
          push      D8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	88
          ret       
L2950:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_10 ============================================================
msysnew.m$callff_10::
L4893:
;-------------------------------------------------
          test      Astack,	8
          jz        L2955
;unaligned
L2954:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          push      D1
          sub       Dstack,	8
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	88
          ret       
;aligned
L2955:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          pop       D7
          push      D1
          push      D7
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	80
          ret       
L2953:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_9 ============================================================
msysnew.m$callff_9::
L4894:
;-------------------------------------------------
          test      Astack,	8
          jz        L2958
;unaligned
L2957:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          push      D1
          sub       Dstack,	8
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	80
          ret       
;aligned
L2958:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          pop       D6
          push      D1
          push      D6
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	72
          ret       
L2956:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_8 ============================================================
msysnew.m$callff_8::
L4895:
;-------------------------------------------------
          test      Astack,	8
          jz        L2961
;unaligned
L2960:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          push      D1
          sub       Dstack,	8
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	72
          ret       
;aligned
L2961:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          pop       D5
          push      D1
          push      D5
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	64
          ret       
L2959:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_7 ============================================================
msysnew.m$callff_7::
L4896:
;-------------------------------------------------
          test      Astack,	8
          jz        L2964
;unaligned
L2963:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          push      D1
          sub       Dstack,	8
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	64
          ret       
;aligned
L2964:
          pop       D1
          pop       D2
          pop       D3
          pop       D4
          push      D1
          push      D4
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	56
          ret       
L2962:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_6 ============================================================
msysnew.m$callff_6::
L4897:
;-------------------------------------------------
          test      Astack,	8
          jz        L2967
;unaligned
L2966:
          pop       D1
          pop       D2
          pop       D3
          push      D1
          sub       Dstack,	8
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	56
          ret       
;aligned
L2967:
          pop       D1
          pop       D2
          pop       D3
          push      D1
          push      D3
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	48
          ret       
L2965:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_5 ============================================================
msysnew.m$callff_5::
L4898:
;-------------------------------------------------
          test      Astack,	8
          jz        L2970
;unaligned
L2969:
          pop       D1
          pop       D2
          push      D1
          sub       Dstack,	8
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	48
          ret       
;aligned
L2970:
          pop       D1
          pop       D2
          push      D1
          push      D2
          sub       Dstack,	32
          call      D0
          add       Dstack,	40
          ret       
L2968:
;-------------------------------------------------
          ret       
;PROC M$CALLFF_4 ============================================================
msysnew.m$callff_4::
L4899:
;-------------------------------------------------
          test      Astack,	8
          jz        L2973
;unaligned
L2972:
          sub       Dstack,	40
          call      D0
          add       Dstack,	40
          ret       
;aligned
L2973:
          sub       Dstack,	32
          call      D0
          add       Dstack,	32
          ret       
L2971:
;-------------------------------------------------
          ret       
;PROC M$STOP ============================================================
msysnew.m$stop::
L4900:
          push      Dframe
          mov       Dframe,	Dstack
;GENFRAMEDEF
;-------------------------------------------------
          mov       D10,	[Dframe+16]
          mov       D0,	`exit*
          call      msysnew.m$callff_4
L2974:
;-------------------------------------------------
          pop       Dframe
          retn      8
;PROC M$INIT ============================================================
msysnew.m$init::
L4901:
          push      Dframe
          mov       Dframe,	Dstack
          sub       Dstack,	56
;-------------------------------------------------
          lea       D0,	[msysnew.m$init.startupinfo]
          mov       D1,	0
          lea       D2,	[Dframe+-32]
          lea       D3,	[Dframe+-24]
          lea       D4,	[Dframe+-8]
          push      D0
          push      D1
          push      D2
          push      D3
          push      D4
          mov       D0,	`__getmainargs*
          pop       D10
          pop       D11
          pop       D12
          pop       D13
          call      [L4573]	!callff_5
          movsx     D0,	A0
          mov       [Dframe+-40],	D0
          mov       A0,	[Dframe+-8]
          movsx     D0,	A0
          mov       [msysnew.nsysparams],	D0
          mov       D1,	128
          cmp       D0,	D1
          jle       L2976
          mov       D0,	L4902
          push      D0
          mov       D0,	`printf*
          pop       D10
          call      [L3654]	!callff_4
          mov       D0,	50
          push      D0
          call      [L3674]	!stop
L2976:
          mov       A0,	[Dframe+-8]
          movsx     D0,	A0
          mov       [Dframe+-16],	D0
L2977:
          mov       D0,	1
          mov       [Dframe+-56],	D0
          mov       D0,	[Dframe+-16]
          cmp       D0,	1
          jl        L2980
L2978:
          mov       D0,	[Dframe+-24]
          mov       D1,	[Dframe+-56]
          mov       D0,	[D0+D1*8-8]
          lea       D1,	[msysnew.sysparams]
          mov       D2,	[Dframe+-56]
          mov       [D1+D2*8-8],	D0
L2979:
          mov       D0,	[Dframe+-56]
          mov       D1,	1
          add       D0,	D1
          mov       [Dframe+-56],	D0
          mov       D1,	[Dframe+-16]
          cmp       D0,	D1
          jle       L2978
L2980:
L2975:
;-------------------------------------------------
          add       Dstack,	56
          pop       Dframe
          ret       
;Finished PCL->MCL:
          isegment  
          align     16
;labneg64
L4494:
          dq        -9223372036854775808
          dq        -9223372036854775808
          align     8
L2981:
          db        "lex"
          db        0
L2982:
          db        "parse"
          db        0
L2983:
          db        "gen"
          db        0
L2984:
          db        "obj"
          db        0
L2985:
          db        "exe"
          db        0
L2986:
          db        "mcl"
          db        0
L2987:
          db        "ss"
          db        0
L2988:
          db        "sx"
          db        0
L2989:
          db        "time"
          db        0
L2990:
          db        "s"
          db        0
L2991:
          db        "d"
          db        0
L2992:
          db        "v"
          db        0
L2993:
          db        "q"
          db        0
L2994:
          db        "help"
          db        0
L2995:
          db        "out"
          db        0
L2996:
          db        "main"
          db        0
L2997:
          db        "start"
          db        0
L2998:
          db        "st0"
          db        0
L2999:
          db        "st1"
          db        0
L3000:
          db        "st2"
          db        0
L3001:
          db        "st3"
          db        0
L3002:
          db        "st4"
          db        0
L3003:
          db        "st5"
          db        0
L3004:
          db        "st6"
          db        0
L3005:
          db        "st7"
          db        0
L3006:
          db        "D0"
          db        0
L3007:
          db        "D10"
          db        0
L3008:
          db        "D11"
          db        0
L3009:
          db        "D4"
          db        0
L3010:
          db        "Dstack"
          db        0
L3011:
          db        "Dframe"
          db        0
L3012:
          db        "D5"
          db        0
L3013:
          db        "D3"
          db        0
L3014:
          db        "D12"
          db        0
L3015:
          db        "D13"
          db        0
L3016:
          db        "D1"
          db        0
L3017:
          db        "D2"
          db        0
L3018:
          db        "D6"
          db        0
L3019:
          db        "D7"
          db        0
L3020:
          db        "D8"
          db        0
L3021:
          db        "D9"
          db        0
L3022:
          db        "A0"
          db        0
L3023:
          db        "A10"
          db        0
L3024:
          db        "A11"
          db        0
L3025:
          db        "A4"
          db        0
L3026:
          db        "Astack"
          db        0
L3027:
          db        "Aframe"
          db        0
L3028:
          db        "A5"
          db        0
L3029:
          db        "A3"
          db        0
L3030:
          db        "A12"
          db        0
L3031:
          db        "A13"
          db        0
L3032:
          db        "A1"
          db        0
L3033:
          db        "A2"
          db        0
L3034:
          db        "A6"
          db        0
L3035:
          db        "A7"
          db        0
L3036:
          db        "A8"
          db        0
L3037:
          db        "A9"
          db        0
L3038:
          db        "W0"
          db        0
L3039:
          db        "W10"
          db        0
L3040:
          db        "W11"
          db        0
L3041:
          db        "W4"
          db        0
L3042:
          db        "Wsp"
          db        0
L3043:
          db        "Wbp"
          db        0
L3044:
          db        "W5"
          db        0
L3045:
          db        "W3"
          db        0
L3046:
          db        "W12"
          db        0
L3047:
          db        "W13"
          db        0
L3048:
          db        "W1"
          db        0
L3049:
          db        "W2"
          db        0
L3050:
          db        "W6"
          db        0
L3051:
          db        "W7"
          db        0
L3052:
          db        "W8"
          db        0
L3053:
          db        "W9"
          db        0
L3054:
          db        "B0"
          db        0
L3055:
          db        "B10"
          db        0
L3056:
          db        "B11"
          db        0
L3057:
          db        "B4"
          db        0
L3058:
          db        "B16"
          db        0
L3059:
          db        "B18"
          db        0
L3060:
          db        "B19"
          db        0
L3061:
          db        "B17"
          db        0
L3062:
          db        "B12"
          db        0
L3063:
          db        "B13"
          db        0
L3064:
          db        "B1"
          db        0
L3065:
          db        "B2"
          db        0
L3066:
          db        "B6"
          db        0
L3067:
          db        "B7"
          db        0
L3068:
          db        "B8"
          db        0
L3069:
          db        "B9"
          db        0
L3070:
          db        "B14"
          db        0
L3071:
          db        "B15"
          db        0
L3072:
          db        "B2"
          db        0
L3073:
          db        "B3"
          db        0
L3074:
          db        "rax"
          db        0
L3075:
          db        "rcx"
          db        0
L3076:
          db        "rdx"
          db        0
L3077:
          db        "rbx"
          db        0
L3078:
          db        "rsp"
          db        0
L3079:
          db        "rbp"
          db        0
L3080:
          db        "rsi"
          db        0
L3081:
          db        "rdi"
          db        0
L3082:
          db        "r8"
          db        0
L3083:
          db        "r9"
          db        0
L3084:
          db        "r10"
          db        0
L3085:
          db        "r11"
          db        0
L3086:
          db        "r12"
          db        0
L3087:
          db        "r13"
          db        0
L3088:
          db        "r14"
          db        0
L3089:
          db        "r15"
          db        0
L3090:
          db        "eax"
          db        0
L3091:
          db        "ecx"
          db        0
L3092:
          db        "edx"
          db        0
L3093:
          db        "ebx"
          db        0
L3094:
          db        "esp"
          db        0
L3095:
          db        "ebp"
          db        0
L3096:
          db        "esi"
          db        0
L3097:
          db        "edi"
          db        0
L3098:
          db        "r8d"
          db        0
L3099:
          db        "r9d"
          db        0
L3100:
          db        "r10d"
          db        0
L3101:
          db        "r11d"
          db        0
L3102:
          db        "r12d"
          db        0
L3103:
          db        "r13d"
          db        0
L3104:
          db        "r14d"
          db        0
L3105:
          db        "r15d"
          db        0
L3106:
          db        "ax"
          db        0
L3107:
          db        "cx"
          db        0
L3108:
          db        "dx"
          db        0
L3109:
          db        "bx"
          db        0
L3110:
          db        "sp"
          db        0
L3111:
          db        "bp"
          db        0
L3112:
          db        "si"
          db        0
L3113:
          db        "di"
          db        0
L3114:
          db        "r8w"
          db        0
L3115:
          db        "r9w"
          db        0
L3116:
          db        "r10w"
          db        0
L3117:
          db        "r11w"
          db        0
L3118:
          db        "r12w"
          db        0
L3119:
          db        "r13w"
          db        0
L3120:
          db        "r14w"
          db        0
L3121:
          db        "r15w"
          db        0
L3122:
          db        "al"
          db        0
L3123:
          db        "cl"
          db        0
L3124:
          db        "dl"
          db        0
L3125:
          db        "bl"
          db        0
L3126:
          db        "ah"
          db        0
L3127:
          db        "ch"
          db        0
L3128:
          db        "dh"
          db        0
L3129:
          db        "bh"
          db        0
L3130:
          db        "r8b"
          db        0
L3131:
          db        "r9b"
          db        0
L3132:
          db        "r10b"
          db        0
L3133:
          db        "r11b"
          db        0
L3134:
          db        "r12b"
          db        0
L3135:
          db        "r13b"
          db        0
L3136:
          db        "r14b"
          db        0
L3137:
          db        "r15b"
          db        0
L3138:
          db        "spl"
          db        0
L3139:
          db        "bpl"
          db        0
L3140:
          db        "sil"
          db        0
L3141:
          db        "dil"
          db        0
L3142:
          db        "amreg"
          db        0
L3143:
          db        "ammem"
          db        0
L3144:
          db        "amrel"
          db        0
L3145:
          db        "o"
          db        0
L3146:
          db        "no"
          db        0
L3147:
          db        "b"
          db        0
L3148:
          db        "ae"
          db        0
L3149:
          db        "z"
          db        0
L3150:
          db        "nz"
          db        0
L3151:
          db        "be"
          db        0
L3152:
          db        "a"
          db        0
L3153:
          db        "s"
          db        0
L3154:
          db        "ns"
          db        0
L3155:
          db        "p"
          db        0
L3156:
          db        "np"
          db        0
L3157:
          db        "l"
          db        0
L3158:
          db        "ge"
          db        0
L3159:
          db        "le"
          db        0
L3160:
          db        "g"
          db        0
L3161:
          db        "add"
          db        0
L3162:
          db        "or"
          db        0
L3163:
          db        "adc"
          db        0
L3164:
          db        "sbb"
          db        0
L3165:
          db        "and"
          db        0
L3166:
          db        "sub"
          db        0
L3167:
          db        "xor"
          db        0
L3168:
          db        "cmp"
          db        0
L3169:
          db        "cofflocal_scope"
          db        0
L3170:
          db        "export_scope"
          db        0
L3171:
          db        "import_scope"
          db        0
L3172:
          db        "abs_rel"
          db        0
L3173:
          db        "addr64_rel"
          db        0
L3174:
          db        "addr32_rel"
          db        0
L3175:
          db        "addr32nb_rel"
          db        0
L3176:
          db        "rel32_rel"
          db        0
L3177:
          db        "rel321_rel"
          db        0
L3178:
          db        "rel8_rel"
          db        0
L3179:
          db        "a_none"
          db        0
L3180:
          db        "a_reg"
          db        0
L3181:
          db        "a_imm"
          db        0
L3182:
          db        "a_mem"
          db        0
L3183:
          db        "a_cond"
          db        0
L3184:
          db        "a_xreg"
          db        0
L3185:
          db        "a_string"
          db        0
L3186:
          db        "code_seg"
          db        0
L3187:
          db        "idata_seg"
          db        0
L3188:
          db        "zdata_seg"
          db        0
L3189:
          db        "rodata_seg"
          db        0
L3190:
          db        "impdata_seg"
          db        0
L3191:
          db        "extern_ref"
          db        0
L3192:
          db        "fwd_ref"
          db        0
L3193:
          db        "back_ref"
          db        0
L3194:
          db        "byte"
          db        0
L3195:
          db        "word"
          db        0
L3196:
          db        "word16"
          db        0
L3197:
          db        "word32"
          db        0
L3198:
          db        "dword"
          db        0
L3199:
          db        "word64"
          db        0
L3200:
          db        "qword"
          db        0
L3201:
          db        "word128"
          db        0
L3202:
          db        "cmovo"
          db        0
L3203:
          db        "cmovno"
          db        0
L3204:
          db        "cmovb"
          db        0
L3205:
          db        "cmovae"
          db        0
L3206:
          db        "cmovz"
          db        0
L3207:
          db        "cmovnz"
          db        0
L3208:
          db        "cmovbe"
          db        0
L3209:
          db        "cmova"
          db        0
L3210:
          db        "cmovs"
          db        0
L3211:
          db        "cmovns"
          db        0
L3212:
          db        "cmovp"
          db        0
L3213:
          db        "cmovnp"
          db        0
L3214:
          db        "cmovl"
          db        0
L3215:
          db        "cmovge"
          db        0
L3216:
          db        "cmovle"
          db        0
L3217:
          db        "cmovg"
          db        0
L3218:
          db        "cmovc"
          db        0
L3219:
          db        "cmovnc"
          db        0
L3220:
          db        "seto"
          db        0
L3221:
          db        "setno"
          db        0
L3222:
          db        "setb"
          db        0
L3223:
          db        "setae"
          db        0
L3224:
          db        "setz"
          db        0
L3225:
          db        "setnz"
          db        0
L3226:
          db        "setbe"
          db        0
L3227:
          db        "seta"
          db        0
L3228:
          db        "sets"
          db        0
L3229:
          db        "setns"
          db        0
L3230:
          db        "setp"
          db        0
L3231:
          db        "setnp"
          db        0
L3232:
          db        "setl"
          db        0
L3233:
          db        "setge"
          db        0
L3234:
          db        "setle"
          db        0
L3235:
          db        "setg"
          db        0
L3236:
          db        "setc"
          db        0
L3237:
          db        "setnc"
          db        0
L3238:
          db        "jo"
          db        0
L3239:
          db        "jno"
          db        0
L3240:
          db        "jb"
          db        0
L3241:
          db        "jae"
          db        0
L3242:
          db        "jz"
          db        0
L3243:
          db        "jnz"
          db        0
L3244:
          db        "jbe"
          db        0
L3245:
          db        "ja"
          db        0
L3246:
          db        "js"
          db        0
L3247:
          db        "jns"
          db        0
L3248:
          db        "jp"
          db        0
L3249:
          db        "jnp"
          db        0
L3250:
          db        "jl"
          db        0
L3251:
          db        "jge"
          db        0
L3252:
          db        "jle"
          db        0
L3253:
          db        "jg"
          db        0
L3254:
          db        "jc"
          db        0
L3255:
          db        "jnc"
          db        0
L3256:
          db        "o"
          db        0
L3257:
          db        "no"
          db        0
L3258:
          db        "b"
          db        0
L3259:
          db        "ae"
          db        0
L3260:
          db        "z"
          db        0
L3261:
          db        "nz"
          db        0
L3262:
          db        "be"
          db        0
L3263:
          db        "a"
          db        0
L3264:
          db        "s"
          db        0
L3265:
          db        "ns"
          db        0
L3266:
          db        "p"
          db        0
L3267:
          db        "np"
          db        0
L3268:
          db        "l"
          db        0
L3269:
          db        "ge"
          db        0
L3270:
          db        "le"
          db        0
L3271:
          db        "g"
          db        0
L3272:
          db        "mmx0"
          db        0
L3273:
          db        "mmx1"
          db        0
L3274:
          db        "mmx2"
          db        0
L3275:
          db        "mmx3"
          db        0
L3276:
          db        "mmx4"
          db        0
L3277:
          db        "mmx5"
          db        0
L3278:
          db        "mmx6"
          db        0
L3279:
          db        "mmx7"
          db        0
L3280:
          db        "st0"
          db        0
L3281:
          db        "st1"
          db        0
L3282:
          db        "st2"
          db        0
L3283:
          db        "st3"
          db        0
L3284:
          db        "st4"
          db        0
L3285:
          db        "st5"
          db        0
L3286:
          db        "st6"
          db        0
L3287:
          db        "st7"
          db        0
L3288:
          db        "xmm0"
          db        0
L3289:
          db        "xmm1"
          db        0
L3290:
          db        "xmm2"
          db        0
L3291:
          db        "xmm3"
          db        0
L3292:
          db        "xmm4"
          db        0
L3293:
          db        "xmm5"
          db        0
L3294:
          db        "xmm6"
          db        0
L3295:
          db        "xmm7"
          db        0
L3296:
          db        "xmm8"
          db        0
L3297:
          db        "xmm9"
          db        0
L3298:
          db        "xmm10"
          db        0
L3299:
          db        "xmm11"
          db        0
L3300:
          db        "xmm12"
          db        0
L3301:
          db        "xmm13"
          db        0
L3302:
          db        "xmm14"
          db        0
L3303:
          db        "xmm15"
          db        0
L3304:
          db        "d0"
          db        0
L3305:
          db        "d1"
          db        0
L3306:
          db        "d2"
          db        0
L3307:
          db        "d3"
          db        0
L3308:
          db        "d4"
          db        0
L3309:
          db        "d5"
          db        0
L3310:
          db        "d6"
          db        0
L3311:
          db        "d7"
          db        0
L3312:
          db        "d8"
          db        0
L3313:
          db        "d9"
          db        0
L3314:
          db        "d10"
          db        0
L3315:
          db        "d11"
          db        0
L3316:
          db        "d12"
          db        0
L3317:
          db        "d13"
          db        0
L3318:
          db        "d14"
          db        0
L3319:
          db        "d15"
          db        0
L3320:
          db        "a0"
          db        0
L3321:
          db        "a1"
          db        0
L3322:
          db        "a2"
          db        0
L3323:
          db        "a3"
          db        0
L3324:
          db        "a4"
          db        0
L3325:
          db        "a5"
          db        0
L3326:
          db        "a6"
          db        0
L3327:
          db        "a7"
          db        0
L3328:
          db        "a8"
          db        0
L3329:
          db        "a9"
          db        0
L3330:
          db        "a10"
          db        0
L3331:
          db        "a11"
          db        0
L3332:
          db        "a12"
          db        0
L3333:
          db        "a13"
          db        0
L3334:
          db        "a14"
          db        0
L3335:
          db        "a15"
          db        0
L3336:
          db        "w0"
          db        0
L3337:
          db        "w1"
          db        0
L3338:
          db        "w2"
          db        0
L3339:
          db        "w3"
          db        0
L3340:
          db        "w4"
          db        0
L3341:
          db        "w5"
          db        0
L3342:
          db        "w6"
          db        0
L3343:
          db        "w7"
          db        0
L3344:
          db        "w8"
          db        0
L3345:
          db        "w9"
          db        0
L3346:
          db        "w10"
          db        0
L3347:
          db        "w11"
          db        0
L3348:
          db        "w12"
          db        0
L3349:
          db        "w13"
          db        0
L3350:
          db        "w14"
          db        0
L3351:
          db        "w15"
          db        0
L3352:
          db        "b0"
          db        0
L3353:
          db        "b1"
          db        0
L3354:
          db        "b2"
          db        0
L3355:
          db        "b3"
          db        0
L3356:
          db        "b4"
          db        0
L3357:
          db        "b5"
          db        0
L3358:
          db        "b6"
          db        0
L3359:
          db        "b7"
          db        0
L3360:
          db        "b8"
          db        0
L3361:
          db        "b9"
          db        0
L3362:
          db        "b10"
          db        0
L3363:
          db        "b11"
          db        0
L3364:
          db        "b12"
          db        0
L3365:
          db        "b13"
          db        0
L3366:
          db        "b14"
          db        0
L3367:
          db        "b15"
          db        0
L3368:
          db        "b16"
          db        0
L3369:
          db        "b17"
          db        0
L3370:
          db        "b18"
          db        0
L3371:
          db        "b19"
          db        0
L3372:
          db        "rax"
          db        0
L3373:
          db        "rbx"
          db        0
L3374:
          db        "rcx"
          db        0
L3375:
          db        "rdx"
          db        0
L3376:
          db        "rsi"
          db        0
L3377:
          db        "rdi"
          db        0
L3378:
          db        "rbp"
          db        0
L3379:
          db        "rsp"
          db        0
L3380:
          db        "r8"
          db        0
L3381:
          db        "r9"
          db        0
L3382:
          db        "r10"
          db        0
L3383:
          db        "r11"
          db        0
L3384:
          db        "r12"
          db        0
L3385:
          db        "r13"
          db        0
L3386:
          db        "r14"
          db        0
L3387:
          db        "r15"
          db        0
L3388:
          db        "eax"
          db        0
L3389:
          db        "ebx"
          db        0
L3390:
          db        "ecx"
          db        0
L3391:
          db        "edx"
          db        0
L3392:
          db        "esi"
          db        0
L3393:
          db        "edi"
          db        0
L3394:
          db        "ebp"
          db        0
L3395:
          db        "esp"
          db        0
L3396:
          db        "r8d"
          db        0
L3397:
          db        "r9d"
          db        0
L3398:
          db        "r10d"
          db        0
L3399:
          db        "r11d"
          db        0
L3400:
          db        "r12d"
          db        0
L3401:
          db        "r13d"
          db        0
L3402:
          db        "r14d"
          db        0
L3403:
          db        "r15d"
          db        0
L3404:
          db        "ax"
          db        0
L3405:
          db        "bx"
          db        0
L3406:
          db        "cx"
          db        0
L3407:
          db        "dx"
          db        0
L3408:
          db        "si"
          db        0
L3409:
          db        "di"
          db        0
L3410:
          db        "bp"
          db        0
L3411:
          db        "sp"
          db        0
L3412:
          db        "r8w"
          db        0
L3413:
          db        "r9w"
          db        0
L3414:
          db        "r10w"
          db        0
L3415:
          db        "r11w"
          db        0
L3416:
          db        "r12w"
          db        0
L3417:
          db        "r13w"
          db        0
L3418:
          db        "r14w"
          db        0
L3419:
          db        "r15w"
          db        0
L3420:
          db        "al"
          db        0
L3421:
          db        "bl"
          db        0
L3422:
          db        "cl"
          db        0
L3423:
          db        "dl"
          db        0
L3424:
          db        "ah"
          db        0
L3425:
          db        "bh"
          db        0
L3426:
          db        "ch"
          db        0
L3427:
          db        "dh"
          db        0
L3428:
          db        "sil"
          db        0
L3429:
          db        "dil"
          db        0
L3430:
          db        "bpl"
          db        0
L3431:
          db        "spl"
          db        0
L3432:
          db        "r8b"
          db        0
L3433:
          db        "r9b"
          db        0
L3434:
          db        "r10b"
          db        0
L3435:
          db        "r11b"
          db        0
L3436:
          db        "r12b"
          db        0
L3437:
          db        "r13b"
          db        0
L3438:
          db        "r14b"
          db        0
L3439:
          db        "r15b"
          db        0
L3440:
          db        "rnone"
          db        0
L3441:
          db        "r0"
          db        0
L3442:
          db        "r1"
          db        0
L3443:
          db        "r2"
          db        0
L3444:
          db        "r3"
          db        0
L3445:
          db        "r4"
          db        0
L3446:
          db        "r5"
          db        0
L3447:
          db        "r6"
          db        0
L3448:
          db        "r7"
          db        0
L3449:
          db        "r8"
          db        0
L3450:
          db        "r9"
          db        0
L3451:
          db        "r10"
          db        0
L3452:
          db        "r11"
          db        0
L3453:
          db        "r12"
          db        0
L3454:
          db        "r13"
          db        0
L3455:
          db        "r14"
          db        0
L3456:
          db        "r15"
          db        0
L3457:
          db        "r16"
          db        0
L3458:
          db        "r17"
          db        0
L3459:
          db        "r18"
          db        0
L3460:
          db        "r19"
          db        0
L3461:
          db        "m_comment"
          db        0
L3462:
          db        "m_blank"
          db        0
L3463:
          db        "m_end"
          db        0
L3464:
          db        "m_label"
          db        0
L3465:
          db        "m_nop"
          db        0
L3466:
          db        "m_param"
          db        0
L3467:
          db        "m_assem"
          db        0
L3468:
          db        "m_proc"
          db        0
L3469:
          db        "m_mov"
          db        0
L3470:
          db        "m_push"
          db        0
L3471:
          db        "m_pop"
          db        0
L3472:
          db        "m_lea"
          db        0
L3473:
          db        "m_cmovcc"
          db        0
L3474:
          db        "m_movd"
          db        0
L3475:
          db        "m_movq"
          db        0
L3476:
          db        "m_movsx"
          db        0
L3477:
          db        "m_movzx"
          db        0
L3478:
          db        "m_movsxd"
          db        0
L3479:
          db        "m_call"
          db        0
L3480:
          db        "m_ret"
          db        0
L3481:
          db        "m_retn"
          db        0
L3482:
          db        "m_jmp"
          db        0
L3483:
          db        "m_jmpcc"
          db        0
L3484:
          db        "m_xchg"
          db        0
L3485:
          db        "m_add"
          db        0
L3486:
          db        "m_sub"
          db        0
L3487:
          db        "m_adc"
          db        0
L3488:
          db        "m_sbb"
          db        0
L3489:
          db        "m_imul"
          db        0
L3490:
          db        "m_mul"
          db        0
L3491:
          db        "m_imul2"
          db        0
L3492:
          db        "m_imul3"
          db        0
L3493:
          db        "m_idiv"
          db        0
L3494:
          db        "m_div"
          db        0
L3495:
          db        "m_and"
          db        0
L3496:
          db        "m_or"
          db        0
L3497:
          db        "m_xor"
          db        0
L3498:
          db        "m_test"
          db        0
L3499:
          db        "m_cmp"
          db        0
L3500:
          db        "m_shl"
          db        0
L3501:
          db        "m_sar"
          db        0
L3502:
          db        "m_shr"
          db        0
L3503:
          db        "m_rol"
          db        0
L3504:
          db        "m_ror"
          db        0
L3505:
          db        "m_rcl"
          db        0
L3506:
          db        "m_rcr"
          db        0
L3507:
          db        "m_neg"
          db        0
L3508:
          db        "m_not"
          db        0
L3509:
          db        "m_inc"
          db        0
L3510:
          db        "m_dec"
          db        0
L3511:
          db        "m_cbw"
          db        0
L3512:
          db        "m_cwd"
          db        0
L3513:
          db        "m_cdq"
          db        0
L3514:
          db        "m_cqo"
          db        0
L3515:
          db        "m_setcc"
          db        0
L3516:
          db        "m_bsf"
          db        0
L3517:
          db        "m_bsr"
          db        0
L3518:
          db        "m_sqrtsd"
          db        0
L3519:
          db        "m_sqrtss"
          db        0
L3520:
          db        "m_addss"
          db        0
L3521:
          db        "m_subss"
          db        0
L3522:
          db        "m_mulss"
          db        0
L3523:
          db        "m_divss"
          db        0
L3524:
          db        "m_addsd"
          db        0
L3525:
          db        "m_subsd"
          db        0
L3526:
          db        "m_mulsd"
          db        0
L3527:
          db        "m_divsd"
          db        0
L3528:
          db        "m_comiss"
          db        0
L3529:
          db        "m_comisd"
          db        0
L3530:
          db        "m_xorpd"
          db        0
L3531:
          db        "m_xorps"
          db        0
L3532:
          db        "m_andpd"
          db        0
L3533:
          db        "m_andps"
          db        0
L3534:
          db        "m_pxor"
          db        0
L3535:
          db        "m_pand"
          db        0
L3536:
          db        "m_cvtss2si"
          db        0
L3537:
          db        "m_cvtsd2si"
          db        0
L3538:
          db        "m_cvttss2si"
          db        0
L3539:
          db        "m_cvttsd2si"
          db        0
L3540:
          db        "m_cvtsi2ss"
          db        0
L3541:
          db        "m_cvtsi2sd"
          db        0
L3542:
          db        "m_cvtsd2ss"
          db        0
L3543:
          db        "m_cvtss2sd"
          db        0
L3544:
          db        "m_movdqa"
          db        0
L3545:
          db        "m_movdqu"
          db        0
L3546:
          db        "m_pcmpistri"
          db        0
L3547:
          db        "m_pcmpistrm"
          db        0
L3548:
          db        "m_fld"
          db        0
L3549:
          db        "m_fst"
          db        0
L3550:
          db        "m_fstp"
          db        0
L3551:
          db        "m_fild"
          db        0
L3552:
          db        "m_fist"
          db        0
L3553:
          db        "m_fistp"
          db        0
L3554:
          db        "m_fadd"
          db        0
L3555:
          db        "m_fsub"
          db        0
L3556:
          db        "m_fmul"
          db        0
L3557:
          db        "m_fdiv"
          db        0
L3558:
          db        "m_fsqrt"
          db        0
L3559:
          db        "m_fsin"
          db        0
L3560:
          db        "m_fcos"
          db        0
L3561:
          db        "m_fsincos"
          db        0
L3562:
          db        "m_fptan"
          db        0
L3563:
          db        "m_fpatan"
          db        0
L3564:
          db        "m_fabs"
          db        0
L3565:
          db        "m_fchs"
          db        0
L3566:
          db        "m_minss"
          db        0
L3567:
          db        "m_maxss"
          db        0
L3568:
          db        "m_minsd"
          db        0
L3569:
          db        "m_maxsd"
          db        0
L3570:
          db        "m_db"
          db        0
L3571:
          db        "m_dw"
          db        0
L3572:
          db        "m_dd"
          db        0
L3573:
          db        "m_dq"
          db        0
L3574:
          db        "m_ddoffset"
          db        0
L3575:
          db        "m_segment"
          db        0
L3576:
          db        "m_isegment"
          db        0
L3577:
          db        "m_zsegment"
          db        0
L3578:
          db        "m_csegment"
          db        0
L3579:
          db        "m_align"
          db        0
L3580:
          db        "m_resb"
          db        0
L3581:
          db        "m_resw"
          db        0
L3582:
          db        "m_resd"
          db        0
L3583:
          db        "m_resq"
          db        0
L3584:
          db        "m_xlat"
          db        0
L3585:
          db        "m_loopnz"
          db        0
L3586:
          db        "m_loopz"
          db        0
L3587:
          db        "m_loopcx"
          db        0
L3588:
          db        "m_jecxz"
          db        0
L3589:
          db        "m_jrcxz"
          db        0
L3590:
          db        "m_cmpsb"
          db        0
L3591:
          db        "m_cmpsw"
          db        0
L3592:
          db        "m_cmpsd"
          db        0
L3593:
          db        "m_cmpsq"
          db        0
L3594:
          db        "m_rdtsc"
          db        0
L3595:
          db        "m_popcnt"
          db        0
L3596:
          db        "m_finit"
          db        0
L3597:
          db        "m_fldz"
          db        0
L3598:
          db        "m_fld1"
          db        0
L3599:
          db        "m_fldpi"
          db        0
L3600:
          db        "m_fld2t"
          db        0
L3601:
          db        "m_fld2e"
          db        0
L3602:
          db        "m_fldlg2"
          db        0
L3603:
          db        "m_fldln2"
          db        0
L3604:
          db        "m_halt"
          db        0
L3605:
          db        "errorsym"
          db        0
L3606:
          db        "commasym"
          db        0
L3607:
          db        "colonsym"
          db        0
L3608:
          db        "dcolonsym"
          db        0
L3609:
          db        "lsqsym"
          db        0
L3610:
          db        "rsqsym"
          db        0
L3611:
          db        "addsym"
          db        0
L3612:
          db        "subsym"
          db        0
L3613:
          db        "mulsym"
          db        0
L3614:
          db        "eqsym"
          db        0
L3615:
          db        "eolsym"
          db        0
L3616:
          db        "eofsym"
          db        0
L3617:
          db        "hashsym"
          db        0
L3618:
          db        "intconstsym"
          db        0
L3619:
          db        "realconstsym"
          db        0
L3620:
          db        "stringconstsym"
          db        0
L3621:
          db        "namesym"
          db        0
L3622:
          db        "namedconstsym"
          db        0
L3623:
          db        "fwdlocalsym"
          db        0
L3624:
          db        "localsym"
          db        0
L3625:
          db        "importedsym"
          db        0
L3626:
          db        "exportedsym"
          db        0
L3627:
          db        "kopcodesym"
          db        0
L3628:
          db        "kregsym"
          db        0
L3629:
          db        "kxregsym"
          db        0
L3630:
          db        "kfregsym"
          db        0
L3631:
          db        "kmregsym"
          db        0
L3632:
          db        "kjmpccsym"
          db        0
L3633:
          db        "ksetccsym"
          db        0
L3634:
          db        "kmovccsym"
          db        0
L3635:
          db        "kprefixsym"
          db        0
L3636:
          db        "ksegnamesym"
          db        0
L3637:
          db        "kdummysym"
          db        0
L3638:
          db        "pm_end"
          db        0
L3639:
          db        "pm_option"
          db        0
L3640:
          db        "pm_sourcefile"
          db        0
L3641:
          db        "pm_libfile"
          db        0
L3642:
          db        "pm_colon"
          db        0
L3643:
          db        "pm_extra"
          db        0
L3651:
          db        "Multiply-defined global: %s"
          db        0
L3657:
          db        "Modules:"
          db        0
L3659:
          db        "  "
          db        0
L3661:
          db        ":"
          db        0
L3662:
          db        " "
          db        0
L3663:
          db        "Search Libs:"
          db        0
L3664:
          db        "  "
          db        0
L3665:
          db        ":"
          db        0
L3667:
          db        "Too many libraries"
          db        0
L3669:
          db        "Too many modules"
          db        0
L3670:
          db        "<empty>"
          db        0
L3673:
          db        "Error:"
          db        0
L3676:
          db        "AX Assembler/Linker"
          db        0
L3677:
          db        "20-Jun-2020"
          db        0
L3679:
          db        "'AX' Assembler-Linker for Win64"
          db        13
          db        10
          db        13
          db        10
          db        "Assembles ASM files written in a special syntax to OBJ or EXE format."
          db        13
          db        10
          db        13
          db        10
          db        "Usage:"
          db        13
          db        10
          db        13
          db        10
          db        9
          db        "ax prog            Assemble prog.asm to prog.exe"
          db        13
          db        10
          db        9
          db        "ax prog -obj       Assemble prog.asm to prog.obj (needs ext. linker)"
          db        13
          db        10
          db        13
          db        10
          db        9
          db        "ax a b c           Assemble&link modules a.asm, b.asm, c.asm into a.exe"
          db        13
          db        10
          db        13
          db        10
          db        "Options:"
          db        13
          db        10
          db        13
          db        10
          db        9
          db        "-out:file          Name output file (default is .exe applied to 1st module)"
          db        13
          db        10
          db        9
          db        "-out:exe           Generate executable (default)"
          db        13
          db        10
          db        9
          db        "-out:obj           Generate object file (one .obj file for multiple i/p files)"
          db        13
          db        10
          db        9
          db        "file.dll           Include library in list of DLLs to search"
          db        13
          db        10
          db        13
          db        10
          db        "Can only link to external DLL libraries; not other .o/.obj/.lib/.a files."
          db        13
          db        10
          db        13
          db        10
          db        "DLLs msvcrt.dll, user32.dll, gdi32.dll, user32.dll are automatically included."
          db        13
          db        10
          db        "But if at least one .dll file is specified, the list is cleared, so may need"
          db        13
          db        10
          db        "to specify msvcrt.dll etc as needed."
          db        13
          db        10
          db        13
          db        10
          db        0
L3682:
          db        "Unknown option:"
          db        0
L3683:
          db        ".asm"
          db        0
L3684:
          db        "Usage:"
          db        0
L3685:
          db        9
          db        0
L3686:
          db        "filename[.asm]           # Assemble filename.asm to filename.obj"
          db        0
L3687:
          db        9
          db        0
L3688:
          db        "-help                    # Show options"
          db        0
L3689:
          db        "msvcrt"
          db        0
L3690:
          db        "gdi32"
          db        0
L3691:
          db        "user32"
          db        0
L3692:
          db        "kernel32"
          db        0
L3693:
          db        "No input files specified"
          db        0
L3698:
          db        "\m\ed.bat"
          db        0
L3699:
          db        "mx.log"
          db        0
L3701:
          db        "w"
          db        0
L3702:
          db        "mx.log"
          db        0
L3705:
          db        "Couldn't assemble - press key"
          db        0
L3707:
          db        "Can't load file: %s"
          db        0
L3710:
          db        "lex test/multi files"
          db        0
L3711:
          db        "exe"
          db        0
L3712:
          db        "obj"
          db        0
L3713:
          db        "Assembling"
          db        0
L3714:
          db        "to"
          db        0
L3715:
          db        "Assembling/linking to"
          db        0
L3716:
          db        "Time"
          db        0
L3718:
          db        ".bss"
          db        0
L3719:
          db        "Too many relocs (exceeds 16-bit field)"
          db        0
L3720:
          db        ".data"
          db        0
L3721:
          db        ".text"
          db        0
L3722:
          db        "Writing file:"
          db        0
L3725:
          db        "W:too many strings"
          db        0
L3729:
          db        ".file"
          db        0
L3730:
          db        ".bss"
          db        0
L3731:
          db        ".data"
          db        0
L3732:
          db        ".text"
          db        0
L3734:
          db        "as:Too many symbols"
          db        0
L3740:
          db        "wrelocs/bad seg"
          db        0
L3746:
          db        "f"
          db        0
L3747:
          db        "i"
          db        0
L3748:
          db        " "
          db        0
L3750:
          db        "p"
          db        0
L3751:
          db        " "
          db        0
L3752:
          db        "st0, "
          db        0
L3753:
          db        ", st0"
          db        0
L3755:
          db        "fcompp"
          db        0
L3756:
          db        "ftst"
          db        0
L3757:
          db        "fxam"
          db        0
L3758:
          db        "fldz"
          db        0
L3759:
          db        "fld1"
          db        0
L3760:
          db        "fldpi"
          db        0
L3761:
          db        "fldl2t"
          db        0
L3762:
          db        "fldl2e"
          db        0
L3763:
          db        "fldlg2"
          db        0
L3764:
          db        "fldln2"
          db        0
L3765:
          db        "fsqrt"
          db        0
L3766:
          db        "fsin"
          db        0
L3767:
          db        "fcos"
          db        0
L3768:
          db        "fsincos"
          db        0
L3769:
          db        "fscale"
          db        0
L3770:
          db        "fprem"
          db        0
L3771:
          db        "frndint"
          db        0
L3772:
          db        "fxtract"
          db        0
L3773:
          db        "fabs"
          db        0
L3774:
          db        "fchs"
          db        0
L3775:
          db        "fptan"
          db        0
L3776:
          db        "fpatan"
          db        0
L3777:
          db        "f2xm1"
          db        0
L3778:
          db        "fyl2x"
          db        0
L3779:
          db        "fyl2xp1"
          db        0
L3780:
          db        "finit"
          db        0
L3781:
          db        "feni"
          db        0
L3782:
          db        "fdisi"
          db        0
L3783:
          db        "fclex"
          db        0
L3784:
          db        "fincstp"
          db        0
L3785:
          db        "fdecstp"
          db        0
L3786:
          db        "fnop"
          db        0
L3787:
          db        "fld "
          db        0
L3788:
          db        "fst "
          db        0
L3789:
          db        "fstp "
          db        0
L3790:
          db        "fxch "
          db        0
L3791:
          db        "fcom "
          db        0
L3792:
          db        "fcomp "
          db        0
L3793:
          db        "ffree "
          db        0
L3794:
          db        "fadd"
          db        0
L3795:
          db        "fsub"
          db        0
L3796:
          db        "fsubr"
          db        0
L3797:
          db        "fmul"
          db        0
L3798:
          db        "fdiv"
          db        0
L3799:
          db        "fdivr"
          db        0
L3800:
          db        "fld"
          db        0
L3801:
          db        "fldbcd"
          db        0
L3802:
          db        "fstp"
          db        0
L3803:
          db        "fstpbcd"
          db        0
L3804:
          db        "fldcw"
          db        0
L3805:
          db        "fstcw"
          db        0
L3806:
          db        "fstsw"
          db        0
L3807:
          db        "fstenv"
          db        0
L3808:
          db        "fldenv"
          db        0
L3809:
          db        "fsave"
          db        0
L3810:
          db        "frstor"
          db        0
L3811:
          db        "fld"
          db        0
L3812:
          db        "fst"
          db        0
L3813:
          db        "fstp"
          db        0
L3814:
          db        "fcom"
          db        0
L3815:
          db        "fcomp"
          db        0
L3816:
          db        "fadd"
          db        0
L3817:
          db        "fsub"
          db        0
L3818:
          db        "fsubr"
          db        0
L3819:
          db        "fmul"
          db        0
L3820:
          db        "fdiv"
          db        0
L3821:
          db        "fdivr"
          db        0
L3822:
          db        "UNKNOWN x87 OPCODE"
          db        0
L3824:
          db        "mmx"
          db        0
L3826:
          db        "xmm"
          db        0
L3830:
          db        "h"
          db        0
L3834:
          db        " "
          db        0
L3835:
          db        "byte "
          db        0
L3836:
          db        "word "
          db        0
L3837:
          db        "dword "
          db        0
L3838:
          db        "qword "
          db        0
L3839:
          db        "tword "
          db        0
L3840:
          db        "oword "
          db        0
L3841:
          db        "///OPSIZE"
          db        0
L3842:
          db        "["
          db        0
L3843:
          db        0
L3844:
          db        "+"
          db        0
L3845:
          db        "*"
          db        0
L3846:
          db        "+"
          db        0
L3847:
          db        "]"
          db        0
L3848:
          db        "+RIP"
          db        0
L3851:
          db        "<>"
          db        0
L3852:
          db        0
L3863:
          db        "cvtsi2ss "
          db        0
L3864:
          db        "cvtsi2sd "
          db        0
L3865:
          db        ", "
          db        0
L3866:
          db        "cvttss2si "
          db        0
L3867:
          db        "cvttsd2si "
          db        0
L3868:
          db        ", "
          db        0
L3869:
          db        "cvtss2si "
          db        0
L3870:
          db        "cvtsd2si "
          db        0
L3871:
          db        ", "
          db        0
L3872:
          db        "comisd "
          db        0
L3873:
          db        "comiss "
          db        0
L3874:
          db        ", "
          db        0
L3875:
          db        "pcmpistri "
          db        0
L3876:
          db        "pcmpistrm "
          db        0
L3877:
          db        "Unknown opcode 2-byte opcode: 0F "
          db        0
L3878:
          db        ", "
          db        0
L3879:
          db        "cmov"
          db        0
L3880:
          db        " "
          db        0
L3881:
          db        ", "
          db        0
L3882:
          db        "sqrtss "
          db        0
L3883:
          db        "sqrtsd "
          db        0
L3884:
          db        ", "
          db        0
L3885:
          db        "andpd "
          db        0
L3886:
          db        "andps "
          db        0
L3887:
          db        ", "
          db        0
L3888:
          db        "xorpd "
          db        0
L3889:
          db        "xorps "
          db        0
L3890:
          db        ", "
          db        0
L3891:
          db        "adds"
          db        0
L3892:
          db        "d "
          db        0
L3893:
          db        "s "
          db        0
L3894:
          db        ", "
          db        0
L3895:
          db        "muls"
          db        0
L3896:
          db        "cvtss2sd "
          db        0
L3897:
          db        "cvtsd2ss "
          db        0
L3898:
          db        ", "
          db        0
L3899:
          db        "subs"
          db        0
L3900:
          db        "mins"
          db        0
L3901:
          db        "divs"
          db        0
L3902:
          db        "maxs"
          db        0
L3903:
          db        "movd "
          db        0
L3904:
          db        "movq "
          db        0
L3905:
          db        ", "
          db        0
L3906:
          db        "movdqa "
          db        0
L3907:
          db        "movdqu "
          db        0
L3908:
          db        "No 66/F3 "
          db        0
L3909:
          db        ", "
          db        0
L3910:
          db        "movq "
          db        0
L3911:
          db        ", "
          db        0
L3912:
          db        "movq "
          db        0
L3913:
          db        ", "
          db        0
L3914:
          db        "movd "
          db        0
L3915:
          db        ", "
          db        0
L3916:
          db        "movdqa "
          db        0
L3917:
          db        "movdqu "
          db        0
L3918:
          db        "No 66/F3 "
          db        0
L3919:
          db        ", "
          db        0
L3920:
          db        "[long] j"
          db        0
L3921:
          db        " "
          db        0
L3922:
          db        "set"
          db        0
L3923:
          db        " "
          db        0
L3924:
          db        "imul "
          db        0
L3925:
          db        ", "
          db        0
L3926:
          db        "movzx "
          db        0
L3927:
          db        "movsx "
          db        0
L3928:
          db        ", "
          db        0
L3929:
          db        "popcnt "
          db        0
L3930:
          db        ", "
          db        0
L3931:
          db        "bsf "
          db        0
L3932:
          db        "bsr "
          db        0
L3933:
          db        ", "
          db        0
L3934:
          db        "movq "
          db        0
L3935:
          db        ","
          db        0
L3936:
          db        "pand "
          db        0
L3937:
          db        ", "
          db        0
L3938:
          db        "pxor "
          db        0
L3939:
          db        ", "
          db        0
L3940:
          db        "Unknown opcode 2-byte opcode: 0F "
          db        0
L3942:
          db        ", "
          db        0
L3943:
          db        " "
          db        0
L3944:
          db        ", "
          db        0
L3945:
          db        " "
          db        0
L3946:
          db        ", "
          db        0
L3947:
          db        "push "
          db        0
L3948:
          db        "pop "
          db        0
L3949:
          db        "movsxd "
          db        0
L3950:
          db        ", "
          db        0
L3951:
          db        "push "
          db        0
L3952:
          db        "imul3"
          db        0
L3953:
          db        " "
          db        0
L3954:
          db        ", "
          db        0
L3955:
          db        "imul2"
          db        0
L3956:
          db        ", "
          db        0
L3957:
          db        "j"
          db        0
L3958:
          db        " "
          db        0
L3959:
          db        ", "
          db        0
L3960:
          db        "test "
          db        0
L3961:
          db        ", "
          db        0
L3962:
          db        "exch2 "
          db        0
L3963:
          db        ","
          db        0
L3964:
          db        "mov"
          db        0
L3965:
          db        ", "
          db        0
L3966:
          db        "mov "
          db        0
L3967:
          db        ", "
          db        0
L3968:
          db        "lea "
          db        0
L3969:
          db        ", "
          db        0
L3970:
          db        "pop"
          db        0
L3971:
          db        "nop"
          db        0
L3972:
          db        "xchg "
          db        0
L3973:
          db        ", "
          db        0
L3974:
          db        "cbw"
          db        0
L3975:
          db        "cbw???"
          db        0
L3976:
          db        "cwd"
          db        0
L3977:
          db        "cqo"
          db        0
L3978:
          db        "cdq"
          db        0
L3979:
          db        "wait"
          db        0
L3980:
          db        "pushf"
          db        0
L3981:
          db        "popf"
          db        0
L3982:
          db        "sahf"
          db        0
L3983:
          db        "lahf"
          db        0
L3984:
          db        "?"
          db        0
L3985:
          db        "movs"
          db        0
L3986:
          db        "cmps"
          db        0
L3987:
          db        "?"
          db        0
L3988:
          db        "stos"
          db        0
L3989:
          db        "lods"
          db        0
L3990:
          db        "scas"
          db        0
L3991:
          db        "?"
          db        0
L3992:
          db        "b"
          db        0
L3993:
          db        "q"
          db        0
L3994:
          db        "w"
          db        0
L3995:
          db        "d"
          db        0
L3996:
          db        "test "
          db        0
L3997:
          db        ", "
          db        0
L3998:
          db        "mov "
          db        0
L3999:
          db        ", "
          db        0
L4000:
          db        "rol"
          db        0
L4001:
          db        "ror"
          db        0
L4002:
          db        "rcl"
          db        0
L4003:
          db        "rcr"
          db        0
L4004:
          db        "shl"
          db        0
L4005:
          db        "shr"
          db        0
L4006:
          db        "?"
          db        0
L4007:
          db        "sar"
          db        0
L4008:
          db        "?"
          db        0
L4009:
          db        ", "
          db        0
L4010:
          db        ", cl"
          db        0
L4011:
          db        ", 1"
          db        0
L4012:
          db        "retn "
          db        0
L4013:
          db        "ret"
          db        0
L4014:
          db        "mov"
          db        0
L4015:
          db        ", "
          db        0
L4016:
          db        "xlat"
          db        0
L4017:
          db        "loopnz "
          db        0
L4018:
          db        "loopz "
          db        0
L4019:
          db        "loop "
          db        0
L4020:
          db        "jecxz "
          db        0
L4021:
          db        "jrcxz "
          db        0
L4022:
          db        "call "
          db        0
L4023:
          db        "[4] jmp "
          db        0
L4024:
          db        "jmp "
          db        0
L4025:
          db        "repne"
          db        0
L4026:
          db        "repe"
          db        0
L4027:
          db        "test"
          db        0
L4028:
          db        "?"
          db        0
L4029:
          db        "not"
          db        0
L4030:
          db        "neg"
          db        0
L4031:
          db        "mul"
          db        0
L4032:
          db        "imul"
          db        0
L4033:
          db        "div"
          db        0
L4034:
          db        "idiv"
          db        0
L4035:
          db        "?"
          db        0
L4036:
          db        ", "
          db        0
L4037:
          db        "inc"
          db        0
L4038:
          db        "dec"
          db        0
L4039:
          db        "icall"
          db        0
L4040:
          db        "jmp"
          db        0
L4041:
          db        "push"
          db        0
L4042:
          db        "FFxx?"
          db        0
L4043:
          db        "Unknown opcode: "
          db        0
L4044:
          db        "z6h"
          db        0
L4046:
          db        ": "
          db        0
L4047:
          db        "z6h"
          db        0
L4048:
          db        ": "
          db        0
L4049:
          db        "z2H"
          db        0
L4050:
          db        " "
          db        0
L4051:
          db        "-- "
          db        0
L4056:
          db        "Using tertiary 'WinMain' entry point"
          db        0
L4057:
          db        "User entry point not found"
          db        0
L4058:
          db        "Entry point not found: main or start"
          db        0
L4065:
          db        "rel32/not imported"
          db        0
L4066:
          db        "Can't do this rel type"
          db        0
L4068:
          db        "genexe: Too many imports"
          db        0
L4069:
          db        "main"
          db        0
L4070:
          db        "start"
          db        0
L4072:
          db        ".dll"
          db        0
L4073:
          db        "Too many libs"
          db        0
L4074:
          db        "Can't find external function"
          db        0
L4075:
          db        ".dll"
          db        0
L4076:
          db        "2:Too many libs"
          db        0
L4078:
          db        "proc Section Headersxxx"
          db        0
L4080:
          db        "Section "
          db        0
L4081:
          db        ": "
          db        0
L4082:
          db        "  ("
          db        0
L4083:
          db        ")"
          db        0
L4084:
          db        "    Raw Offset"
          db        0
L4085:
          db        "    Raw Size"
          db        0
L4086:
          db        "    Virtual Offset"
          db        0
L4087:
          db        "    Virtual Size"
          db        0
L4088:
          db        "    Nrelocs"
          db        0
L4089:
          db        "    Data"
          db        0
L4092:
          db        "Proc Dll List"
          db        0
L4093:
          db        ": "
          db        0
L4094:
          db        " "
          db        0
L4095:
          db        9
          db        9
          db        "Name Table Offset"
          db        0
L4096:
          db        9
          db        9
          db        "Addr Table Offset"
          db        0
L4097:
          db        9
          db        9
          db        "DLL Name Offset  "
          db        0
L4098:
          db        "Proc Import List"
          db        0
L4100:
          db        ": "
          db        0
L4101:
          db        " "
          db        0
L4102:
          db        " ("
          db        0
L4103:
          db        ")"
          db        0
L4104:
          db        9
          db        "IAT Offset        "
          db        0
L4105:
          db        9
          db        "Thunk Offset      "
          db        0
L4106:
          db        9
          db        "Hint/Name Offset  "
          db        0
L4107:
          db        " "
          db        0
L4108:
          db        " (---)"
          db        0
L4110:
          db        "Proc Symbol Table"
          db        0
L4111:
          db        ": "
          db        0
L4113:
          db        ":"
          db        0
L4114:
          db        " "
          db        0
L4115:
          db        "0x# #"
          db        0
L4117:
          db        "H"
          db        0
L4119:
          db        "proc Section Relocs: "
          db        0
L4120:
          db        " "
          db        0
L4121:
          db        "Reloc: "
          db        0
L4122:
          db        " Offset: "
          db        0
L4123:
          db        " ST Index: "
          db        0
L4124:
          db        " "
          db        0
L4126:
          db        "proc Section Code"
          db        0
L4127:
          db        "4"
          db        0
L4128:
          db        " "
          db        0
L4130:
          db        "proc Section "
          db        0
L4131:
          db        " Size:"
          db        0
L4132:
          db        "Z8H"
          db        0
L4133:
          db        ": "
          db        0
L4134:
          db        "z2H"
          db        0
L4135:
          db        " "
          db        0
L4136:
          db        "."
          db        0
L4137:
          db        "   "
          db        0
L4138:
          db        " "
          db        0
L4139:
          db        9
          db        "["
          db        0
L4140:
          db        "]"
          db        0
L4141:
          db        "z8h"
          db        0
L4142:
          db        ": "
          db        0
L4144:
          db        "EXE FORMAT"
          db        0
L4145:
          db        "AFTER GENSS"
          db        0
L4146:
          db        "Idata"
          db        0
L4147:
          db        "Code"
          db        0
L4148:
          db        "proc Section Zdata: "
          db        0
L4149:
          db        "END OF GENSS"
          db        0
L4151:
          db        ".text"
          db        0
L4152:
          db        ".data"
          db        0
L4153:
          db        ".bss"
          db        0
L4154:
          db        ".idata"
          db        0
L4157:
          db        ".dll"
          db        0
L4158:
          db        "Can't load search lib"
          db        0
L4161:
          db        "Writing file:"
          db        0
L4162:
          db        "Error writing exe file (possibly still running)"
          db        0
L4164:
          db        "pcmpistrx opnds"
          db        0
L4166:
          db        "EXTENDING SYMBOL TABLE TO"
          db        0
L4168:
          db        "bsf size"
          db        0
L4171:
          db        "movdqx?"
          db        0
L4172:
          db        "movdqx"
          db        0
L4177:
          db        "genrel8"
          db        0
L4180:
          db        "fmem/not mem"
          db        0
L4181:
          db        "r80 not allowed"
          db        0
L4182:
          db        "SIZE="
          db        0
L4183:
          db        "fmem size"
          db        0
L4184:
          db        "fst i64?"
          db        0
L4185:
          db        "fmem int size"
          db        0
L4187:
          db        "Opnd size mismatch"
          db        0
L4188:
          db        "cmov/byte"
          db        0
L4191:
          db        "jmp[]size"
          db        0
L4193:
          db        "call[]size"
          db        0
L4195:
          db        "float opnds"
          db        0
L4196:
          db        "float size"
          db        0
L4198:
          db        "fix opnds"
          db        0
L4200:
          db        "convertfloat opnds"
          db        0
L4202:
          db        "logicxmm opnds"
          db        0
L4204:
          db        "arithxmm opnds"
          db        0
L4206:
          db        "1:movdq size"
          db        0
L4207:
          db        "movdq reg,?"
          db        0
L4208:
          db        "3:movdq size"
          db        0
L4209:
          db        "4:movdq size"
          db        0
L4210:
          db        "movdq xreg,?"
          db        0
L4211:
          db        "5:movdq size"
          db        0
L4212:
          db        "movdq mem,?"
          db        0
L4213:
          db        "movdq opnds"
          db        0
L4215:
          db        "setcc opnd/size"
          db        0
L4217:
          db        "jcxz jmp out of range"
          db        0
L4218:
          db        "Can't do jcxz fwd jump"
          db        0
L4220:
          db        "loop jmp out of range"
          db        0
L4221:
          db        "Can't do loopxx fwd jump"
          db        0
L4223:
          db        "test opnds"
          db        0
L4225:
          db        "shift opnds1?"
          db        0
L4226:
          db        "shift/label"
          db        0
L4227:
          db        "cl or b10 needed"
          db        0
L4228:
          db        "shift opnds2?"
          db        0
L4230:
          db        "imul3 opnds"
          db        0
L4231:
          db        "imul3 byte"
          db        0
L4232:
          db        "imul3 not imm"
          db        0
L4234:
          db        "imul2 opnds"
          db        0
L4235:
          db        "imul2 byte"
          db        0
L4236:
          db        "imul2 size"
          db        0
L4237:
          db        "mul/label"
          db        0
L4238:
          db        "imul2 opnds"
          db        0
L4240:
          db        "movsxd size"
          db        0
L4241:
          db        "movsxd opnds"
          db        0
L4243:
          db        "exch size"
          db        0
L4244:
          db        "exch opnds"
          db        0
L4245:
          db        "exch size"
          db        0
L4248:
          db        "movsx not reg"
          db        0
L4249:
          db        "movsx size error"
          db        0
L4250:
          db        "movsx 4=>8 bytes?"
          db        0
L4251:
          db        "movsx need size prefix"
          db        0
L4252:
          db        "movsx size 8"
          db        0
L4253:
          db        "movsx not reg/mem"
          db        0
L4255:
          db        "LEA not reg/mem"
          db        0
L4256:
          db        "LEA size error"
          db        0
L4262:
          db        "Opnd size mismatch"
          db        0
L4263:
          db        "mov imm?"
          db        0
L4264:
          db        "exceeding byte value"
          db        0
L4265:
          db        "exceeding word16 value"
          db        0
L4266:
          db        "1:exceeding word32 value"
          db        0
L4267:
          db        "MOV REG/??"
          db        0
L4268:
          db        "Opnd size mismatch"
          db        0
L4269:
          db        "mov imm?"
          db        0
L4270:
          db        "exceeding byte value"
          db        0
L4271:
          db        "exceeding word16 value"
          db        0
L4272:
          db        "2:exceeding word32 value"
          db        0
L4273:
          db        "MOV MEM/?"
          db        0
L4274:
          db        "MOV ?/.."
          db        0
L4276:
          db        "non-add arith/label"
          db        0
L4277:
          db        "add imm/size"
          db        0
L4278:
          db        "3:exceeding word32 value"
          db        0
L4279:
          db        "ADD reg,???"
          db        0
L4280:
          db        "ADD mem,???"
          db        0
L4281:
          db        "Can't add to this opnd"
          db        0
L4285:
          db        "genrm not mem"
          db        0
L4286:
          db        "Scaled rstack?"
          db        0
L4287:
          db        "Can't scale rstack"
          db        0
L4291:
          db        "Operand size not set"
          db        0
L4294:
          db        "genamode size 2/8"
          db        0
L4296:
          db        "neg/div/etc opnd?"
          db        0
L4298:
          db        "inc/opnd?"
          db        0
L4300:
          db        "popreg not 64-bit"
          db        0
L4301:
          db        "pop not 64-bit"
          db        0
L4302:
          db        "pop opnd?"
          db        0
L4304:
          db        "pushreg not 64-bit"
          db        0
L4305:
          db        "push imm value too large"
          db        0
L4306:
          db        "push not 64-bit"
          db        0
L4307:
          db        "push opnd?"
          db        0
L4312:
          db        "Fwd ref in zdata"
          db        0
L4313:
          db        "DOFWDREFS/CAN'T DO RELTYPE"
          db        0
L4315:
          db        "Rel label across segments2"
          db        0
L4319:
          db        "Rel label across segments"
          db        0
L4323:
          db        "GENOPND/bad opnd"
          db        0
L4324:
          db        "8/16-BIT RELOC"
          db        0
L4330:
          db        "retn?"
          db        0
L4331:
          db        "resb?"
          db        0
L4332:
          db        "align2"
          db        0
L4333:
          db        "align?"
          db        0
L4334:
          db        "*** CAN'T DO OPCODE"
          db        0
L4335:
          db        "line"
          db        0
L4337:
          db        "Zdata contains code or data"
          db        0
L4340:
          db        "DUPL TABLE"
          db        0
L4341:
          db        9
          db        0
L4342:
          db        ":"
          db        0
L4343:
          db        "(# # (#) #) "
          db        0
L4344:
          db        "6"
          db        0
L4345:
          db        "8H"
          db        0
L4347:
          db        "GLOBAL IMPORT TABLE"
          db        0
L4348:
          db        "   "
          db        0
L4349:
          db        " "
          db        0
L4350:
          db        "D^.OFFSET="
          db        0
L4352:
          db        "MODULE SYMBOLS IN"
          db        0
L4353:
          db        "   "
          db        0
L4354:
          db        " "
          db        0
L4355:
          db        "|| # # #"
          db        0
L4356:
          db        "6"
          db        0
L4357:
          db        "8H"
          db        0
L4358:
          db        "||"
          db        0
L4359:
          db        "("
          db        0
L4360:
          db        ")"
          db        0
L4361:
          db        " BASE:"
          db        0
L4362:
          db        0
L4371:
          db        "dbuffer error"
          db        0
L4377:
          db        "Syntax error: '"
          db        0
L4378:
          db        "' on line"
          db        0
L4380:
          db        "SS code gen error:"
          db        0
L4381:
          db        "On line:"
          db        0
L4387:
          db        "Label:       "
          db        0
L4388:
          db        " "
          db        0
L4389:
          db        "U"
          db        0
L4390:
          db        "-"
          db        0
L4391:
          db        9
          db        0
L4392:
          db        " "
          db        0
L4393:
          db        "no seg"
          db        0
L4394:
          db        "Label:       "
          db        0
L4395:
          db        " "
          db        0
L4396:
          db        "EXTERN"
          db        0
L4397:
          db        "Named const: "
          db        0
L4398:
          db        " "
          db        0
L4399:
          db        "="
          db        0
L4400:
          db        "??"
          db        0
L4403:
          db        "xmm"
          db        0
L4405:
          db        "-"
          db        0
L4406:
          db        "frame"
          db        0
L4407:
          db        "stack"
          db        0
L4408:
          db        "B"
          db        0
L4409:
          db        "W"
          db        0
L4410:
          db        "A"
          db        0
L4411:
          db        "D"
          db        0
L4413:
          db        0
L4414:
          db        "<# : ## &:# SYM:## M:#>"
          db        0
L4415:
          db        "#"
          db        0
L4416:
          db        "8"
          db        0
L4417:
          db        "v"
          db        0
L4418:
          db        ".*"
          db        0
L4426:
          db        0
L4427:
          db        "byte "
          db        0
L4428:
          db        "word "
          db        0
L4429:
          db        "dword "
          db        0
L4430:
          db        "qword "
          db        0
L4431:
          db        0
L4432:
          db        "N:"
          db        0
L4434:
          db        ".data"
          db        0
L4435:
          db        ".bss"
          db        0
L4436:
          db        ".text"
          db        0
L4437:
          db        ".rodata"
          db        0
L4440:
          db        "+"
          db        0
L4441:
          db        "["
          db        0
L4442:
          db        0
L4443:
          db        "+"
          db        0
L4444:
          db        "*"
          db        0
L4445:
          db        "+"
          db        0
L4446:
          db        "]"
          db        0
L4447:
          db        34
          db        "<Long string>"
          db        34
          db        0
L4448:
          db        34
          db        0
L4449:
          db        "<BAD OPND>"
          db        0
L4451:
          db        0
L4452:
          db        ";"
          db        0
L4453:
          db        ":"
          db        0
L4454:
          db        9
          db        9
          db        0
L4455:
          db        "j"
          db        0
L4456:
          db        "set"
          db        0
L4457:
          db        "cmov"
          db        0
L4458:
          db        " "
          db        0
L4459:
          db        ","
          db        9
          db        0
L4460:
          db        ", #"
          db        0
L4462:
          db        ";"
          db        0
L4463:
          db        " "
          db        0
L4464:
          db        "z3"
          db        0
L4465:
          db        "z4"
          db        0
L4466:
          db        " "
          db        0
L4468:
          db        "b"
          db        0
L4469:
          db        "h"
          db        0
L4470:
          db        "w"
          db        0
L4471:
          db        "d"
          db        0
L4472:
          db        "GETSIZETAG?"
          db        0
L4476:
          db        "MC CODE"
          db        0
L4482:
          db        "Too few operands"
          db        0
L4483:
          db        "Too many operands"
          db        0
L4486:
          db        "Two *N scales"
          db        0
L4487:
          db        "Empty address mode"
          db        0
L4488:
          db        "Addr reg size mismatch"
          db        0
L4490:
          db        "*n must be 1,2,4,8"
          db        0
L4492:
          db        "* applied to non-extern label or applied inconsistently"
          db        0
L4493:
          db        "* missing or applied inconsistently"
          db        0
L4495:
          db        "neg/label"
          db        0
L4496:
          db        "READTERM"
          db        0
L4498:
          db        "+label?"
          db        0
L4499:
          db        "add real"
          db        0
L4500:
          db        "+label?"
          db        0
L4501:
          db        "sub real"
          db        0
L4505:
          db        "IMUL3 CAN'T DO 3 OPNDS"
          db        0
L4506:
          db        "pcmpistr/not int"
          db        0
L4508:
          db        "# expected not #"
          db        0
L4510:
          db        "Undefined:"
          db        0
L4511:
          db        " "
          db        0
L4513:
          db        "colon expected after label"
          db        0
L4514:
          db        "Redefining label as const: %s"
          db        0
L4515:
          db        "Instruction expected"
          db        0
L4516:
          db        "Defining imported name: %s"
          db        0
L4517:
          db        "Redefining symbol: %s"
          db        0
L4518:
          db        "2:Const redefined: %s"
          db        0
L4519:
          db        "Unknown symbol:"
          db        0
L4520:
          db        "EOL expected"
          db        0
L4525:
          db        13
          db        10
          db        13
          db        10
          db        " Lexical Error"
          db        10
          db        "*** # *** on line #"
          db        0
L4529:
          db        "???????HASHTABLE FULL"
          db        0
L4531:
          db        ":"
          db        0
L4532:
          db        " items in table"
          db        0
L4534:
          db        "NAME="
          db        0
L4535:
          db        "DUPL NAME"
          db        0
L4537:
          db        "aframe"
          db        0
L4538:
          db        "dframe"
          db        0
L4539:
          db        "astack"
          db        0
L4540:
          db        "dstack"
          db        0
L4541:
          db        "dprog"
          db        0
L4542:
          db        "dsptr"
          db        0
L4545:
          db        " "
          db        0
L4547:
          db        34
          db        0
L4548:
          db        " "
          db        0
L4550:
          db        ":"
          db        0
L4552:
          db        "No hex digits"
          db        0
L4553:
          db        "Overflow in hex number"
          db        0
L4555:
          db        "Bad binary digit"
          db        0
L4556:
          db        "No bin digits"
          db        0
L4557:
          db        "Overflow in binary number"
          db        0
L4559:
          db        "Base not supported"
          db        0
L4560:
          db        "18446744073709551615"
          db        0
L4561:
          db        "Overflow in 64-bit value"
          db        0
L4563:
          db        "Exponent error"
          db        0
L4570:
          db        "NULL ` name"
          db        0
L4571:
          db        "String not terminated"
          db        0
L4585:
          db        "C:\m\"
          db        0
L4587:
          db        "/"
          db        0
L4589:
          db        "wb"
          db        0
L4590:
          db        "con"
          db        0
L4592:
          db        "rb"
          db        0
L4593:
          db        "con"
          db        0
L4598:
          db        "W32"
          db        0
L4599:
          db        "W64"
          db        0
L4603:
          db        "TIMERPROC"
          db        0
L4608:
          db        "Registerclass error"
          db        0
L4610:
          db        "pcc001"
          db        0
L4614:
          db        "PROGINST"
          db        0
L4623:
          db        "Winexec error:"
          db        0
L4626:
          db        "Attempting to open"
          db        0
L4627:
          db        "Can't open"
          db        0
L4628:
          db        "File read OK. Size"
          db        0
L4647:
          db        "Unexpected EOF in @file"
          db        0
L4648:
          db        "@file item too long"
          db        0
L4650:
          db        "Can't open"
          db        0
L4651:
          db        "dll"
          db        0
L4653:
          db        13
          db        0
L4659:
          db        13
          db        10
          db        0
L4661:
          db        " "
          db        0
L4671:
          db        "N=0"
          db        0
L4682:
          db        "FREE LIST ERROR"
          db        0
L4685:
          db        "Alloctable failure"
          db        0
L4688:
          db        0
L4692:
          db        "."
          db        0
L4693:
          db        0
L4695:
          db        "."
          db        0
L4701:
          db        "line too long"
          db        0
L4703:
          db        "rb"
          db        0
L4705:
          db        "wb"
          db        0
L4707:
          db        "rb"
          db        0
L4714:
          db        "ABORTING: Press key..."
          db        0
L4716:
          db        "Realloc mem failure"
          db        0
L4718:
          db        "Alloc mem failure"
          db        0
L4720:
          db        "REMOVE:FOUND"
          db        0
L4721:
          db        "IN MEMALLOCTABLE, FREESIZE="
          db        0
L4722:
          db        ", BUT STORED AS BLOCK SIZE:"
          db        0
L4723:
          db        "MEMSIZE"
          db        0
L4724:
          db        "CAN'T FIND"
          db        0
L4725:
          db        "IN MEMALLOCTABLE"
          db        0
L4726:
          db        "MEM"
          db        0
L4728:
          db        "ALLOC ERROR:"
          db        0
L4729:
          db        "ALREADY ALLOCATED"
          db        10
          db        10
          db        10
          db        0
L4730:
          db        "MEMALLOCTABLE FULL"
          db        10
          db        10
          db        10
          db        10
          db        0
L4736:
          db        "HEAP FREELISTS:"
          db        0
L4738:
          db        "Size: "
          db        0
L4739:
          db        " "
          db        0
L4740:
          db        "h"
          db        0
L4741:
          db        0
L4745:
          db        "Can't alloc pc heap"
          db        0
L4754:
          db        "pcm_alloc failure"
          db        0
L4756:
          db        "ROUND"
          db        0
L4759:
          db        "FRACT"
          db        0
L4777:
          db        "DIV BY ZERO"
          db        0
L4780:
          db        "Integer overflow detected"
          db        0
L4799:
          db        "%lf%n"
          db        0
L4822:
          db        "9223372036854775808"
          db        0
L4823:
          db        "8000000000000000"
          db        0
L4824:
          db        "1000000000000000000000000000000000000000000000000000000000000000"
          db        0
L4825:
          db        "<mindint>"
          db        0
L4842:
          db        "%c"
          db        0
L4844:
          db        "%.*s"
          db        0
L4847:
          db        "%s"
          db        0
L4850:
          db        13
          db        10
          db        0
L4855:
          db        "%f"
          db        0
L4860:
          db        "%llu"
          db        0
L4863:
          db        "z8H"
          db        0
L4871:
          db        "Too many io levels"
          db        10
          db        0
L4883:
          db        "SETDOTSLICE?"
          db        0
L4902:
          db        "Too many params"
          db        10
          db        0
;Real Table
          align     8
L4564:
          dq        0.000000
L4565:
          dq        10.000000
L4566:
          dq        10.000000
L4567:
          dq        10.000000
L4631:
          dq        9223372036854775800.000000
L4632:
          dq        1.000000
L4757:
          dq        0.000000
L4760:
          dq        0.000000
L4798:
          dq        0.000000
L4800:
          dq        0.000000
          align     8
m$fnaddresses:
L4877:
          dq        ax.start
          dq        ax.loadsourcefiles
          dq        ax.parsemodules
          dq        ax.fixopnd
          dq        ax.initlogfile
          dq        ax.closelogfile
          dq        ax.initall
          dq        ax.lextest
          dq        ax.getinputoptions
          dq        ax.do_option
          dq        ax.showhelp
          dq        ax.showcaption
          dq        ax.loaderror
          dq        ax.loaderror_s
          dq        ax.addmodule
          dq        ax.addsearchlib
          dq        ax.showmodules
          dq        ax.getemptyst
          dq        ax.findduplname
          dq        ax.adddupl
          dq        ax.scanglobals
          dq        ax.resethashtable
          dq        msysnew.m$init
          dq        msysnew.m$stop
          dq        msysnew.m$callff_4
          dq        msysnew.m$callff_5
          dq        msysnew.m$callff_6
          dq        msysnew.m$callff_7
          dq        msysnew.m$callff_8
          dq        msysnew.m$callff_9
          dq        msysnew.m$callff_10
          dq        msysnew.m$callff_11
          dq        msysnew.m$callff_12
          dq        msysnew.m$callff_14
          dq        msysnew.m$pushcallback
          dq        msysnew.m$popcallback
          dq        msysnew.m$lenstr_stringz
          dq        msysnew.m$getdotindex
          dq        msysnew.m$setdotindex
          dq        msysnew.m$getdotslice
          dq        msysnew.m$setdotslice
          dq        msysnew.m$get_nprocs
          dq        msysnew.m$get_procname
          dq        msysnew.m$get_procaddr
          dq        msysnew.m$get_nexports
          dq        msysnew.m$get_procexport
          dq        msysnew.pushio
          dq        msysnew.m$print_startfile
          dq        msysnew.m$print_startstr
          dq        msysnew.m$print_startptr
          dq        msysnew.m$print_startcon
          dq        msysnew.m$print_setfmt
          dq        msysnew.m$print_end
          dq        msysnew.m$print_ptr
          dq        msysnew.m$print_i64
          dq        msysnew.m$print_u64
          dq        msysnew.m$print_i128
          dq        msysnew.m$print_u128
          dq        msysnew.m$print_r64
          dq        msysnew.m$print_r32
          dq        msysnew.m$print_c8
          dq        msysnew.m$print_str
          dq        msysnew.m$print_newline
          dq        msysnew.m$print_nogap
          dq        msysnew.printstr
          dq        msysnew.printstr_n
          dq        msysnew.printstrn_app
          dq        msysnew.printchar
          dq        msysnew.nextfmtchars
          dq        msysnew.strtofmt
          dq        msysnew.domultichar
          dq        msysnew.expandstr
          dq        msysnew.mdivrem
          dq        msysnew.u64tostr
          dq        msysnew.u128tostr
          dq        msysnew.xdivrem128
          dq        msysnew.i64tostrfmt
          dq        msysnew.u64tostrfmt
          dq        msysnew.u128tostrfmt
          dq        msysnew.i64mintostr
          dq        msysnew.strtostrfmt
          dq        msysnew.tostr_i64
          dq        msysnew.tostr_u64
          dq        msysnew.tostr_u128
          dq        msysnew.tostr_r64
          dq        msysnew.tostr_str
          dq        msysnew.getfmt
          dq        msysnew.strint
          dq        msysnew.getstrint
          dq        msysnew.strword
          dq        msysnew.strreal
          dq        msysnew.getstr
          dq        msysnew.initreadbuffer
          dq        msysnew.m$read_conline
          dq        msysnew.m$read_fileline
          dq        msysnew.m$read_strline
          dq        msysnew.readitem
          dq        msysnew.strtoint
          dq        msysnew.m$read_i64
          dq        msysnew.m$read_r64
          dq        msysnew.m$read_strold
          dq        msysnew.m$read_str
          dq        msysnew.readstr
          dq        msysnew.rereadln
          dq        msysnew.reread
          dq        msysnew.valint
          dq        msysnew.valreal
          dq        msysnew.iconvlcn
          dq        msysnew.iconvucn
          dq        msysnew.convlcstring
          dq        msysnew.convucstring
          dq        msysnew.m$ufloat_r64u64
          dq        msysnew.m$ufloat_r64u32
          dq        msysnew.m$ufloat_r32u32
          dq        msysnew.m$ufloat_r32u64
          dq        msysnew.m$power_i64
          dq        msysnew.m$intoverflow
          dq        msysnew.m$mul_i128
          dq        msysnew.m$idiv_i128
          dq        msysnew.m$dotindex
          dq        msysnew.m$dotslice
          dq        msysnew.m$popdotindex
          dq        msysnew.m$popdotslice
          dq        msysnew.m$sin
          dq        msysnew.m$cos
          dq        msysnew.m$tan
          dq        msysnew.m$asin
          dq        msysnew.m$acos
          dq        msysnew.m$atan
          dq        msysnew.m$ln
          dq        msysnew.m$log
          dq        msysnew.m$exp
          dq        msysnew.m$floor
          dq        msysnew.m$ceil
          dq        msysnew.m$fract
          dq        msysnew.m$round
          dq        mlib.pcm_alloc
          dq        mlib.pcm_freestr
          dq        mlib.pcm_free
          dq        mlib.pcm_freeac
          dq        mlib.pcm_copymem4
          dq        mlib.pcm_clearmem
          dq        mlib.pcm_init
          dq        mlib.pcm_getac
          dq        mlib.pcm_newblock
          dq        mlib.pcm_round
          dq        mlib.pcm_array
          dq        mlib.pcm_printfreelist
          dq        mlib.pcm_diags
          dq        mlib.pcm_allocz
          dq        mlib.pcm_copyheapstring
          dq        mlib.pcm_copyheapstringn
          dq        mlib.pcm_copyheapblock
          dq        mlib.addtomemalloc
          dq        mlib.removefrommemalloc
          dq        mlib.allocmem
          dq        mlib.reallocmem
          dq        mlib.abortprogram
          dq        mlib.getfilesize
          dq        mlib.readrandom
          dq        mlib.writerandom
          dq        mlib.setfilepos
          dq        mlib.getfilepos
          dq        mlib.readfile
          dq        mlib.writefile
          dq        mlib.checkfile
          dq        mlib.readlinen
          dq        mlib.iconvlcn
          dq        mlib.iconvucn
          dq        mlib.convlcstring
          dq        mlib.convucstring
          dq        mlib.changeext
          dq        mlib.extractext
          dq        mlib.extractpath
          dq        mlib.extractfile
          dq        mlib.extractbasefile
          dq        mlib.addext
          dq        mlib.alloctable
          dq        mlib.zalloctable
          dq        mlib.checkfreelists
          dq        mlib.pcm_alloc32
          dq        mlib.pcm_free32
          dq        mlib.outbyte
          dq        mlib.outword16
          dq        mlib.outword
          dq        mlib.outword64
          dq        mlib.myeof
          dq        mlib.pcm_smallallocz
          dq        mlib.pcm_smallalloc
          dq        mlib.strbuffer_add
          dq        mlib.gs_init
          dq        mlib.gs_free
          dq        mlib.gs_str
          dq        mlib.gs_char
          dq        mlib.gs_strn
          dq        mlib.gs_strvar
          dq        mlib.gs_strint
          dq        mlib.gs_strln
          dq        mlib.gs_strsp
          dq        mlib.gs_line
          dq        mlib.gs_getcol
          dq        mlib.gs_leftstr
          dq        mlib.gs_leftint
          dq        mlib.gs_padto
          dq        mlib.gs_println
          dq        mlib.nextcmdparam
          dq        mlib.readnextfileitem
          dq        mlib.ipadstr
          dq        mlib.padstr
          dq        mlib.chr
          dq        mlib.cmpstring
          dq        mlib.cmpstringn
          dq        mlib.eqstring
          dq        mlib.cmpbytes
          dq        mlib.eqbytes
          dq        mlib.mseed
          dq        mlib.mrandom
          dq        mlib.mrandomp
          dq        mlib.mrandomint
          dq        mlib.mrandomrange
          dq        mlib.mrandomreal
          dq        mlib.mrandomreal1
          dq        mlib.checkpackfile
          dq        oswindows.os_init
          dq        oswindows.os_execwait
          dq        oswindows.os_execcmd
          dq        oswindows.os_getch
          dq        oswindows.os_kbhit
          dq        oswindows.os_flushkeys
          dq        oswindows.os_getconsolein
          dq        oswindows.os_getconsoleout
          dq        oswindows.os_proginstance
          dq        oswindows.os_getdllinst
          dq        oswindows.os_getdllprocaddr
          dq        oswindows.os_initwindows
          dq        oswindows.os_gxregisterclass
          dq        oswindows.mainwndproc
          dq        oswindows.timerproc
          dq        oswindows.os_setmesshandler
          dq        oswindows.os_getchx
          dq        oswindows.os_getos
          dq        oswindows.os_gethostsize
          dq        oswindows.os_shellexec
          dq        oswindows.os_sleep
          dq        oswindows.os_getstdin
          dq        oswindows.os_getstdout
          dq        oswindows.os_gethostname
          dq        oswindows.os_getmpath
          dq        oswindows.os_exitprocess
          dq        oswindows.os_clock
          dq        oswindows.os_getclockspersec
          dq        oswindows.os_iswindows
          dq        oswindows.os_filelastwritetime
          dq        oswindows.os_getsystime
          dq        oswindows.os_messagebox
          dq        oswindows.os_hpcounter
          dq        oswindows.os_hpfrequency
          dq        oswindows.os_peek
          dq        ax_lex.lex
          dq        ax_lex.initlex
          dq        ax_lex.readreal
          dq        ax_lex.readnumber
          dq        ax_lex.readbinary
          dq        ax_lex.readhex
          dq        ax_lex.ps
          dq        ax_lex.printsymbol
          dq        ax_lex.clearhashtable
          dq        ax_lex.inithashtable
          dq        ax_lex.addreservedword
          dq        ax_lex.printhashtable
          dq        ax_lex.lookuplex
          dq        ax_lex.initsourcefile
          dq        ax_lex.addnamestr
          dq        ax_lex.lxerror
          dq        ax_lex.gethashvalue
          dq        ax_lex.skiptoeol
          dq        ax_lex.makestring
          dq        ax_parse.readmodule
          dq        ax_parse.checkundefined
          dq        ax_parse.checksymbol
          dq        ax_parse.readinstr
          dq        ax_parse.readcondinstr
          dq        ax_parse.readoperand
          dq        ax_parse.readexpression
          dq        ax_parse.readterm
          dq        ax_parse.readreg
          dq        ax_parse.readaddrmode
          dq        ax_lib.initlib
          dq        ax_lib.genmc
          dq        ax_lib.genmcstr
          dq        ax_lib.newopnd
          dq        ax_lib.genxreg
          dq        ax_lib.genindex
          dq        ax_lib.writemclblock
          dq        ax_lib.gencomment
          dq        ax_lib.genstrimm
          dq        ax_lib.getsizetag
          dq        ax_lib.writemcl
          dq        ax_lib.strmcl
          dq        ax_lib.stropnd
          dq        ax_lib.strdef
          dq        ax_lib.setsegment
          dq        ax_lib.getsizeprefix
          dq        ax_lib.needsizeprefix
          dq        ax_lib.genimm_expr
          dq        ax_lib.genint
          dq        ax_lib.genlab
          dq        ax_lib.genmem
          dq        ax_lib.genreg0
          dq        ax_lib.getfullname
          dq        ax_lib.getregname
          dq        ax_lib.xgetregname
          dq        ax_lib.printst
          dq        ax_lib.printstrec
          dq        ax_lib.adddef
          dq        ax_lib.addimport
          dq        ax_lib.createlabel
          dq        ax_lib.createnamedconst
          dq        ax_lib.gerror
          dq        ax_lib.serror
          dq        ax_lib.serror_s
          dq        ax_lib.inttostr
          dq        ax_lib.realtostr
          dq        ax_lib.buffercreate
          dq        ax_lib.bufferexpand
          dq        ax_lib.buffercheck
          dq        ax_lib.bufferlength
          dq        ax_lib.bufferelemptr
          dq        ax_lib.addbyte
          dq        ax_lib.addword
          dq        ax_lib.adddword
          dq        ax_lib.addqword
          dq        ax_lib.printmodulesymbols
          dq        ax_lib.printimportsymbols
          dq        ax_lib.printdupltable
          dq        ax_genss.genss
          dq        ax_genss.doinstr
          dq        ax_genss.genbyte
          dq        ax_genss.genword
          dq        ax_genss.gendword
          dq        ax_genss.genqword
          dq        ax_genss.genopnd
          dq        ax_genss.addrelocitem
          dq        ax_genss.getstindex
          dq        ax_genss.genrel32
          dq        ax_genss.genabs32
          dq        ax_genss.genabs64
          dq        ax_genss.getrel32
          dq        ax_genss.dofwdrefs
          dq        ax_genss.genrex
          dq        ax_genss.isbytesized
          dq        ax_genss.isdwordsized
          dq        ax_genss.do_push
          dq        ax_genss.do_pop
          dq        ax_genss.do_inc
          dq        ax_genss.do_neg
          dq        ax_genss.genamode
          dq        ax_genss.makemodrm
          dq        ax_genss.setopsize
          dq        ax_genss.setaddrsize
          dq        ax_genss.getdispsize
          dq        ax_genss.genrm
          dq        ax_genss.genrmbyte
          dq        ax_genss.makeam
          dq        ax_genss.do_arith
          dq        ax_genss.do_mov
          dq        ax_genss.getregcoder
          dq        ax_genss.getregcodeb
          dq        ax_genss.getregcodebx
          dq        ax_genss.getregcoderx
          dq        ax_genss.do_lea
          dq        ax_genss.do_movsx
          dq        ax_genss.checkhighreg
          dq        ax_genss.do_exch
          dq        ax_genss.do_movsxd
          dq        ax_genss.do_imul2
          dq        ax_genss.do_imul3
          dq        ax_genss.do_shift
          dq        ax_genss.do_test
          dq        ax_genss.do_loop
          dq        ax_genss.do_jcxz
          dq        ax_genss.do_setcc
          dq        ax_genss.do_movxmm
          dq        ax_genss.do_arithxmm
          dq        ax_genss.do_logicxmm
          dq        ax_genss.do_convertfloat
          dq        ax_genss.do_fix
          dq        ax_genss.do_float
          dq        ax_genss.do_call
          dq        ax_genss.do_jmp
          dq        ax_genss.getcurrdatalen
          dq        ax_genss.do_cmovcc
          dq        ax_genss.do_fmem
          dq        ax_genss.getr32bits
          dq        ax_genss.genrel8
          dq        ax_genss.checkshortjump
          dq        ax_genss.addfwdref
          dq        ax_genss.switchseg
          dq        ax_genss.do_movdqx
          dq        ax_genss.do_popcnt
          dq        ax_genss.do_bsf
          dq        ax_genss.extendsymboltable
          dq        ax_genss.do_pcmpistri
          dq        ax_writeexe.writeexe
          dq        ax_writeexe.genexe
          dq        ax_writeexe.loadlibs
          dq        ax_writeexe.writessdata
          dq        ax_writeexe.initsectiontable
          dq        ax_writeexe.showssdata
          dq        ax_writeexe.showsectiondata
          dq        ax_writeexe.showsectioncode
          dq        ax_writeexe.showsectionrelocs2
          dq        ax_writeexe.gs_value
          dq        ax_writeexe.showsymboltable2
          dq        ax_writeexe.showimporttable
          dq        ax_writeexe.roundtoblock
          dq        ax_writeexe.showsections
          dq        ax_writeexe.extractlibname
          dq        ax_writeexe.scanst
          dq        ax_writeexe.relocdata
          dq        ax_writeexe.writerecordx
          dq        ax_writeexe.writedosstub
          dq        ax_writeexe.writepesig
          dq        ax_writeexe.writepadding
          dq        ax_writeexe.writefileheader
          dq        ax_writeexe.writeoptheader
          dq        ax_writeexe.writesectionheader
          dq        ax_writeexe.writesectiondata
          dq        ax_writeexe.getoffsets
          dq        ax_disasm.decodeinstr
          dq        ax_disasm.decodetwobyteinstr
          dq        ax_disasm.decodeaddr
          dq        ax_disasm.readbyte
          dq        ax_disasm.readsbyte
          dq        ax_disasm.readword16
          dq        ax_disasm.readint16
          dq        ax_disasm.readword32
          dq        ax_disasm.readint32
          dq        ax_disasm.readint64
          dq        ax_disasm.getreg
          dq        ax_disasm.strreg
          dq        ax_disasm.strfreg
          dq        ax_disasm.printaddrmode
          dq        ax_disasm.genstr
          dq        ax_disasm.genintd
          dq        ax_disasm.genhex
          dq        ax_disasm.readimm
          dq        ax_disasm.readimm8
          dq        ax_disasm.strxmm
          dq        ax_disasm.strmmx
          dq        ax_disasm.decode8087
          dq        ax_disasm.do87arith
          dq        ax_disasm.do87mem
          dq        ax_disasm.getsil
          dq        ax_disasm.getsilx
          dq        ax_writeobj.writess
          dq        ax_writeobj.writerecord
          dq        ax_writeobj.writerelocs
          dq        ax_writeobj.writedata
          dq        ax_writeobj.writesymboltable
          dq        ax_writeobj.writestringtable
          dq        ax_writeobj.makesymbol
          dq        ax_writeobj.addsymbol
          dq        ax_writeobj.initsymboltable
          dq        ax_writeobj.strtoaux
          dq        ax_writeobj.sectiontoaux
          dq        ax_writeobj.addstringentry
          dq        ax_writeobj.convertsymboltable
          dq        ax_writeobj.writecoff
          dq        0
m$fnnames:
L4879:
          dq        L4903
          dq        L4904
          dq        L4905
          dq        L4906
          dq        L4907
          dq        L4908
          dq        L4909
          dq        L4910
          dq        L4911
          dq        L4912
          dq        L4913
          dq        L4914
          dq        L4915
          dq        L4916
          dq        L4917
          dq        L4918
          dq        L4919
          dq        L4920
          dq        L4921
          dq        L4922
          dq        L4923
          dq        L4924
          dq        L4925
          dq        L4926
          dq        L4927
          dq        L4928
          dq        L4929
          dq        L4930
          dq        L4931
          dq        L4932
          dq        L4933
          dq        L4934
          dq        L4935
          dq        L4936
          dq        L4937
          dq        L4938
          dq        L4939
          dq        L4940
          dq        L4941
          dq        L4942
          dq        L4943
          dq        L4944
          dq        L4945
          dq        L4946
          dq        L4947
          dq        L4948
          dq        L4949
          dq        L4950
          dq        L4951
          dq        L4952
          dq        L4953
          dq        L4954
          dq        L4955
          dq        L4956
          dq        L4957
          dq        L4958
          dq        L4959
          dq        L4960
          dq        L4961
          dq        L4962
          dq        L4963
          dq        L4964
          dq        L4965
          dq        L4966
          dq        L4967
          dq        L4968
          dq        L4969
          dq        L4970
          dq        L4971
          dq        L4972
          dq        L4973
          dq        L4974
          dq        L4975
          dq        L4976
          dq        L4977
          dq        L4978
          dq        L4979
          dq        L4980
          dq        L4981
          dq        L4982
          dq        L4983
          dq        L4984
          dq        L4985
          dq        L4986
          dq        L4987
          dq        L4988
          dq        L4989
          dq        L4990
          dq        L4991
          dq        L4992
          dq        L4993
          dq        L4994
          dq        L4995
          dq        L4996
          dq        L4997
          dq        L4998
          dq        L4999
          dq        L5000
          dq        L5001
          dq        L5002
          dq        L5003
          dq        L5004
          dq        L5005
          dq        L5006
          dq        L5007
          dq        L5008
          dq        L5009
          dq        L5010
          dq        L5011
          dq        L5012
          dq        L5013
          dq        L5014
          dq        L5015
          dq        L5016
          dq        L5017
          dq        L5018
          dq        L5019
          dq        L5020
          dq        L5021
          dq        L5022
          dq        L5023
          dq        L5024
          dq        L5025
          dq        L5026
          dq        L5027
          dq        L5028
          dq        L5029
          dq        L5030
          dq        L5031
          dq        L5032
          dq        L5033
          dq        L5034
          dq        L5035
          dq        L5036
          dq        L5037
          dq        L5038
          dq        L5039
          dq        L5040
          dq        L5041
          dq        L5042
          dq        L5043
          dq        L5044
          dq        L5045
          dq        L5046
          dq        L5047
          dq        L5048
          dq        L5049
          dq        L5050
          dq        L5051
          dq        L5052
          dq        L5053
          dq        L5054
          dq        L5055
          dq        L5056
          dq        L5057
          dq        L5058
          dq        L5059
          dq        L5060
          dq        L5061
          dq        L5062
          dq        L5063
          dq        L5064
          dq        L5065
          dq        L5066
          dq        L5067
          dq        L5068
          dq        L5069
          dq        L5070
          dq        L5071
          dq        L5072
          dq        L5073
          dq        L5074
          dq        L5075
          dq        L5076
          dq        L5077
          dq        L5078
          dq        L5079
          dq        L5080
          dq        L5081
          dq        L5082
          dq        L5083
          dq        L5084
          dq        L5085
          dq        L5086
          dq        L5087
          dq        L5088
          dq        L5089
          dq        L5090
          dq        L5091
          dq        L5092
          dq        L5093
          dq        L5094
          dq        L5095
          dq        L5096
          dq        L5097
          dq        L5098
          dq        L5099
          dq        L5100
          dq        L5101
          dq        L5102
          dq        L5103
          dq        L5104
          dq        L5105
          dq        L5106
          dq        L5107
          dq        L5108
          dq        L5109
          dq        L5110
          dq        L5111
          dq        L5112
          dq        L5113
          dq        L5114
          dq        L5115
          dq        L5116
          dq        L5117
          dq        L5118
          dq        L5119
          dq        L5120
          dq        L5121
          dq        L5122
          dq        L5123
          dq        L5124
          dq        L5125
          dq        L5126
          dq        L5127
          dq        L5128
          dq        L5129
          dq        L5130
          dq        L5131
          dq        L5132
          dq        L5133
          dq        L5134
          dq        L5135
          dq        L5136
          dq        L5137
          dq        L5138
          dq        L5139
          dq        L5140
          dq        L5141
          dq        L5142
          dq        L5143
          dq        L5144
          dq        L5145
          dq        L5146
          dq        L5147
          dq        L5148
          dq        L5149
          dq        L5150
          dq        L5151
          dq        L5152
          dq        L5153
          dq        L5154
          dq        L5155
          dq        L5156
          dq        L5157
          dq        L5158
          dq        L5159
          dq        L5160
          dq        L5161
          dq        L5162
          dq        L5163
          dq        L5164
          dq        L5165
          dq        L5166
          dq        L5167
          dq        L5168
          dq        L5169
          dq        L5170
          dq        L5171
          dq        L5172
          dq        L5173
          dq        L5174
          dq        L5175
          dq        L5176
          dq        L5177
          dq        L5178
          dq        L5179
          dq        L5180
          dq        L5181
          dq        L5182
          dq        L5183
          dq        L5184
          dq        L5185
          dq        L5186
          dq        L5187
          dq        L5188
          dq        L5189
          dq        L5190
          dq        L5191
          dq        L5192
          dq        L5193
          dq        L5194
          dq        L5195
          dq        L5196
          dq        L5197
          dq        L5198
          dq        L5199
          dq        L5200
          dq        L5201
          dq        L5202
          dq        L5203
          dq        L5204
          dq        L5205
          dq        L5206
          dq        L5207
          dq        L5208
          dq        L5209
          dq        L5210
          dq        L5211
          dq        L5212
          dq        L5213
          dq        L5214
          dq        L5215
          dq        L5216
          dq        L5217
          dq        L5218
          dq        L5219
          dq        L5220
          dq        L5221
          dq        L5222
          dq        L5223
          dq        L5224
          dq        L5225
          dq        L5226
          dq        L5227
          dq        L5228
          dq        L5229
          dq        L5230
          dq        L5231
          dq        L5232
          dq        L5233
          dq        L5234
          dq        L5235
          dq        L5236
          dq        L5237
          dq        L5238
          dq        L5239
          dq        L5240
          dq        L5241
          dq        L5242
          dq        L5243
          dq        L5244
          dq        L5245
          dq        L5246
          dq        L5247
          dq        L5248
          dq        L5249
          dq        L5250
          dq        L5251
          dq        L5252
          dq        L5253
          dq        L5254
          dq        L5255
          dq        L5256
          dq        L5257
          dq        L5258
          dq        L5259
          dq        L5260
          dq        L5261
          dq        L5262
          dq        L5263
          dq        L5264
          dq        L5265
          dq        L5266
          dq        L5267
          dq        L5268
          dq        L5269
          dq        L5270
          dq        L5271
          dq        L5272
          dq        L5273
          dq        L5274
          dq        L5275
          dq        L5276
          dq        L5277
          dq        L5278
          dq        L5279
          dq        L5280
          dq        L5281
          dq        L5282
          dq        L5283
          dq        L5284
          dq        L5285
          dq        L5286
          dq        L5287
          dq        L5288
          dq        L5289
          dq        L5290
          dq        L5291
          dq        L5292
          dq        L5293
          dq        L5294
          dq        L5295
          dq        L5296
          dq        L5297
          dq        L5298
          dq        L5299
          dq        L5300
          dq        L5301
          dq        L5302
          dq        L5303
          dq        L5304
          dq        L5305
          dq        L5306
          dq        L5307
          dq        L5308
          dq        L5309
          dq        L5310
          dq        L5311
          dq        L5312
          dq        L5313
          dq        L5314
          dq        L5315
          dq        L5316
          dq        L5317
          dq        L5318
          dq        L5319
          dq        L5320
          dq        L5321
          dq        L5322
          dq        L5323
          dq        L5324
          dq        L5325
          dq        L5326
          dq        L5327
          dq        L5328
          dq        L5329
          dq        L5330
          dq        L5331
          dq        L5332
          dq        L5333
          dq        L5334
          dq        L5335
          dq        L5336
          dq        L5337
          dq        L5338
          dq        L5339
          dq        L5340
          dq        L5341
          dq        L5342
          dq        L5343
          dq        L5344
          dq        L5345
          dq        L5346
          dq        L5347
          dq        L5348
          dq        L5349
          dq        L5350
          dq        L5351
          dq        L5352
          dq        L5353
          dq        L5354
          dq        L5355
          dq        L5356
          dq        L5357
          dq        L5358
          dq        L5359
          dq        L5360
          dq        L5361
          dq        L5362
          dq        L5363
          dq        L5364
          dq        L5365
          dq        L5366
          dq        L5367
          dq        L5368
          dq        L5369
          dq        L5370
          dq        L5371
          dq        0
L4903:
          db        "start"
          db        0
L4904:
          db        "loadsourcefiles"
          db        0
L4905:
          db        "parsemodules"
          db        0
L4906:
          db        "fixopnd"
          db        0
L4907:
          db        "initlogfile"
          db        0
L4908:
          db        "closelogfile"
          db        0
L4909:
          db        "initall"
          db        0
L4910:
          db        "lextest"
          db        0
L4911:
          db        "getinputoptions"
          db        0
L4912:
          db        "do_option"
          db        0
L4913:
          db        "showhelp"
          db        0
L4914:
          db        "showcaption"
          db        0
L4915:
          db        "loaderror"
          db        0
L4916:
          db        "loaderror_s"
          db        0
L4917:
          db        "addmodule"
          db        0
L4918:
          db        "addsearchlib"
          db        0
L4919:
          db        "showmodules"
          db        0
L4920:
          db        "getemptyst"
          db        0
L4921:
          db        "findduplname"
          db        0
L4922:
          db        "adddupl"
          db        0
L4923:
          db        "scanglobals"
          db        0
L4924:
          db        "resethashtable"
          db        0
L4925:
          db        "m$init"
          db        0
L4926:
          db        "m$stop"
          db        0
L4927:
          db        "m$callff_4"
          db        0
L4928:
          db        "m$callff_5"
          db        0
L4929:
          db        "m$callff_6"
          db        0
L4930:
          db        "m$callff_7"
          db        0
L4931:
          db        "m$callff_8"
          db        0
L4932:
          db        "m$callff_9"
          db        0
L4933:
          db        "m$callff_10"
          db        0
L4934:
          db        "m$callff_11"
          db        0
L4935:
          db        "m$callff_12"
          db        0
L4936:
          db        "m$callff_14"
          db        0
L4937:
          db        "m$pushcallback"
          db        0
L4938:
          db        "m$popcallback"
          db        0
L4939:
          db        "m$lenstr_stringz"
          db        0
L4940:
          db        "m$getdotindex"
          db        0
L4941:
          db        "m$setdotindex"
          db        0
L4942:
          db        "m$getdotslice"
          db        0
L4943:
          db        "m$setdotslice"
          db        0
L4944:
          db        "m$get_nprocs"
          db        0
L4945:
          db        "m$get_procname"
          db        0
L4946:
          db        "m$get_procaddr"
          db        0
L4947:
          db        "m$get_nexports"
          db        0
L4948:
          db        "m$get_procexport"
          db        0
L4949:
          db        "pushio"
          db        0
L4950:
          db        "m$print_startfile"
          db        0
L4951:
          db        "m$print_startstr"
          db        0
L4952:
          db        "m$print_startptr"
          db        0
L4953:
          db        "m$print_startcon"
          db        0
L4954:
          db        "m$print_setfmt"
          db        0
L4955:
          db        "m$print_end"
          db        0
L4956:
          db        "m$print_ptr"
          db        0
L4957:
          db        "m$print_i64"
          db        0
L4958:
          db        "m$print_u64"
          db        0
L4959:
          db        "m$print_i128"
          db        0
L4960:
          db        "m$print_u128"
          db        0
L4961:
          db        "m$print_r64"
          db        0
L4962:
          db        "m$print_r32"
          db        0
L4963:
          db        "m$print_c8"
          db        0
L4964:
          db        "m$print_str"
          db        0
L4965:
          db        "m$print_newline"
          db        0
L4966:
          db        "m$print_nogap"
          db        0
L4967:
          db        "printstr"
          db        0
L4968:
          db        "printstr_n"
          db        0
L4969:
          db        "printstrn_app"
          db        0
L4970:
          db        "printchar"
          db        0
L4971:
          db        "nextfmtchars"
          db        0
L4972:
          db        "strtofmt"
          db        0
L4973:
          db        "domultichar"
          db        0
L4974:
          db        "expandstr"
          db        0
L4975:
          db        "mdivrem"
          db        0
L4976:
          db        "u64tostr"
          db        0
L4977:
          db        "u128tostr"
          db        0
L4978:
          db        "xdivrem128"
          db        0
L4979:
          db        "i64tostrfmt"
          db        0
L4980:
          db        "u64tostrfmt"
          db        0
L4981:
          db        "u128tostrfmt"
          db        0
L4982:
          db        "i64mintostr"
          db        0
L4983:
          db        "strtostrfmt"
          db        0
L4984:
          db        "tostr_i64"
          db        0
L4985:
          db        "tostr_u64"
          db        0
L4986:
          db        "tostr_u128"
          db        0
L4987:
          db        "tostr_r64"
          db        0
L4988:
          db        "tostr_str"
          db        0
L4989:
          db        "getfmt"
          db        0
L4990:
          db        "strint"
          db        0
L4991:
          db        "getstrint"
          db        0
L4992:
          db        "strword"
          db        0
L4993:
          db        "strreal"
          db        0
L4994:
          db        "getstr"
          db        0
L4995:
          db        "initreadbuffer"
          db        0
L4996:
          db        "m$read_conline"
          db        0
L4997:
          db        "m$read_fileline"
          db        0
L4998:
          db        "m$read_strline"
          db        0
L4999:
          db        "readitem"
          db        0
L5000:
          db        "strtoint"
          db        0
L5001:
          db        "m$read_i64"
          db        0
L5002:
          db        "m$read_r64"
          db        0
L5003:
          db        "m$read_strold"
          db        0
L5004:
          db        "m$read_str"
          db        0
L5005:
          db        "readstr"
          db        0
L5006:
          db        "rereadln"
          db        0
L5007:
          db        "reread"
          db        0
L5008:
          db        "valint"
          db        0
L5009:
          db        "valreal"
          db        0
L5010:
          db        "iconvlcn"
          db        0
L5011:
          db        "iconvucn"
          db        0
L5012:
          db        "convlcstring"
          db        0
L5013:
          db        "convucstring"
          db        0
L5014:
          db        "m$ufloat_r64u64"
          db        0
L5015:
          db        "m$ufloat_r64u32"
          db        0
L5016:
          db        "m$ufloat_r32u32"
          db        0
L5017:
          db        "m$ufloat_r32u64"
          db        0
L5018:
          db        "m$power_i64"
          db        0
L5019:
          db        "m$intoverflow"
          db        0
L5020:
          db        "m$mul_i128"
          db        0
L5021:
          db        "m$idiv_i128"
          db        0
L5022:
          db        "m$dotindex"
          db        0
L5023:
          db        "m$dotslice"
          db        0
L5024:
          db        "m$popdotindex"
          db        0
L5025:
          db        "m$popdotslice"
          db        0
L5026:
          db        "m$sin"
          db        0
L5027:
          db        "m$cos"
          db        0
L5028:
          db        "m$tan"
          db        0
L5029:
          db        "m$asin"
          db        0
L5030:
          db        "m$acos"
          db        0
L5031:
          db        "m$atan"
          db        0
L5032:
          db        "m$ln"
          db        0
L5033:
          db        "m$log"
          db        0
L5034:
          db        "m$exp"
          db        0
L5035:
          db        "m$floor"
          db        0
L5036:
          db        "m$ceil"
          db        0
L5037:
          db        "m$fract"
          db        0
L5038:
          db        "m$round"
          db        0
L5039:
          db        "pcm_alloc"
          db        0
L5040:
          db        "pcm_freestr"
          db        0
L5041:
          db        "pcm_free"
          db        0
L5042:
          db        "pcm_freeac"
          db        0
L5043:
          db        "pcm_copymem4"
          db        0
L5044:
          db        "pcm_clearmem"
          db        0
L5045:
          db        "pcm_init"
          db        0
L5046:
          db        "pcm_getac"
          db        0
L5047:
          db        "pcm_newblock"
          db        0
L5048:
          db        "pcm_round"
          db        0
L5049:
          db        "pcm_array"
          db        0
L5050:
          db        "pcm_printfreelist"
          db        0
L5051:
          db        "pcm_diags"
          db        0
L5052:
          db        "pcm_allocz"
          db        0
L5053:
          db        "pcm_copyheapstring"
          db        0
L5054:
          db        "pcm_copyheapstringn"
          db        0
L5055:
          db        "pcm_copyheapblock"
          db        0
L5056:
          db        "addtomemalloc"
          db        0
L5057:
          db        "removefrommemalloc"
          db        0
L5058:
          db        "allocmem"
          db        0
L5059:
          db        "reallocmem"
          db        0
L5060:
          db        "abortprogram"
          db        0
L5061:
          db        "getfilesize"
          db        0
L5062:
          db        "readrandom"
          db        0
L5063:
          db        "writerandom"
          db        0
L5064:
          db        "setfilepos"
          db        0
L5065:
          db        "getfilepos"
          db        0
L5066:
          db        "readfile"
          db        0
L5067:
          db        "writefile"
          db        0
L5068:
          db        "checkfile"
          db        0
L5069:
          db        "readlinen"
          db        0
L5070:
          db        "iconvlcn"
          db        0
L5071:
          db        "iconvucn"
          db        0
L5072:
          db        "convlcstring"
          db        0
L5073:
          db        "convucstring"
          db        0
L5074:
          db        "changeext"
          db        0
L5075:
          db        "extractext"
          db        0
L5076:
          db        "extractpath"
          db        0
L5077:
          db        "extractfile"
          db        0
L5078:
          db        "extractbasefile"
          db        0
L5079:
          db        "addext"
          db        0
L5080:
          db        "alloctable"
          db        0
L5081:
          db        "zalloctable"
          db        0
L5082:
          db        "checkfreelists"
          db        0
L5083:
          db        "pcm_alloc32"
          db        0
L5084:
          db        "pcm_free32"
          db        0
L5085:
          db        "outbyte"
          db        0
L5086:
          db        "outword16"
          db        0
L5087:
          db        "outword"
          db        0
L5088:
          db        "outword64"
          db        0
L5089:
          db        "myeof"
          db        0
L5090:
          db        "pcm_smallallocz"
          db        0
L5091:
          db        "pcm_smallalloc"
          db        0
L5092:
          db        "strbuffer_add"
          db        0
L5093:
          db        "gs_init"
          db        0
L5094:
          db        "gs_free"
          db        0
L5095:
          db        "gs_str"
          db        0
L5096:
          db        "gs_char"
          db        0
L5097:
          db        "gs_strn"
          db        0
L5098:
          db        "gs_strvar"
          db        0
L5099:
          db        "gs_strint"
          db        0
L5100:
          db        "gs_strln"
          db        0
L5101:
          db        "gs_strsp"
          db        0
L5102:
          db        "gs_line"
          db        0
L5103:
          db        "gs_getcol"
          db        0
L5104:
          db        "gs_leftstr"
          db        0
L5105:
          db        "gs_leftint"
          db        0
L5106:
          db        "gs_padto"
          db        0
L5107:
          db        "gs_println"
          db        0
L5108:
          db        "nextcmdparam"
          db        0
L5109:
          db        "readnextfileitem"
          db        0
L5110:
          db        "ipadstr"
          db        0
L5111:
          db        "padstr"
          db        0
L5112:
          db        "chr"
          db        0
L5113:
          db        "cmpstring"
          db        0
L5114:
          db        "cmpstringn"
          db        0
L5115:
          db        "eqstring"
          db        0
L5116:
          db        "cmpbytes"
          db        0
L5117:
          db        "eqbytes"
          db        0
L5118:
          db        "mseed"
          db        0
L5119:
          db        "mrandom"
          db        0
L5120:
          db        "mrandomp"
          db        0
L5121:
          db        "mrandomint"
          db        0
L5122:
          db        "mrandomrange"
          db        0
L5123:
          db        "mrandomreal"
          db        0
L5124:
          db        "mrandomreal1"
          db        0
L5125:
          db        "checkpackfile"
          db        0
L5126:
          db        "os_init"
          db        0
L5127:
          db        "os_execwait"
          db        0
L5128:
          db        "os_execcmd"
          db        0
L5129:
          db        "os_getch"
          db        0
L5130:
          db        "os_kbhit"
          db        0
L5131:
          db        "os_flushkeys"
          db        0
L5132:
          db        "os_getconsolein"
          db        0
L5133:
          db        "os_getconsoleout"
          db        0
L5134:
          db        "os_proginstance"
          db        0
L5135:
          db        "os_getdllinst"
          db        0
L5136:
          db        "os_getdllprocaddr"
          db        0
L5137:
          db        "os_initwindows"
          db        0
L5138:
          db        "os_gxregisterclass"
          db        0
L5139:
          db        "mainwndproc"
          db        0
L5140:
          db        "timerproc"
          db        0
L5141:
          db        "os_setmesshandler"
          db        0
L5142:
          db        "os_getchx"
          db        0
L5143:
          db        "os_getos"
          db        0
L5144:
          db        "os_gethostsize"
          db        0
L5145:
          db        "os_shellexec"
          db        0
L5146:
          db        "os_sleep"
          db        0
L5147:
          db        "os_getstdin"
          db        0
L5148:
          db        "os_getstdout"
          db        0
L5149:
          db        "os_gethostname"
          db        0
L5150:
          db        "os_getmpath"
          db        0
L5151:
          db        "os_exitprocess"
          db        0
L5152:
          db        "os_clock"
          db        0
L5153:
          db        "os_getclockspersec"
          db        0
L5154:
          db        "os_iswindows"
          db        0
L5155:
          db        "os_filelastwritetime"
          db        0
L5156:
          db        "os_getsystime"
          db        0
L5157:
          db        "os_messagebox"
          db        0
L5158:
          db        "os_hpcounter"
          db        0
L5159:
          db        "os_hpfrequency"
          db        0
L5160:
          db        "os_peek"
          db        0
L5161:
          db        "lex"
          db        0
L5162:
          db        "initlex"
          db        0
L5163:
          db        "readreal"
          db        0
L5164:
          db        "readnumber"
          db        0
L5165:
          db        "readbinary"
          db        0
L5166:
          db        "readhex"
          db        0
L5167:
          db        "ps"
          db        0
L5168:
          db        "printsymbol"
          db        0
L5169:
          db        "clearhashtable"
          db        0
L5170:
          db        "inithashtable"
          db        0
L5171:
          db        "addreservedword"
          db        0
L5172:
          db        "printhashtable"
          db        0
L5173:
          db        "lookuplex"
          db        0
L5174:
          db        "initsourcefile"
          db        0
L5175:
          db        "addnamestr"
          db        0
L5176:
          db        "lxerror"
          db        0
L5177:
          db        "gethashvalue"
          db        0
L5178:
          db        "skiptoeol"
          db        0
L5179:
          db        "makestring"
          db        0
L5180:
          db        "readmodule"
          db        0
L5181:
          db        "checkundefined"
          db        0
L5182:
          db        "checksymbol"
          db        0
L5183:
          db        "readinstr"
          db        0
L5184:
          db        "readcondinstr"
          db        0
L5185:
          db        "readoperand"
          db        0
L5186:
          db        "readexpression"
          db        0
L5187:
          db        "readterm"
          db        0
L5188:
          db        "readreg"
          db        0
L5189:
          db        "readaddrmode"
          db        0
L5190:
          db        "initlib"
          db        0
L5191:
          db        "genmc"
          db        0
L5192:
          db        "genmcstr"
          db        0
L5193:
          db        "newopnd"
          db        0
L5194:
          db        "genxreg"
          db        0
L5195:
          db        "genindex"
          db        0
L5196:
          db        "writemclblock"
          db        0
L5197:
          db        "gencomment"
          db        0
L5198:
          db        "genstrimm"
          db        0
L5199:
          db        "getsizetag"
          db        0
L5200:
          db        "writemcl"
          db        0
L5201:
          db        "strmcl"
          db        0
L5202:
          db        "stropnd"
          db        0
L5203:
          db        "strdef"
          db        0
L5204:
          db        "setsegment"
          db        0
L5205:
          db        "getsizeprefix"
          db        0
L5206:
          db        "needsizeprefix"
          db        0
L5207:
          db        "genimm_expr"
          db        0
L5208:
          db        "genint"
          db        0
L5209:
          db        "genlab"
          db        0
L5210:
          db        "genmem"
          db        0
L5211:
          db        "genreg0"
          db        0
L5212:
          db        "getfullname"
          db        0
L5213:
          db        "getregname"
          db        0
L5214:
          db        "xgetregname"
          db        0
L5215:
          db        "printst"
          db        0
L5216:
          db        "printstrec"
          db        0
L5217:
          db        "adddef"
          db        0
L5218:
          db        "addimport"
          db        0
L5219:
          db        "createlabel"
          db        0
L5220:
          db        "createnamedconst"
          db        0
L5221:
          db        "gerror"
          db        0
L5222:
          db        "serror"
          db        0
L5223:
          db        "serror_s"
          db        0
L5224:
          db        "inttostr"
          db        0
L5225:
          db        "realtostr"
          db        0
L5226:
          db        "buffercreate"
          db        0
L5227:
          db        "bufferexpand"
          db        0
L5228:
          db        "buffercheck"
          db        0
L5229:
          db        "bufferlength"
          db        0
L5230:
          db        "bufferelemptr"
          db        0
L5231:
          db        "addbyte"
          db        0
L5232:
          db        "addword"
          db        0
L5233:
          db        "adddword"
          db        0
L5234:
          db        "addqword"
          db        0
L5235:
          db        "printmodulesymbols"
          db        0
L5236:
          db        "printimportsymbols"
          db        0
L5237:
          db        "printdupltable"
          db        0
L5238:
          db        "genss"
          db        0
L5239:
          db        "doinstr"
          db        0
L5240:
          db        "genbyte"
          db        0
L5241:
          db        "genword"
          db        0
L5242:
          db        "gendword"
          db        0
L5243:
          db        "genqword"
          db        0
L5244:
          db        "genopnd"
          db        0
L5245:
          db        "addrelocitem"
          db        0
L5246:
          db        "getstindex"
          db        0
L5247:
          db        "genrel32"
          db        0
L5248:
          db        "genabs32"
          db        0
L5249:
          db        "genabs64"
          db        0
L5250:
          db        "getrel32"
          db        0
L5251:
          db        "dofwdrefs"
          db        0
L5252:
          db        "genrex"
          db        0
L5253:
          db        "isbytesized"
          db        0
L5254:
          db        "isdwordsized"
          db        0
L5255:
          db        "do_push"
          db        0
L5256:
          db        "do_pop"
          db        0
L5257:
          db        "do_inc"
          db        0
L5258:
          db        "do_neg"
          db        0
L5259:
          db        "genamode"
          db        0
L5260:
          db        "makemodrm"
          db        0
L5261:
          db        "setopsize"
          db        0
L5262:
          db        "setaddrsize"
          db        0
L5263:
          db        "getdispsize"
          db        0
L5264:
          db        "genrm"
          db        0
L5265:
          db        "genrmbyte"
          db        0
L5266:
          db        "makeam"
          db        0
L5267:
          db        "do_arith"
          db        0
L5268:
          db        "do_mov"
          db        0
L5269:
          db        "getregcoder"
          db        0
L5270:
          db        "getregcodeb"
          db        0
L5271:
          db        "getregcodebx"
          db        0
L5272:
          db        "getregcoderx"
          db        0
L5273:
          db        "do_lea"
          db        0
L5274:
          db        "do_movsx"
          db        0
L5275:
          db        "checkhighreg"
          db        0
L5276:
          db        "do_exch"
          db        0
L5277:
          db        "do_movsxd"
          db        0
L5278:
          db        "do_imul2"
          db        0
L5279:
          db        "do_imul3"
          db        0
L5280:
          db        "do_shift"
          db        0
L5281:
          db        "do_test"
          db        0
L5282:
          db        "do_loop"
          db        0
L5283:
          db        "do_jcxz"
          db        0
L5284:
          db        "do_setcc"
          db        0
L5285:
          db        "do_movxmm"
          db        0
L5286:
          db        "do_arithxmm"
          db        0
L5287:
          db        "do_logicxmm"
          db        0
L5288:
          db        "do_convertfloat"
          db        0
L5289:
          db        "do_fix"
          db        0
L5290:
          db        "do_float"
          db        0
L5291:
          db        "do_call"
          db        0
L5292:
          db        "do_jmp"
          db        0
L5293:
          db        "getcurrdatalen"
          db        0
L5294:
          db        "do_cmovcc"
          db        0
L5295:
          db        "do_fmem"
          db        0
L5296:
          db        "getr32bits"
          db        0
L5297:
          db        "genrel8"
          db        0
L5298:
          db        "checkshortjump"
          db        0
L5299:
          db        "addfwdref"
          db        0
L5300:
          db        "switchseg"
          db        0
L5301:
          db        "do_movdqx"
          db        0
L5302:
          db        "do_popcnt"
          db        0
L5303:
          db        "do_bsf"
          db        0
L5304:
          db        "extendsymboltable"
          db        0
L5305:
          db        "do_pcmpistri"
          db        0
L5306:
          db        "writeexe"
          db        0
L5307:
          db        "genexe"
          db        0
L5308:
          db        "loadlibs"
          db        0
L5309:
          db        "writessdata"
          db        0
L5310:
          db        "initsectiontable"
          db        0
L5311:
          db        "showssdata"
          db        0
L5312:
          db        "showsectiondata"
          db        0
L5313:
          db        "showsectioncode"
          db        0
L5314:
          db        "showsectionrelocs2"
          db        0
L5315:
          db        "gs_value"
          db        0
L5316:
          db        "showsymboltable2"
          db        0
L5317:
          db        "showimporttable"
          db        0
L5318:
          db        "roundtoblock"
          db        0
L5319:
          db        "showsections"
          db        0
L5320:
          db        "extractlibname"
          db        0
L5321:
          db        "scanst"
          db        0
L5322:
          db        "relocdata"
          db        0
L5323:
          db        "writerecordx"
          db        0
L5324:
          db        "writedosstub"
          db        0
L5325:
          db        "writepesig"
          db        0
L5326:
          db        "writepadding"
          db        0
L5327:
          db        "writefileheader"
          db        0
L5328:
          db        "writeoptheader"
          db        0
L5329:
          db        "writesectionheader"
          db        0
L5330:
          db        "writesectiondata"
          db        0
L5331:
          db        "getoffsets"
          db        0
L5332:
          db        "decodeinstr"
          db        0
L5333:
          db        "decodetwobyteinstr"
          db        0
L5334:
          db        "decodeaddr"
          db        0
L5335:
          db        "readbyte"
          db        0
L5336:
          db        "readsbyte"
          db        0
L5337:
          db        "readword16"
          db        0
L5338:
          db        "readint16"
          db        0
L5339:
          db        "readword32"
          db        0
L5340:
          db        "readint32"
          db        0
L5341:
          db        "readint64"
          db        0
L5342:
          db        "getreg"
          db        0
L5343:
          db        "strreg"
          db        0
L5344:
          db        "strfreg"
          db        0
L5345:
          db        "printaddrmode"
          db        0
L5346:
          db        "genstr"
          db        0
L5347:
          db        "genintd"
          db        0
L5348:
          db        "genhex"
          db        0
L5349:
          db        "readimm"
          db        0
L5350:
          db        "readimm8"
          db        0
L5351:
          db        "strxmm"
          db        0
L5352:
          db        "strmmx"
          db        0
L5353:
          db        "decode8087"
          db        0
L5354:
          db        "do87arith"
          db        0
L5355:
          db        "do87mem"
          db        0
L5356:
          db        "getsil"
          db        0
L5357:
          db        "getsilx"
          db        0
L5358:
          db        "writess"
          db        0
L5359:
          db        "writerecord"
          db        0
L5360:
          db        "writerelocs"
          db        0
L5361:
          db        "writedata"
          db        0
L5362:
          db        "writesymboltable"
          db        0
L5363:
          db        "writestringtable"
          db        0
L5364:
          db        "makesymbol"
          db        0
L5365:
          db        "addsymbol"
          db        0
L5366:
          db        "initsymboltable"
          db        0
L5367:
          db        "strtoaux"
          db        0
L5368:
          db        "sectiontoaux"
          db        0
L5369:
          db        "addstringentry"
          db        0
L5370:
          db        "convertsymboltable"
          db        0
L5371:
          db        "writecoff"
          db        0
m$fnnprocs:
L4881:
          dq        469
!m$fnaddresses:
L4873:
          dw        0
!m$fnexports:
L4875:
          dq        0
;SYSFN TABLE
          align     8
L4605:
          dq        L4889
L4606:
          dq        L4888
L4831:
          dq        L4778
L4830:
          dq        L4776
L3654:
          dq        L4899
L4573:
          dq        L4898
L4579:
          dq        L4896
L4621:
          dq        L4893
L3709:
          dq        L4901
L3674:
          dq        L4900
L4339:
          dq        L4869
L3697:
          dq        L4868
L3646:
          dq        L4866
L4116:
          dq        L4865
L3660:
          dq        L4848
L3658:
          dq        L4861
L3648:
          dq        L4859
L4546:
          dq        L4854
L3647:
          dq        L4851
L4045:
          dq        L4862
L3649:
          dq        L4849
L3650:
          dq        L4864
!---------------------------------------------

